{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8e16bdff",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from bs4 import BeautifulSoup\n",
    "import re\n",
    "from nltk.corpus import stopwords\n",
    "import nltk\n",
    "from nltk.tokenize import sent_tokenize, word_tokenize\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fbd4a90d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('QueryResults_2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8682d679",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Body</th>\n",
       "      <th>Tags</th>\n",
       "      <th>Id</th>\n",
       "      <th>Score</th>\n",
       "      <th>ViewCount</th>\n",
       "      <th>FavoriteCount</th>\n",
       "      <th>AnswerCount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pandas equivalent of np.where</td>\n",
       "      <td>&lt;p&gt;&lt;code&gt;np.where&lt;/code&gt; has the semantics of ...</td>\n",
       "      <td>&lt;python&gt;&lt;pandas&gt;&lt;numpy&gt;&lt;where-clause&gt;</td>\n",
       "      <td>38579532</td>\n",
       "      <td>70</td>\n",
       "      <td>106887</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The type system in Scala is Turing complete. P...</td>\n",
       "      <td>&lt;p&gt;There are claims that Scala's type system i...</td>\n",
       "      <td>&lt;language-agnostic&gt;&lt;scala&gt;&lt;type-systems&gt;&lt;turin...</td>\n",
       "      <td>4047512</td>\n",
       "      <td>57</td>\n",
       "      <td>7625</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>How can you publish a ClickOnce application th...</td>\n",
       "      <td>&lt;p&gt;I have CruiseControl.NET Version 1.4 set up...</td>\n",
       "      <td>&lt;msbuild&gt;&lt;clickonce&gt;&lt;cruisecontrol.net&gt;&lt;publish&gt;</td>\n",
       "      <td>12482</td>\n",
       "      <td>24</td>\n",
       "      <td>12992</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>How do you get a directory listing in C?</td>\n",
       "      <td>&lt;p&gt;How do you scan a directory for folders and...</td>\n",
       "      <td>&lt;c&gt;&lt;file&gt;&lt;directory&gt;&lt;cross-platform&gt;&lt;common-ta...</td>\n",
       "      <td>12489</td>\n",
       "      <td>65</td>\n",
       "      <td>135968</td>\n",
       "      <td>21</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Expression Evaluation and Tree Walking using p...</td>\n",
       "      <td>&lt;p&gt;This morning, I was reading &lt;a href=\"http:/...</td>\n",
       "      <td>&lt;oop&gt;&lt;recursion&gt;&lt;polymorphism&gt;&lt;binary-tree&gt;</td>\n",
       "      <td>12516</td>\n",
       "      <td>27</td>\n",
       "      <td>7032</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49995</th>\n",
       "      <td>Frontend javascript frameworks with node.js</td>\n",
       "      <td>&lt;p&gt;I am starting to learn frontend JavaScript ...</td>\n",
       "      <td>&lt;javascript&gt;&lt;node.js&gt;&lt;backbone.js&gt;&lt;ember.js&gt;&lt;j...</td>\n",
       "      <td>14072131</td>\n",
       "      <td>30</td>\n",
       "      <td>29357</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49996</th>\n",
       "      <td>WELD-001408: Unsatisfied dependencies for type...</td>\n",
       "      <td>&lt;p&gt;I'm a Java EE-newbie. I want to test JSF an...</td>\n",
       "      <td>&lt;jsf&gt;&lt;jakarta-ee&gt;&lt;dependency-injection&gt;&lt;cdi&gt;&lt;m...</td>\n",
       "      <td>28352461</td>\n",
       "      <td>53</td>\n",
       "      <td>135308</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49997</th>\n",
       "      <td>Optimize uploaded images with php (jpeg)</td>\n",
       "      <td>&lt;p&gt;When running Page Speed in Google Chrome it...</td>\n",
       "      <td>&lt;php&gt;&lt;gd&gt;&lt;jpeg&gt;&lt;image-compression&gt;&lt;image-optim...</td>\n",
       "      <td>14072456</td>\n",
       "      <td>16</td>\n",
       "      <td>40714</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49998</th>\n",
       "      <td>Google Maps v2 - set both my location and zoom in</td>\n",
       "      <td>&lt;p&gt;My question is, does anyone know how to set...</td>\n",
       "      <td>&lt;android&gt;&lt;api&gt;&lt;google-maps&gt;&lt;google-maps-api-2&gt;</td>\n",
       "      <td>14074129</td>\n",
       "      <td>125</td>\n",
       "      <td>163166</td>\n",
       "      <td>41</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49999</th>\n",
       "      <td>post request with multiple parameters JSON and...</td>\n",
       "      <td>&lt;p&gt;I've created a rest api using Jersey/Jackso...</td>\n",
       "      <td>&lt;java&gt;&lt;json&gt;&lt;post&gt;&lt;jersey&gt;&lt;jackson&gt;</td>\n",
       "      <td>14075422</td>\n",
       "      <td>22</td>\n",
       "      <td>71183</td>\n",
       "      <td>19</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50000 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   Title  \\\n",
       "0                          pandas equivalent of np.where   \n",
       "1      The type system in Scala is Turing complete. P...   \n",
       "2      How can you publish a ClickOnce application th...   \n",
       "3               How do you get a directory listing in C?   \n",
       "4      Expression Evaluation and Tree Walking using p...   \n",
       "...                                                  ...   \n",
       "49995        Frontend javascript frameworks with node.js   \n",
       "49996  WELD-001408: Unsatisfied dependencies for type...   \n",
       "49997           Optimize uploaded images with php (jpeg)   \n",
       "49998  Google Maps v2 - set both my location and zoom in   \n",
       "49999  post request with multiple parameters JSON and...   \n",
       "\n",
       "                                                    Body  \\\n",
       "0      <p><code>np.where</code> has the semantics of ...   \n",
       "1      <p>There are claims that Scala's type system i...   \n",
       "2      <p>I have CruiseControl.NET Version 1.4 set up...   \n",
       "3      <p>How do you scan a directory for folders and...   \n",
       "4      <p>This morning, I was reading <a href=\"http:/...   \n",
       "...                                                  ...   \n",
       "49995  <p>I am starting to learn frontend JavaScript ...   \n",
       "49996  <p>I'm a Java EE-newbie. I want to test JSF an...   \n",
       "49997  <p>When running Page Speed in Google Chrome it...   \n",
       "49998  <p>My question is, does anyone know how to set...   \n",
       "49999  <p>I've created a rest api using Jersey/Jackso...   \n",
       "\n",
       "                                                    Tags        Id  Score  \\\n",
       "0                  <python><pandas><numpy><where-clause>  38579532     70   \n",
       "1      <language-agnostic><scala><type-systems><turin...   4047512     57   \n",
       "2       <msbuild><clickonce><cruisecontrol.net><publish>     12482     24   \n",
       "3      <c><file><directory><cross-platform><common-ta...     12489     65   \n",
       "4            <oop><recursion><polymorphism><binary-tree>     12516     27   \n",
       "...                                                  ...       ...    ...   \n",
       "49995  <javascript><node.js><backbone.js><ember.js><j...  14072131     30   \n",
       "49996  <jsf><jakarta-ee><dependency-injection><cdi><m...  28352461     53   \n",
       "49997  <php><gd><jpeg><image-compression><image-optim...  14072456     16   \n",
       "49998     <android><api><google-maps><google-maps-api-2>  14074129    125   \n",
       "49999                <java><json><post><jersey><jackson>  14075422     22   \n",
       "\n",
       "       ViewCount  FavoriteCount  AnswerCount  \n",
       "0         106887             17            1  \n",
       "1           7625             12            2  \n",
       "2          12992             13            5  \n",
       "3         135968             21            9  \n",
       "4           7032             19           16  \n",
       "...          ...            ...          ...  \n",
       "49995      29357             11            2  \n",
       "49996     135308             12            7  \n",
       "49997      40714             12            4  \n",
       "49998     163166             41           11  \n",
       "49999      71183             19            2  \n",
       "\n",
       "[50000 rows x 8 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95720be5",
   "metadata": {},
   "source": [
    "### Les titres sont tout aussi important que le Body. Nous pouvons regrouper les deux. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "35c2cec0",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.Body = data.Title + \" \" + data.Body "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "34577f3d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        pandas equivalent of np.where <p><code>np.wher...\n",
       "1        The type system in Scala is Turing complete. P...\n",
       "2        How can you publish a ClickOnce application th...\n",
       "3        How do you get a directory listing in C? <p>Ho...\n",
       "4        Expression Evaluation and Tree Walking using p...\n",
       "                               ...                        \n",
       "49995    Frontend javascript frameworks with node.js <p...\n",
       "49996    WELD-001408: Unsatisfied dependencies for type...\n",
       "49997    Optimize uploaded images with php (jpeg) <p>Wh...\n",
       "49998    Google Maps v2 - set both my location and zoom...\n",
       "49999    post request with multiple parameters JSON and...\n",
       "Name: Body, Length: 50000, dtype: object"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Body"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "151cdb42",
   "metadata": {},
   "source": [
    "## Gestion des TAGS ( cible ) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af0a66bc",
   "metadata": {},
   "source": [
    "#### DÃ©finition des fonction permettant de cleaner les TAGS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b2d2c14d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def tag_remover(tag):\n",
    "    tag = tag.replace('>' , \" \").replace('<', \" \")\n",
    "    return tag\n",
    "\n",
    "def tag_to_word_list(tag):\n",
    "    tag = BeautifulSoup(tag).get_text()\n",
    "    tag = tag.split()\n",
    "    return(tag)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c16dd52",
   "metadata": {},
   "source": [
    "#### Parcourons tous les TAGS pour leur appliquer nos fonctions de clean."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "bdd72025",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "Tags = []\n",
    "for tag in data.Tags:\n",
    "    tag = tag_remover(tag)\n",
    "    tag = tag_to_word_list(tag)\n",
    "    Tags.append(tag)\n",
    "    \n",
    "tag_bank = [] \n",
    "for tag in Tags : \n",
    "    for y in tag:\n",
    "        tag_bank.append(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24e24616",
   "metadata": {},
   "source": [
    "#### Identifions, les TAGS les plus courants, cela pourra certainement nous Ãªtre utile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "7555216a",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set(font_scale = 1.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "1ded7572",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pylab as plt\n",
    "tags = pd.DataFrame()\n",
    "tags['Tags'] = tag_bank\n",
    "# for legend text\n",
    "plt.figure(figsize = (10,5))\n",
    "\n",
    "sns.barplot(tags['Tags'].value_counts().head(10).index,\\\n",
    "            tags['Tags'].value_counts().head(10))\n",
    "\n",
    "top_ten = tags['Tags'].value_counts().head(10).index\n",
    "top_ten_tags=[]\n",
    "for i in range(len(top_ten)):\n",
    "    top_ten_tags.append(top_ten[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3fcada7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37339"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tags['Tags'].value_counts().head(10).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f87b5963",
   "metadata": {},
   "outputs": [],
   "source": [
    "#CrÃ©ation des data que nous utiliserons pour crÃ©er notre modÃ¨le supervisÃ©\n",
    "data_to_train = [] #--> X\n",
    "target_to_train = [] #--> y\n",
    "len_question = []\n",
    "counter = 0\n",
    "for tag in Tags:\n",
    "    for i in tag:\n",
    "        if i in top_ten_tags:            \n",
    "            data_to_train.append(data.Body[counter])\n",
    "            len_question.append(len(data.Body[counter]))\n",
    "            target_to_train.append(i)\n",
    "            \n",
    "            \n",
    "    counter+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "2e10fa5d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "java\n",
      "python\n",
      "c#\n",
      "javascript\n",
      "android\n",
      "ios\n",
      "c++\n",
      ".net\n",
      "html\n",
      "iphone\n"
     ]
    }
   ],
   "source": [
    "for tag in top_ten:\n",
    "    print(tag)\n",
    "    top_ten_tags.append(tag)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "cc79e80b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37339"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(len_question)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bbe4241",
   "metadata": {},
   "source": [
    "#### Y-a-t-il une corrÃ©lation entre la taille des questions posÃ©es et les TAGS associÃ©s ? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "b9b04018",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,5))\n",
    "\n",
    "sns.barplot(x=len_question, y=target_to_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e264e244",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
