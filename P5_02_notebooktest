{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "8e16bdff",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from bs4 import BeautifulSoup\n",
    "import re\n",
    "from nltk.corpus import stopwords\n",
    "import nltk\n",
    "from nltk.tokenize import sent_tokenize, word_tokenize\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "fbd4a90d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('QueryResults_2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "8682d679",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Body</th>\n",
       "      <th>Tags</th>\n",
       "      <th>Id</th>\n",
       "      <th>Score</th>\n",
       "      <th>ViewCount</th>\n",
       "      <th>FavoriteCount</th>\n",
       "      <th>AnswerCount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pandas equivalent of np.where</td>\n",
       "      <td>&lt;p&gt;&lt;code&gt;np.where&lt;/code&gt; has the semantics of ...</td>\n",
       "      <td>&lt;python&gt;&lt;pandas&gt;&lt;numpy&gt;&lt;where-clause&gt;</td>\n",
       "      <td>38579532</td>\n",
       "      <td>70</td>\n",
       "      <td>106887</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The type system in Scala is Turing complete. P...</td>\n",
       "      <td>&lt;p&gt;There are claims that Scala's type system i...</td>\n",
       "      <td>&lt;language-agnostic&gt;&lt;scala&gt;&lt;type-systems&gt;&lt;turin...</td>\n",
       "      <td>4047512</td>\n",
       "      <td>57</td>\n",
       "      <td>7625</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>How can you publish a ClickOnce application th...</td>\n",
       "      <td>&lt;p&gt;I have CruiseControl.NET Version 1.4 set up...</td>\n",
       "      <td>&lt;msbuild&gt;&lt;clickonce&gt;&lt;cruisecontrol.net&gt;&lt;publish&gt;</td>\n",
       "      <td>12482</td>\n",
       "      <td>24</td>\n",
       "      <td>12992</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>How do you get a directory listing in C?</td>\n",
       "      <td>&lt;p&gt;How do you scan a directory for folders and...</td>\n",
       "      <td>&lt;c&gt;&lt;file&gt;&lt;directory&gt;&lt;cross-platform&gt;&lt;common-ta...</td>\n",
       "      <td>12489</td>\n",
       "      <td>65</td>\n",
       "      <td>135968</td>\n",
       "      <td>21</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Expression Evaluation and Tree Walking using p...</td>\n",
       "      <td>&lt;p&gt;This morning, I was reading &lt;a href=\"http:/...</td>\n",
       "      <td>&lt;oop&gt;&lt;recursion&gt;&lt;polymorphism&gt;&lt;binary-tree&gt;</td>\n",
       "      <td>12516</td>\n",
       "      <td>27</td>\n",
       "      <td>7032</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49995</th>\n",
       "      <td>Frontend javascript frameworks with node.js</td>\n",
       "      <td>&lt;p&gt;I am starting to learn frontend JavaScript ...</td>\n",
       "      <td>&lt;javascript&gt;&lt;node.js&gt;&lt;backbone.js&gt;&lt;ember.js&gt;&lt;j...</td>\n",
       "      <td>14072131</td>\n",
       "      <td>30</td>\n",
       "      <td>29357</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49996</th>\n",
       "      <td>WELD-001408: Unsatisfied dependencies for type...</td>\n",
       "      <td>&lt;p&gt;I'm a Java EE-newbie. I want to test JSF an...</td>\n",
       "      <td>&lt;jsf&gt;&lt;jakarta-ee&gt;&lt;dependency-injection&gt;&lt;cdi&gt;&lt;m...</td>\n",
       "      <td>28352461</td>\n",
       "      <td>53</td>\n",
       "      <td>135308</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49997</th>\n",
       "      <td>Optimize uploaded images with php (jpeg)</td>\n",
       "      <td>&lt;p&gt;When running Page Speed in Google Chrome it...</td>\n",
       "      <td>&lt;php&gt;&lt;gd&gt;&lt;jpeg&gt;&lt;image-compression&gt;&lt;image-optim...</td>\n",
       "      <td>14072456</td>\n",
       "      <td>16</td>\n",
       "      <td>40714</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49998</th>\n",
       "      <td>Google Maps v2 - set both my location and zoom in</td>\n",
       "      <td>&lt;p&gt;My question is, does anyone know how to set...</td>\n",
       "      <td>&lt;android&gt;&lt;api&gt;&lt;google-maps&gt;&lt;google-maps-api-2&gt;</td>\n",
       "      <td>14074129</td>\n",
       "      <td>125</td>\n",
       "      <td>163166</td>\n",
       "      <td>41</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49999</th>\n",
       "      <td>post request with multiple parameters JSON and...</td>\n",
       "      <td>&lt;p&gt;I've created a rest api using Jersey/Jackso...</td>\n",
       "      <td>&lt;java&gt;&lt;json&gt;&lt;post&gt;&lt;jersey&gt;&lt;jackson&gt;</td>\n",
       "      <td>14075422</td>\n",
       "      <td>22</td>\n",
       "      <td>71183</td>\n",
       "      <td>19</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50000 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   Title  \\\n",
       "0                          pandas equivalent of np.where   \n",
       "1      The type system in Scala is Turing complete. P...   \n",
       "2      How can you publish a ClickOnce application th...   \n",
       "3               How do you get a directory listing in C?   \n",
       "4      Expression Evaluation and Tree Walking using p...   \n",
       "...                                                  ...   \n",
       "49995        Frontend javascript frameworks with node.js   \n",
       "49996  WELD-001408: Unsatisfied dependencies for type...   \n",
       "49997           Optimize uploaded images with php (jpeg)   \n",
       "49998  Google Maps v2 - set both my location and zoom in   \n",
       "49999  post request with multiple parameters JSON and...   \n",
       "\n",
       "                                                    Body  \\\n",
       "0      <p><code>np.where</code> has the semantics of ...   \n",
       "1      <p>There are claims that Scala's type system i...   \n",
       "2      <p>I have CruiseControl.NET Version 1.4 set up...   \n",
       "3      <p>How do you scan a directory for folders and...   \n",
       "4      <p>This morning, I was reading <a href=\"http:/...   \n",
       "...                                                  ...   \n",
       "49995  <p>I am starting to learn frontend JavaScript ...   \n",
       "49996  <p>I'm a Java EE-newbie. I want to test JSF an...   \n",
       "49997  <p>When running Page Speed in Google Chrome it...   \n",
       "49998  <p>My question is, does anyone know how to set...   \n",
       "49999  <p>I've created a rest api using Jersey/Jackso...   \n",
       "\n",
       "                                                    Tags        Id  Score  \\\n",
       "0                  <python><pandas><numpy><where-clause>  38579532     70   \n",
       "1      <language-agnostic><scala><type-systems><turin...   4047512     57   \n",
       "2       <msbuild><clickonce><cruisecontrol.net><publish>     12482     24   \n",
       "3      <c><file><directory><cross-platform><common-ta...     12489     65   \n",
       "4            <oop><recursion><polymorphism><binary-tree>     12516     27   \n",
       "...                                                  ...       ...    ...   \n",
       "49995  <javascript><node.js><backbone.js><ember.js><j...  14072131     30   \n",
       "49996  <jsf><jakarta-ee><dependency-injection><cdi><m...  28352461     53   \n",
       "49997  <php><gd><jpeg><image-compression><image-optim...  14072456     16   \n",
       "49998     <android><api><google-maps><google-maps-api-2>  14074129    125   \n",
       "49999                <java><json><post><jersey><jackson>  14075422     22   \n",
       "\n",
       "       ViewCount  FavoriteCount  AnswerCount  \n",
       "0         106887             17            1  \n",
       "1           7625             12            2  \n",
       "2          12992             13            5  \n",
       "3         135968             21            9  \n",
       "4           7032             19           16  \n",
       "...          ...            ...          ...  \n",
       "49995      29357             11            2  \n",
       "49996     135308             12            7  \n",
       "49997      40714             12            4  \n",
       "49998     163166             41           11  \n",
       "49999      71183             19            2  \n",
       "\n",
       "[50000 rows x 8 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95720be5",
   "metadata": {},
   "source": [
    "### Les titres sont tout aussi important que le Body. Nous pouvons regrouper les deux. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "35c2cec0",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.Body = data.Title + \" \" + data.Body "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "34577f3d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        pandas equivalent of np.where <p><code>np.wher...\n",
       "1        The type system in Scala is Turing complete. P...\n",
       "2        How can you publish a ClickOnce application th...\n",
       "3        How do you get a directory listing in C? <p>Ho...\n",
       "4        Expression Evaluation and Tree Walking using p...\n",
       "                               ...                        \n",
       "49995    Frontend javascript frameworks with node.js <p...\n",
       "49996    WELD-001408: Unsatisfied dependencies for type...\n",
       "49997    Optimize uploaded images with php (jpeg) <p>Wh...\n",
       "49998    Google Maps v2 - set both my location and zoom...\n",
       "49999    post request with multiple parameters JSON and...\n",
       "Name: Body, Length: 50000, dtype: object"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Body"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "151cdb42",
   "metadata": {},
   "source": [
    "## Gestion des TAGS ( cible ) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af0a66bc",
   "metadata": {},
   "source": [
    "#### DÃ©finition des fonction permettant de cleaner les TAGS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "b2d2c14d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def tag_remover(tag):\n",
    "    tag = tag.replace('>' , \" \").replace('<', \" \")\n",
    "    return tag\n",
    "\n",
    "def tag_to_word_list(tag):\n",
    "    tag = BeautifulSoup(tag).get_text()\n",
    "    tag = tag.split()\n",
    "    return(tag)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c16dd52",
   "metadata": {},
   "source": [
    "#### Parcourons tous les TAGS pour leur appliquer nos fonctions de clean."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "bdd72025",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "Tags = []\n",
    "for tag in data.Tags:\n",
    "    tag = tag_remover(tag)\n",
    "    tag = tag_to_word_list(tag)\n",
    "    Tags.append(tag)\n",
    "    \n",
    "tag_bank = [] \n",
    "for tag in Tags : \n",
    "    for y in tag:\n",
    "        tag_bank.append(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24e24616",
   "metadata": {},
   "source": [
    "#### Identifions, les TAGS les plus courants, cela pourra certainement nous Ãªtre utile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "7555216a",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set(font_scale = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "1ded7572",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pylab as plt\n",
    "tags = pd.DataFrame()\n",
    "tags['Tags'] = tag_bank\n",
    "# for legend text\n",
    "plt.figure(figsize = (10,5))\n",
    "\n",
    "sns.barplot(tags['Tags'].value_counts().head(10).index,\\\n",
    "            tags['Tags'].value_counts().head(10))\n",
    "\n",
    "top_ten = tags['Tags'].value_counts().head(10).index\n",
    "top_ten_tags=[]\n",
    "for i in range(len(top_ten)):\n",
    "    top_ten_tags.append(top_ten[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "3fcada7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37339"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tags['Tags'].value_counts().head(10).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "f87b5963",
   "metadata": {},
   "outputs": [],
   "source": [
    "#CrÃ©ation des data que nous utiliserons pour crÃ©er notre modÃ¨le supervisÃ©\n",
    "data_to_train = [] #--> X\n",
    "target_to_train = [] #--> y\n",
    "counter = 0\n",
    "for tag in Tags:\n",
    "    for i in tag:\n",
    "        if i in top_ten_tags:            \n",
    "            data_to_train.append(data.Body[counter])\n",
    "            target_to_train.append(i)\n",
    "            \n",
    "            \n",
    "    counter+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "2e10fa5d",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "java\n",
      "python\n",
      "c#\n",
      "javascript\n",
      "android\n",
      "ios\n",
      "c++\n",
      ".net\n",
      "html\n",
      "iphone\n"
     ]
    }
   ],
   "source": [
    "for tag in top_ten:\n",
    "    print(tag)\n",
    "    top_ten_tags.append(tag)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a00b1457",
   "metadata": {},
   "source": [
    "# PrÃ©parons nos donnÃ©es Ã  l'analyse textuelle"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5ec8188",
   "metadata": {},
   "source": [
    "### Fonctions primaires "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "00908ef1",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def lemma_fct(list_words) :\n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    lem_w = [lemmatizer.lemmatize(w) for w in list_words]\n",
    "    return lem_w"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5ae84ca",
   "metadata": {},
   "source": [
    "### Fonction dÃ©stinÃ©e Ã  la crÃ©ation d'un \"Bag of Word\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "4db45986",
   "metadata": {},
   "outputs": [],
   "source": [
    "def question_to_words_BW(question):\n",
    "    # On rÃ©cupÃ¨re le texte\n",
    "    question_text = BeautifulSoup(question).get_text()\n",
    "    \n",
    "    #On ne garde que les caractÃ¨res intÃ©ressants. \n",
    "    question = re.sub(\"[^a-zA-Z+#]\",\" \", question_text)\n",
    "    \n",
    "    # On tokenize nos questions en mots.\n",
    "    words = question.lower().split()\n",
    "    \n",
    "    # On retire les mots clÃ©s plus courants avec peu de valeur ajoutÃ©e. \n",
    "    stops = set(stopwords.words('english'))\n",
    "    meaningful_words = [w for w in words if not w in stops]\n",
    "        \n",
    "    # On lemmatize les mots\n",
    "    meaningful_words = lemma_fct(meaningful_words)\n",
    "    \n",
    "    #On retourne une liste comprenant les mots ainsi rÃ©cupÃ©rÃ©s. \n",
    "    return(\" \".join( meaningful_words))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4972aff9",
   "metadata": {},
   "source": [
    "### Fonctions dÃ©stinÃ©e Ã  la crÃ©ation du modÃ¨le Word2vec. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "4922892d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sentence_to_wordlist(sentence, remove_stopwords=False, remove_ponctuation=False,lemmatize = False):\n",
    "\n",
    "    # 1. Remove HTML\n",
    "    sentence = BeautifulSoup(sentence).get_text()\n",
    "    sentence = re.sub(\"[^a-zA-Z+#]\",\" \", sentence)\n",
    "    # 1. Tokenization des phrases en liste de mots. \n",
    "    words = sentence.split()    \n",
    "    # 2. Lemmatisation des listes de mots(en option)\n",
    "    if lemmatize:\n",
    "        words = lemma_fct(words)\n",
    "    \n",
    "    # 3. Gestion des stopWords (en option)\n",
    "    if remove_stopwords:\n",
    "        stops = set(stopwords.words('english'))\n",
    "        words = [w for w in words if not w in stops]\n",
    "        \n",
    "    # 4. Gestion de la ponctuation (en option)\n",
    "    if remove_ponctuation:\n",
    "        ponct = ['[', ']', ',', '.', ':', '?', '(', ')','\\'','\\\"','`']\n",
    "        words = [w for w in words if not w in ponct]\n",
    "    \n",
    "    # 5. Return a list of words\n",
    "    return(words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "505aec45",
   "metadata": {},
   "outputs": [],
   "source": [
    "def question_to_sentences(question, tokenizer):\n",
    "    # Function to split a question into parsed sentences. Returns a \n",
    "    # list of sentences, where each sentence is a list of words\n",
    "    \n",
    "    question = BeautifulSoup(question).get_text()\n",
    "    # 1. Use the NLTK tokenizer to split the paragraph into sentences\n",
    "    raw_sentences = tokenizer.tokenize(question.strip())\n",
    "    # 2. Loop over each sentence\n",
    "    sentences = []\n",
    "    for raw_sentence in raw_sentences:\n",
    "        # If a sentence is empty, skip it\n",
    "        if len(raw_sentence) > 0:\n",
    "            # Otherwise, call review_to_wordlist to get a list of words\n",
    "            sentences.append(sentence_to_wordlist(raw_sentence, remove_stopwords=False,\\\n",
    "                                                  remove_ponctuation=False, lemmatize=False))\n",
    "    #\n",
    "    # Return the list of sentences (each sentence is a list of words,\n",
    "    # so this returns a list of lists\n",
    "    return sentences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "02aeb5a6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#tokenizer qui dÃ©compose en phrases via la ponctuation= punkt\n",
    "tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "722e68c3",
   "metadata": {},
   "source": [
    "# BAG Of WORDS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a91634cc",
   "metadata": {},
   "source": [
    "### PrÃ©processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "33776930",
   "metadata": {},
   "outputs": [],
   "source": [
    "questions_cleared = []\n",
    "for question in data.Body:\n",
    "        cleared_question = question_to_words_BW(question)\n",
    "        questions_cleared.append(cleared_question)\n",
    "        \n",
    "# On crÃ©Ã© le vectorizer qui va vectorizer les mots de nos questions. \n",
    "#vectorizer = CountVectorizer(analyzer = \"word\", max_features = 5000) \n",
    "vectorizer = TfidfVectorizer(analyzer = \"word\", max_features = 5000)\n",
    "\n",
    "\n",
    "# On fit notre vectorizer avec nos questions. \n",
    "questions_features = vectorizer.fit_transform(questions_cleared)\n",
    "#questions_features = questions_features.toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a56c3593",
   "metadata": {},
   "source": [
    "### ModÃ¨le de prÃ©diction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "a9563596",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LatentDirichletAllocation(learning_method='online', learning_offset=50.0,\n",
       "                          max_iter=5, n_components=20, random_state=0)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.decomposition import LatentDirichletAllocation\n",
    "n_topics = 20\n",
    "\n",
    "lda = LatentDirichletAllocation(n_components = n_topics, max_iter = 5, learning_method='online',learning_offset=50.,random_state=0)\n",
    "\n",
    "lda.fit(questions_features)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c50e51ba",
   "metadata": {},
   "source": [
    "#### Ici, notre modÃ¨le nous renvoie un vecteur de la taille n_topics, avec pour chacun d'entre eux la probabilitÃ© d'appartencance de notre quetioni en input "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "26fa9484",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.01065472, 0.01065472, 0.01065472, 0.01065472, 0.01065472,\n",
       "        0.01065472, 0.01065472, 0.01065472, 0.01065472, 0.01065472,\n",
       "        0.79756031, 0.01065472, 0.01065472, 0.01065472, 0.01065472,\n",
       "        0.01065472, 0.01065472, 0.01065472, 0.01065472, 0.01065472]])"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lda.transform(questions_features[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "559d3005",
   "metadata": {},
   "source": [
    "### Affichage des topics trouvÃ©s par notre modÃ¨le.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "44507ea0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic 0:\n",
      "file project command build python\n",
      "Topic 1:\n",
      "keyboard vim modal cursor shortcut\n",
      "Topic 2:\n",
      "git branch commit repository github\n",
      "Topic 3:\n",
      "map latitude longitude coordinate lat\n",
      "Topic 4:\n",
      "self swift nsstring nil view\n",
      "Topic 5:\n",
      "curl ch solr bla addr\n",
      "Topic 6:\n",
      "df dataframe numpy panda np\n",
      "Topic 7:\n",
      "firstname employee mongoose lastname xpath\n",
      "Topic 8:\n",
      "tooltip bbb ccc fff brand\n",
      "Topic 9:\n",
      "user http request file app\n",
      "Topic 10:\n",
      "class value function object like\n",
      "Topic 11:\n",
      "datatable insecure treeview tbl parentid\n",
      "Topic 12:\n",
      "string character date convert utf\n",
      "Topic 13:\n",
      "database sql spring table mysql\n",
      "Topic 14:\n",
      "urllib na fp executor executorservice\n",
      "Topic 15:\n",
      "node npm module typescript mutex\n",
      "Topic 16:\n",
      "emacs lisp myfunction trans theme\n",
      "Topic 17:\n",
      "tensorflow gdb tf layer pool\n",
      "Topic 18:\n",
      "fixture rax mpi erb rdx\n",
      "Topic 19:\n",
      "image android div view color\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "def display_topics(model, feature_names, no_top_words):\n",
    "    topic_list = pd.DataFrame()\n",
    "    for topic_idx, topic in enumerate(model.components_):\n",
    "        print(\"Topic {}:\".format(topic_idx))\n",
    "        print(\" \".join([feature_names[i] for i in topic.argsort()[:-no_top_words - 1:-1]]))\n",
    "        topic_list[topic_idx] = [feature_names[i] for i in topic.argsort()[:-no_top_words - 1:-1]]\n",
    "\n",
    "no_top_words = 5\n",
    "display_topics(lda,vectorizer.get_feature_names(), 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "0b743bdb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n",
      "  warnings.warn(msg, category=FutureWarning)\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/pyLDAvis/_prepare.py:246: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  default_term_info = default_term_info.sort_values(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/past/builtins/misc.py:45: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n",
      "  from imp import reload\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/past/builtins/misc.py:45: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n",
      "  from imp import reload\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/past/builtins/misc.py:45: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n",
      "  from imp import reload\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/past/builtins/misc.py:45: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n",
      "  from imp import reload\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/past/builtins/misc.py:45: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n",
      "  from imp import reload\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/past/builtins/misc.py:45: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n",
      "  from imp import reload\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/past/builtins/misc.py:45: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n",
      "  from imp import reload\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/past/builtins/misc.py:45: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n",
      "  from imp import reload\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/past/builtins/misc.py:45: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n",
      "  from imp import reload\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.1/pyLDAvis/js/ldavis.v1.0.0.css\">\n",
       "\n",
       "\n",
       "<div id=\"ldavis_el178651404835609230243877698305\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "var ldavis_el178651404835609230243877698305_data = {\"mdsDat\": {\"x\": [0.10831210588390906, 0.1610883483817058, 0.19875767866911767, 0.23064736243383505, 0.20299173479232463, 0.218798811630306, 0.026387788650487704, 0.007476867527920071, -0.05381529794872206, -0.07247978487321995, -0.11020954148453316, -0.11766154890920957, -0.11873824993621208, -0.11613330523379024, -0.10567409005738065, -0.10246383214887475, -0.0915226417179584, -0.09164305852137183, -0.08807945664880466, -0.08603989048952772], \"y\": [-0.1382670991582612, -0.14545251349488866, -0.1287863945194271, -0.08415936280732939, 0.13479387862587855, 0.10611500804088718, 0.2217018318323028, 0.1906717756423159, 0.22501689975697892, 0.03946406561137563, 0.008761880018953226, 0.012827116578620621, -0.021901299533889803, -0.04213065914804893, -0.05553460702503753, -0.05986181726531261, -0.06520497713946265, -0.06517799849472937, -0.06619295927044516, -0.06668276825048088], \"topics\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], \"cluster\": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], \"Freq\": [37.236451662088456, 24.0489378916433, 11.979814583298932, 7.680898768734054, 2.448560799603377, 2.0050616528859644, 1.5492594778902695, 1.440862693324712, 1.270760626779349, 1.1410114532634663, 1.025540336546856, 1.0252711629517344, 0.9569863653234774, 0.9358292036898282, 0.8985158923836325, 0.8877561929760494, 0.8732226766886539, 0.8705284094794938, 0.8638342809547119, 0.8608958694936792]}, \"tinfo\": {\"Term\": [\"string\", \"map\", \"node\", \"git\", \"self\", \"file\", \"module\", \"column\", \"database\", \"curl\", \"array\", \"df\", \"difference\", \"date\", \"view\", \"npm\", \"python\", \"table\", \"datatable\", \"dataframe\", \"import\", \"emacs\", \"numpy\", \"json\", \"character\", \"image\", \"sql\", \"panda\", \"key\", \"convert\", \"vector\", \"std\", \"struct\", \"sum\", \"heap\", \"operator\", \"ptr\", \"enum\", \"unsigned\", \"promise\", \"printf\", \"haskell\", \"decimal\", \"integer\", \"matrix\", \"cout\", \"comparison\", \"algorithm\", \"country\", \"arr\", \"macro\", \"sizeof\", \"iterator\", \"linq\", \"city\", \"train\", \"memory\", \"varchar\", \"tuple\", \"sorted\", \"int\", \"thread\", \"performance\", \"pointer\", \"loop\", \"range\", \"dictionary\", \"join\", \"count\", \"list\", \"object\", \"double\", \"foo\", \"number\", \"value\", \"array\", \"collection\", \"plot\", \"class\", \"function\", \"time\", \"method\", \"sort\", \"two\", \"would\", \"return\", \"one\", \"data\", \"type\", \"like\", \"public\", \"question\", \"use\", \"code\", \"example\", \"difference\", \"way\", \"string\", \"using\", \"get\", \"new\", \"name\", \"want\", \"know\", \"java\", \"authentication\", \"certificate\", \"ajax\", \"webview\", \"firebase\", \"cookie\", \"facebook\", \"servlet\", \"oauth\", \"iframe\", \"intent\", \"login\", \"credential\", \"router\", \"redirect\", \"cooky\", \"notification\", \"req\", \"angular\", \"ssl\", \"auth\", \"webpack\", \"gmail\", \"uri\", \"httpclient\", \"authorization\", \"jsp\", \"ng\", \"react\", \"angularjs\", \"request\", \"url\", \"email\", \"token\", \"response\", \"video\", \"route\", \"send\", \"asp\", \"http\", \"form\", \"browser\", \"html\", \"page\", \"client\", \"api\", \"chrome\", \"user\", \"jquery\", \"web\", \"mvc\", \"service\", \"com\", \"app\", \"json\", \"post\", \"server\", \"javascript\", \"application\", \"event\", \"data\", \"using\", \"file\", \"get\", \"new\", \"net\", \"error\", \"function\", \"use\", \"like\", \"code\", \"name\", \"docker\", \"pip\", \"gradle\", \"maven\", \"intellij\", \"jar\", \"cmake\", \"sudo\", \"jenkins\", \"usr\", \"redis\", \"virtualenv\", \"gem\", \"installing\", \"rvm\", \"artifactid\", \"msbuild\", \"install\", \"installer\", \"pom\", \"apt\", \"exe\", \"nuget\", \"ant\", \"tar\", \"uninstall\", \"deploying\", \"vagrant\", \"powershell\", \"lib\", \"installed\", \"dll\", \"executable\", \"ubuntu\", \"bin\", \"directory\", \"build\", \"eclipse\", \"folder\", \"terminal\", \"package\", \"shell\", \"py\", \"command\", \"project\", \"mac\", \"xcode\", \"studio\", \"version\", \"linux\", \"file\", \"run\", \"environment\", \"window\", \"path\", \"library\", \"python\", \"script\", \"error\", \"visual\", \"running\", \"android\", \"application\", \"test\", \"java\", \"using\", \"app\", \"use\", \"line\", \"get\", \"px\", \"textview\", \"tableview\", \"uiimage\", \"svg\", \"uitableview\", \"font\", \"scroll\", \"imageview\", \"uilabel\", \"scrolling\", \"zoom\", \"height\", \"animate\", \"border\", \"rotate\", \"uicolor\", \"td\", \"uibutton\", \"animation\", \"bitmap\", \"shadow\", \"orientation\", \"gradient\", \"edittext\", \"color\", \"width\", \"canvas\", \"landscape\", \"radius\", \"pixel\", \"layout\", \"cell\", \"center\", \"image\", \"div\", \"fragment\", \"resize\", \"li\", \"screen\", \"background\", \"android\", \"cs\", \"view\", \"button\", \"style\", \"text\", \"size\", \"top\", \"bar\", \"item\", \"uiview\", \"label\", \"change\", \"activity\", \"position\", \"io\", \"element\", \"id\", \"content\", \"want\", \"jdbc\", \"datagrid\", \"mvvm\", \"jpa\", \"springframework\", \"cordova\", \"hibernate\", \"xaml\", \"textblock\", \"phpmyadmin\", \"celery\", \"migration\", \"datagridview\", \"entitymanager\", \"usercontrol\", \"transactional\", \"bean\", \"observablecollection\", \"combobox\", \"datatemplate\", \"eslint\", \"datacontext\", \"dao\", \"dialect\", \"couchdb\", \"aspnetcore\", \"xamarin\", \"datasource\", \"itemssource\", \"gridview\", \"viewmodel\", \"persistence\", \"transaction\", \"rollback\", \"spring\", \"postgres\", \"sqlite\", \"database\", \"sql\", \"postgresql\", \"entity\", \"procedure\", \"mysql\", \"db\", \"schema\", \"annotation\", \"binding\", \"mongodb\", \"boot\", \"oracle\", \"connection\", \"table\", \"wpf\", \"org\", \"server\", \"property\", \"column\", \"query\", \"java\", \"name\", \"insert\", \"yyyy\", \"stringbuilder\", \"myarray\", \"unicode\", \"sed\", \"mm\", \"sb\", \"ascii\", \"hh\", \"facet\", \"lf\", \"fibonacci\", \"awk\", \"decoder\", \"stringio\", \"substring\", \"character\", \"dd\", \"xe\", \"bytebuffer\", \"bouncycastle\", \"regex\", \"newline\", \"utf\", \"saml\", \"codec\", \"memorystream\", \"cipher\", \"str\", \"whitespace\", \"locale\", \"escape\", \"encode\", \"iso\", \"encoded\", \"encoding\", \"grep\", \"hex\", \"convert\", \"date\", \"decode\", \"datetime\", \"string\", \"replace\", \"byte\", \"format\", \"split\", \"word\", \"char\", \"line\", \"text\", \"array\", \"space\", \"file\", \"print\", \"output\", \"bash\", \"java\", \"python\", \"nsdate\", \"nsstring\", \"uiapplication\", \"nsarray\", \"androidruntime\", \"appdelegate\", \"geom\", \"ggplot\", \"aes\", \"segue\", \"uinavigationcontroller\", \"nslog\", \"nib\", \"salt\", \"viewcontroller\", \"nsnumber\", \"navigationcontroller\", \"sharedapplication\", \"calayer\", \"userinfo\", \"electron\", \"nsinteger\", \"icloud\", \"nonatomic\", \"stringwithformat\", \"activitythread\", \"appender\", \"heroku\", \"iboutlet\", \"nserror\", \"nil\", \"swift\", \"uiviewcontroller\", \"alloc\", \"delegate\", \"viewdidload\", \"self\", \"sha\", \"storyboard\", \"xib\", \"completion\", \"logger\", \"init\", \"controller\", \"func\", \"view\", \"logging\", \"yes\", \"selector\", \"io\", \"hash\", \"git\", \"anaconda\", \"branch\", \"sublime\", \"conda\", \"mercurial\", \"jupyter\", \"commits\", \"actor\", \"bitbucket\", \"rebase\", \"tfs\", \"hg\", \"swagger\", \"pycharm\", \"gitlab\", \"subversion\", \"commit\", \"signalr\", \"svn\", \"zsh\", \"ddd\", \"coroutine\", \"gpg\", \"notebook\", \"mysqldb\", \"mymodule\", \"checkout\", \"gitignore\", \"branching\", \"repo\", \"clone\", \"merge\", \"diff\", \"master\", \"repository\", \"ipython\", \"github\", \"pull\", \"push\", \"ssh\", \"remote\", \"history\", \"change\", \"file\", \"dataframe\", \"panda\", \"matplotlib\", \"spark\", \"nan\", \"plt\", \"numpy\", \"df\", \"pd\", \"scipy\", \"np\", \"fft\", \"dtype\", \"ax\", \"plotting\", \"groupby\", \"dataframes\", \"sn\", \"pyplot\", \"fig\", \"rdd\", \"kafka\", \"scatter\", \"arange\", \"cython\", \"ndarray\", \"particle\", \"parquet\", \"timeit\", \"axis\", \"series\", \"column\", \"import\", \"array\", \"python\", \"vim\", \"uitextfield\", \"uialertview\", \"jframe\", \"resharper\", \"uinavigationbar\", \"breakpoints\", \"publickeytoken\", \"sdl\", \"shortcut\", \"instagram\", \"culture\", \"modal\", \"velocity\", \"ctrl\", \"ellipsis\", \"lr\", \"keyboard\", \"forstate\", \"aar\", \"neutral\", \"intellisense\", \"nunit\", \"indent\", \"dismiss\", \"corefoundation\", \"cursor\", \"vi\", \"shift\", \"pressed\", \"editor\", \"dialog\", \"press\", \"visual\", \"tab\", \"disable\", \"studio\", \"enter\", \"button\", \"key\", \"npm\", \"gulp\", \"ionic\", \"grunt\", \"mocha\", \"dal\", \"pthread\", \"jpanel\", \"mutex\", \"typescript\", \"bower\", \"dm\", \"gyp\", \"karma\", \"yeoman\", \"semaphore\", \"vec\", \"volume\", \"node\", \"loadmodule\", \"nodejs\", \"pm\", \"star\", \"swing\", \"err\", \"module\", \"libsass\", \"globally\", \"difference\", \"json\", \"install\", \"latitude\", \"longitude\", \"lat\", \"subprocess\", \"popen\", \"lon\", \"latlng\", \"rw\", \"lng\", \"weather\", \"stderr\", \"bearing\", \"km\", \"psycopg\", \"radian\", \"elevation\", \"stdout\", \"coordinate\", \"pipe\", \"contour\", \"bounding\", \"map\", \"distance\", \"pg\", \"proc\", \"stdin\", \"earth\", \"fe\", \"dealloc\", \"closure\", \"calculate\", \"point\", \"tensorflow\", \"tf\", \"gdb\", \"lstm\", \"tensor\", \"startdate\", \"nsmutablearray\", \"multiprocessing\", \"uuid\", \"quicksort\", \"tt\", \"gpu\", \"relu\", \"neuron\", \"neural\", \"guid\", \"pickle\", \"dense\", \"applicationfilterchain\", \"dash\", \"undeclared\", \"openocd\", \"portaudiomodule\", \"pool\", \"threadedsortingcomparsion\", \"layer\", \"autorelease\", \"listiteratorimpl\", \"selftest\", \"ntt\", \"numpy\", \"silent\", \"bdist\", \"firstname\", \"mongoose\", \"lastname\", \"xpath\", \"beautifulsoup\", \"scrapy\", \"employee\", \"objectid\", \"emp\", \"soup\", \"fruit\", \"pear\", \"dog\", \"orange\", \"xslt\", \"subtotal\", \"xffffff\", \"popup\", \"apple\", \"listiteratorimpl\", \"selftest\", \"ntt\", \"asyncdownloadfile\", \"nicol\", \"travelguard\", \"mesz\", \"pyaudio\", \"eset\", \"bgcolor\", \"discount\", \"aac\", \"grey\", \"notepad\", \"magento\", \"benchmark\", \"promise\", \"fff\", \"serializer\", \"hash\", \"adb\", \"organize\", \"urllib\", \"executorservice\", \"urlopen\", \"yarn\", \"sqlcommand\", \"fp\", \"wb\", \"na\", \"executor\", \"gpio\", \"sqlconnection\", \"tb\", \"connectionstring\", \"cmd\", \"listiteratorimpl\", \"selftest\", \"ntt\", \"asyncdownloadfile\", \"nicol\", \"travelguard\", \"mesz\", \"pyaudio\", \"eset\", \"bgcolor\", \"discount\", \"webroot\", \"shipping\", \"copyonwritearraylist\", \"jam\", \"tpm\", \"begintransaction\", \"fff\", \"sqlclient\", \"analytics\", \"recv\", \"dm\", \"plotting\", \"ship\", \"jetty\", \"elif\", \"matrix\", \"aligned\", \"rpc\", \"mr\", \"reducer\", \"board\", \"solr\", \"bla\", \"curlopt\", \"setopt\", \"curl\", \"sockaddr\", \"xmlhttp\", \"ch\", \"addr\", \"listiteratorimpl\", \"selftest\", \"ntt\", \"asyncdownloadfile\", \"nicol\", \"travelguard\", \"mesz\", \"pyaudio\", \"eset\", \"bgcolor\", \"discount\", \"webroot\", \"shipping\", \"copyonwritearraylist\", \"jam\", \"tpm\", \"abstractbeanfactory\", \"containerbase\", \"addrreturn\", \"parentrunner\", \"handshaker\", \"peer\", \"futuretask\", \"sa\", \"pear\", \"filesize\", \"xxxxx\", \"fa\", \"filling\", \"ret\", \"arch\", \"distance\", \"myfile\", \"xff\", \"springapplication\", \"cli\", \"getid\", \"fff\", \"currenttimemillis\", \"irrelevant\", \"fname\", \"caption\", \"emacs\", \"myfunction\", \"lisp\", \"trans\", \"listiteratorimpl\", \"selftest\", \"ntt\", \"asyncdownloadfile\", \"nicol\", \"travelguard\", \"mesz\", \"pyaudio\", \"eset\", \"bgcolor\", \"discount\", \"webroot\", \"shipping\", \"copyonwritearraylist\", \"jam\", \"tpm\", \"abstractbeanfactory\", \"containerbase\", \"addrreturn\", \"parentrunner\", \"handshaker\", \"actionpack\", \"uops\", \"sessionimpl\", \"libsass\", \"coyote\", \"theme\", \"fff\", \"getresponse\", \"connects\", \"revert\", \"begintransaction\", \"scheme\", \"configuring\", \"vim\", \"sequential\", \"quartz\", \"erb\", \"succeeded\", \"yml\", \"el\", \"inspector\", \"git\", \"mirror\", \"composite\", \"war\", \"game\", \"requestmethod\", \"ret\", \"rpc\", \"hyperlink\", \"fa\", \"datatable\", \"insecure\", \"treeview\", \"parentid\", \"tbl\", \"listiteratorimpl\", \"selftest\", \"ntt\", \"asyncdownloadfile\", \"nicol\", \"travelguard\", \"mesz\", \"pyaudio\", \"eset\", \"bgcolor\", \"discount\", \"webroot\", \"shipping\", \"copyonwritearraylist\", \"jam\", \"tpm\", \"abstractbeanfactory\", \"containerbase\", \"addrreturn\", \"parentrunner\", \"handshaker\", \"actionpack\", \"uops\", \"sessionimpl\", \"libsass\", \"filling\", \"orientation\", \"shut\", \"symfony\", \"caption\", \"transforms\", \"viewmodel\", \"uninstall\", \"snow\", \"worksheet\", \"permitted\", \"xsl\", \"indicates\", \"significantly\", \"depend\", \"firing\", \"populated\", \"uk\", \"backing\", \"scrolled\", \"gl\", \"populate\", \"programmatically\", \"ilist\", \"connectionstring\", \"rax\", \"mpi\", \"fixture\", \"rdx\", \"ymm\", \"rcx\", \"erb\", \"addrreturn\", \"listiteratorimpl\", \"selftest\", \"ntt\", \"asyncdownloadfile\", \"nicol\", \"travelguard\", \"mesz\", \"pyaudio\", \"eset\", \"bgcolor\", \"discount\", \"webroot\", \"shipping\", \"copyonwritearraylist\", \"jam\", \"tpm\", \"abstractbeanfactory\", \"containerbase\", \"parentrunner\", \"handshaker\", \"actionpack\", \"uops\", \"abi\", \"sb\", \"resized\", \"recv\", \"ch\", \"fff\", \"pickle\", \"cxx\", \"terminated\", \"os\", \"fp\", \"nt\", \"fixing\", \"clip\", \"karma\", \"xe\", \"xmm\", \"objc\", \"jsp\", \"chapter\", \"udp\", \"bbb\", \"tooltip\", \"ccc\", \"fff\", \"dcmtk\", \"cmakebinaries\", \"libcmt\", \"dcmpstat\", \"brand\", \"listiteratorimpl\", \"selftest\", \"ntt\", \"asyncdownloadfile\", \"nicol\", \"travelguard\", \"mesz\", \"pyaudio\", \"eset\", \"bgcolor\", \"discount\", \"webroot\", \"shipping\", \"copyonwritearraylist\", \"jam\", \"tpm\", \"abstractbeanfactory\", \"containerbase\", \"addrreturn\", \"parentrunner\", \"handshaker\", \"nsurlconnection\", \"rw\", \"rcx\", \"abi\", \"rdx\", \"declarative\", \"rax\", \"navbar\", \"artisan\", \"msvcr\", \"sized\", \"crashed\", \"ahead\", \"terminated\", \"uuid\", \"inspector\", \"available\", \"lnk\", \"crt\", \"msvcrt\", \"nav\"], \"Freq\": [866.0, 490.0, 469.0, 442.0, 412.0, 1051.0, 339.0, 386.0, 387.0, 255.0, 470.0, 264.0, 404.0, 329.0, 463.0, 233.0, 514.0, 406.0, 214.0, 218.0, 318.0, 197.0, 220.0, 322.0, 251.0, 538.0, 277.0, 203.0, 396.0, 264.0, 130.79660656674656, 199.6697057496837, 73.82063935518381, 60.7949721589537, 59.10816461552694, 96.02185010765817, 55.04678584696626, 54.039747465190096, 49.83799830752231, 49.84127923086549, 48.616065190406104, 46.4423954982589, 45.598303862175115, 135.84577374346847, 73.74071227037813, 40.96378074725282, 46.54491692275895, 132.00519605663644, 38.49949092351628, 38.459084871360986, 37.535738543936546, 35.202046550724646, 34.909729193460564, 57.85046419401327, 33.60466271345294, 33.07515871049469, 195.88839438978695, 31.997116305126255, 29.219740919998998, 29.18815500560299, 390.90307414172423, 236.83898364552024, 126.11327152176143, 102.30577248280504, 135.54871644086154, 95.05286628242975, 85.11124683536876, 77.81252083470862, 114.80473192947674, 377.69715725994485, 398.5266056934674, 103.65160302435596, 181.36983583646864, 245.94168744863225, 416.9411712476655, 323.3197651210086, 92.53891108685553, 81.61043655289775, 432.3416990030453, 403.54968253936676, 294.16935838404015, 326.2129938318283, 105.75279735327044, 207.53417959566153, 365.04219442318197, 295.4607452753141, 314.02602011159, 376.181299620647, 286.38396305631835, 392.0231202470393, 276.10805342267554, 227.7862170743126, 377.06451699118696, 349.6779199849692, 277.97639150252814, 243.95182852017376, 315.3732650893615, 363.0065941580319, 329.3224280627435, 289.1034677300911, 270.33051841613457, 260.073390299314, 255.60802309205994, 236.96961614683372, 242.3013720057219, 108.99704148944532, 103.62094904635305, 127.91597352449072, 58.88004940908331, 58.24327367823542, 58.19880676069811, 91.3361626422313, 51.44666925744084, 48.40178376994709, 47.439184246543064, 90.30866852062027, 119.12287587134769, 40.646853963645675, 38.60235251880702, 66.99017985727535, 37.95937577132144, 92.67525446063931, 37.3770928941666, 95.08312722696927, 80.41599368457562, 49.768532006278214, 35.587847748887526, 35.43257027253338, 54.379470255767636, 34.29164085724965, 33.34760123631135, 32.838006111273465, 37.15064258954983, 102.1137334909185, 37.312968873620946, 299.5499586471164, 265.3290632035388, 131.75929680800138, 124.01689564785475, 155.02192187872188, 134.56704283304921, 71.85877139467729, 127.20424966429114, 138.44795307214176, 354.1308262544727, 201.58189349762586, 157.12916108139393, 261.0757478063552, 269.72904899999156, 177.63294313996062, 207.17767081917395, 112.25454426393144, 368.2915657222028, 179.16592661318123, 224.01187045318773, 127.4398981205535, 180.4997733143429, 223.58508344851305, 286.3115320370568, 199.7635552965175, 159.91205296162946, 240.82698424544122, 184.50918787655618, 219.1303600245398, 160.1216501923048, 247.07889225630967, 267.22850460727625, 295.0738554219321, 245.71075399757578, 219.9021338243554, 176.88060119641437, 205.81241474567608, 209.0027338335745, 200.40341974903768, 199.12474159530342, 183.22670727560728, 178.02447187892224, 70.23128527098591, 66.82324949099414, 71.37116985387648, 96.92376484911392, 39.57746723446474, 98.9831433149858, 35.008134133560425, 39.75667177348282, 33.18767331327634, 91.06299917116137, 29.882672975479533, 28.256530578617983, 75.89528533517596, 44.413923097064625, 26.74993064707488, 27.74192763557814, 22.8154702183945, 173.64747565516205, 22.596422566408357, 23.35246734516586, 20.689593663730214, 73.39930516033111, 20.375536449482958, 20.117740575107412, 19.478283552698233, 18.29421300150509, 17.475217566120325, 17.125708715008074, 22.107251284228838, 104.7805639812164, 111.10024806018689, 78.57894470959634, 43.661403305364914, 60.49130981507595, 85.33513733765218, 158.49960382175266, 195.4011824111201, 109.7395444952213, 128.7284176264411, 60.75624497147008, 142.90275736739767, 81.12926531886562, 98.78586248880424, 213.45708026816803, 248.16485810976266, 81.59221812566061, 124.47676628468257, 132.74464005677902, 180.57004998431867, 116.56611938671763, 435.6232393048455, 188.4959400123224, 85.74203015253099, 184.7064822840401, 132.74877948478385, 150.5799721634081, 189.10820658845842, 136.3683494911016, 176.39618150034642, 103.66051527678692, 105.29388703511947, 150.22057448776283, 133.94863763046803, 126.1527023072579, 132.85108594074723, 130.2251148524933, 121.86450398435566, 122.8988820453833, 106.22590791242776, 105.73748581678745, 117.4185623477364, 59.69029092245446, 55.20078805961452, 54.099770079596965, 48.340401770081876, 57.64931487588906, 115.62812297082198, 95.29682858893551, 39.72903944725876, 38.44194836780556, 47.161898639608175, 35.032790449225786, 160.00196129362095, 33.99239067832655, 53.64108907106886, 33.22869777949725, 32.45448381492622, 67.06027931536033, 32.1220684759293, 86.85319938356162, 54.620171645486074, 31.44686324540785, 39.28640795402428, 30.65645076817026, 29.947363474921794, 202.896226358667, 166.91293173847427, 73.85980852527146, 27.199195070789674, 27.02925822554741, 50.701475829233175, 150.79140508439252, 95.01707733222757, 61.81534938071916, 348.84667147683325, 207.75919572605022, 63.385655204783795, 41.83619418299458, 59.16464101977593, 106.66112648190912, 111.29494931509012, 274.197904930841, 116.14347485025253, 205.20786478810936, 146.01534223243607, 96.55899104877845, 166.45488612458564, 110.01736224410361, 71.49492618838562, 84.32040867135112, 92.10720496999659, 60.64124208085212, 69.01314559035913, 85.05848515372499, 69.06575078781316, 66.56657675515997, 78.13787451272736, 74.50089148589116, 78.95518036581379, 72.218189484631, 75.0944437873961, 52.45122379059468, 29.284848924841285, 33.4726815213358, 74.4093527200733, 59.869948834095894, 25.309744422194736, 104.58609554892465, 39.11038847630034, 21.4189599667955, 20.39874218314979, 19.85013957496595, 67.97162215906248, 18.102523908431326, 19.54409321253788, 17.107604980758797, 24.129329133528866, 82.74398492634441, 14.767574661104476, 16.237916100481094, 14.60084914071012, 14.04841510074309, 16.37066099251024, 21.155402772684127, 12.812682551865619, 12.647030665555459, 12.542012851357088, 12.49743120068454, 33.487036364908676, 12.290565410578521, 14.37535601380869, 36.46777623186119, 27.460145019897766, 65.45379097433579, 17.205975644648277, 143.15241266327283, 30.6407304010775, 52.39533035061695, 214.27875927478544, 155.74966200511665, 47.72331975489073, 100.1143545985582, 43.377854777848555, 107.87842762206526, 84.56363549130396, 62.57726549087179, 55.51600985512658, 57.13248862162933, 41.709281816237805, 41.434061023646315, 38.99979792823927, 82.99433022628001, 126.33640302330674, 48.74174782590732, 72.24556854155098, 77.66504957952515, 63.29235114823538, 65.03930428346017, 53.84228980905478, 56.192941750084046, 50.61261405734395, 43.31783695941229, 32.6451249052123, 25.011373919262777, 24.11045729157872, 67.41752419835387, 35.04867904857301, 55.1989561595968, 18.098202695179072, 44.4956903639334, 21.09525382246632, 14.849667422011837, 12.32317532270172, 11.854481539482785, 14.964613609477583, 16.088875396932846, 11.32308984581711, 34.298305288321565, 192.25551433136513, 36.22324858424051, 10.09932888206704, 9.960294722259396, 9.657103280390693, 58.03040295313088, 20.2919383669409, 114.26014512784941, 8.218478408589199, 14.072972156266873, 15.857607795301169, 14.888015566905356, 89.90360163453963, 15.799372434911376, 26.465920817859505, 28.198257252576504, 38.799764808156766, 24.985287271444815, 27.843106565939767, 71.35146880762066, 37.18451528307425, 24.432754612943146, 138.48335453907464, 165.86686639923556, 26.213679218225387, 69.80990904322739, 317.3646076984815, 65.08817297012655, 82.55002594877493, 89.66364645452907, 41.074283699795586, 56.609930707655806, 50.18467040672144, 70.44342522601328, 65.4527548398599, 57.46378889705103, 40.35362226207642, 70.03231140743824, 43.120449768666454, 37.96157361112253, 36.01012907022693, 37.782411028235785, 36.11911790609421, 45.35652276988391, 125.53042779075983, 40.62938348082676, 51.50381337316022, 29.565961017697852, 29.123514530917326, 28.437881504664478, 45.732359914009606, 44.42850718025304, 27.286192895116, 26.65936024945957, 76.32239524084623, 25.262602849027257, 36.02158673155185, 40.94419502873534, 23.55038476322908, 23.243849765802537, 22.60768568689254, 22.23526733248676, 20.702733440210732, 19.535380675213336, 19.47256183642679, 19.349451658478483, 19.025532888237137, 18.96581122542078, 18.923734588575414, 17.08190014942956, 52.37491792550501, 16.923425042906263, 22.861111311191095, 108.78570804339483, 153.2102843764222, 39.808729745115166, 68.27935085775403, 72.80808575126643, 35.830977647132364, 228.26151056077856, 44.68335902935142, 45.052817785527715, 25.033707214396145, 39.09616883214142, 41.950489368127194, 61.18301283639719, 80.59554418837153, 51.72262325633534, 85.53892606406441, 37.51689713997926, 39.67298705176422, 33.723319088179515, 42.922967993858855, 36.044383044769965, 418.3120966961354, 54.49159859854428, 178.3383374384199, 43.07033305883387, 41.64435248841916, 40.5607897574205, 37.533922377888906, 44.2313933770878, 28.708542159858876, 28.245418289154944, 25.242723410836845, 24.892854851406312, 24.407256964269287, 22.88043646684654, 21.73484798627233, 21.627196844844985, 28.386258040799355, 113.93428883004576, 18.920016761081627, 66.22823121800997, 18.294981232814337, 17.717972853571084, 16.136550789947588, 16.091100457571393, 57.02923160834822, 14.470899539352041, 12.956488177552071, 28.748464115520115, 19.01529649973537, 11.466089611439257, 63.318698044516616, 47.15608698949082, 79.78902210318832, 40.06575659332989, 63.81180924651702, 109.60447500828883, 39.02178996790772, 89.3706158212023, 52.92273546168396, 70.73372680317834, 51.88282753531653, 56.08260548180549, 38.61359292305212, 43.28498106038915, 28.820656095546518, 213.17028406694513, 198.72445522700917, 110.95060661003568, 103.05725026499788, 102.73391474057718, 88.08595924901256, 211.91630892960433, 253.82047776992866, 73.35971212913275, 72.9959695430541, 154.52272773994173, 37.08289590241431, 34.7430103270753, 68.48635674237958, 31.527485447483667, 47.88342909562116, 29.74343312734774, 29.657162599317523, 26.361077209761543, 25.23855001633642, 22.21147235792526, 21.959685311660717, 18.819476942729846, 18.192408477766683, 18.0639577786961, 14.640955588430392, 13.453791682867534, 13.402448782912174, 17.46621691379879, 53.161748024462995, 39.93813589049561, 151.54444441039425, 78.69130776564984, 45.75528497428913, 43.73457364451485, 128.4466438542553, 75.50126972525482, 39.62079887306306, 37.111050793543626, 36.700582369462204, 34.857584087334665, 34.22513223141435, 32.15263009912322, 29.624124839017433, 78.21124598025345, 21.55250950576785, 36.68901467201091, 98.74965458636915, 20.628684861010772, 73.90195456782827, 20.28857766480444, 19.76530911998109, 147.99928348786062, 19.031363568358852, 17.524889613109387, 25.634249619666136, 32.06500864481832, 27.141095187696685, 21.287372826079455, 26.615840279806886, 11.225058972622756, 88.55869055458875, 23.847010679510174, 40.08160035661589, 35.950599565279376, 59.25740176174984, 61.896762693763925, 41.1128450906629, 50.40539041137342, 44.56830952367255, 37.595565326036635, 50.80734402403559, 33.35936939536913, 40.23430079543351, 28.091506824361023, 223.61595562212764, 52.28373227967708, 42.71130060838674, 36.975630405284655, 34.484431854256506, 32.2956906067565, 61.35591618567856, 30.540650877995336, 65.61525467201491, 70.93064302470833, 29.14777487336795, 25.196271963549087, 24.679241775944654, 24.398486834253365, 14.86424313576424, 28.690043433153612, 35.37268006682007, 48.565567182708875, 350.71765612965424, 9.466496075796195, 58.55028715749198, 39.77013577835082, 17.41434564874944, 21.389293040048745, 63.903212010240175, 156.59637154680613, 2.4598094145068523, 5.5796049121385565, 51.42263305596367, 35.5818093309743, 8.296906336463808, 114.99748487264557, 114.04095602189287, 94.98701894221749, 69.53982260161303, 37.3939375646709, 31.58033610779399, 30.482305627717615, 27.574564243285273, 25.076525480152032, 24.95868616802157, 51.30080895638388, 24.002782960493377, 23.6586575811808, 32.4520367186593, 22.438278502546172, 25.279306889648648, 79.07994197649607, 99.47763173782738, 76.41572575830817, 25.910187498506364, 16.3651847352881, 356.91833099391096, 74.63511278010589, 46.87866650363454, 28.89893517032199, 31.36530681447679, 7.2613946943655545, 8.43485910662551, 8.32399756311196, 9.595651350033714, 17.343281265921032, 35.872156946763866, 135.31731548690865, 112.59445341394346, 121.13027346071097, 54.30401833605184, 45.824883894438706, 44.70878511485477, 64.72912978622553, 75.76248655985378, 78.31538543844852, 28.086392171399467, 27.40732720021745, 62.07503835564638, 23.63229001649357, 22.156704977270252, 48.65770831641256, 60.19316638690652, 37.218362026980806, 27.213067343256444, 13.188481477415312, 24.033518846925087, 10.976156845373351, 8.730456721015214, 7.1451508269322845, 78.65494138100183, 3.363163089170416, 83.61882977305635, 8.409686679513356, 0.19899081609127753, 0.19899081611728034, 0.19899081594360965, 5.484945356177771, 0.2051913841804196, 0.2037088077365231, 144.8760136647781, 128.98945045123304, 128.07028285899935, 95.08040304675329, 62.40859805020566, 58.459675110252455, 143.38534440402526, 53.908718005016524, 40.103734134304396, 38.41654259798718, 38.28361468030814, 34.17326469834173, 77.01157055290089, 34.34569579582968, 16.742131662050692, 4.260256320280198, 2.7213363961841472, 13.08747063919293, 16.210340614474084, 0.22503094372251906, 0.22503094369253607, 0.2250309436395005, 0.22503094362580717, 0.2250309435022216, 0.22503094353476702, 0.22503094388232447, 0.2250309439811769, 0.2250309437705362, 0.22503094395548726, 0.2250309617876605, 0.23329733438466752, 0.23152539136924308, 0.22605749444483464, 0.22572582249085563, 0.22547087039056865, 0.22513263701457445, 0.22509176078031506, 0.22508079227862343, 0.22507029263099293, 0.22507026923041387, 0.2250689916232877, 173.52767746896487, 65.16867759334599, 58.866767396824535, 56.386973409532544, 55.83750808545603, 72.72084633137666, 32.258226139191926, 97.00585718744537, 70.75967144036363, 19.310983661084023, 32.78412707897331, 13.794666213399456, 23.848630783987492, 42.99219870342236, 0.2700355792512811, 0.270035578773042, 0.2700355792045447, 0.2700355789398417, 0.27003557915715554, 0.2700355789555807, 0.27003557895891356, 0.2700355788156458, 0.2700355789911635, 0.2700355786470085, 0.27003557911997306, 0.27003557898335834, 0.2700355789566542, 0.27003557890675806, 0.27003557935721734, 0.27003557906334236, 0.27060166342938935, 0.2704224375735265, 0.2702673940550825, 0.2702409986449603, 0.27020603205820737, 0.27015501117841667, 0.27015383747427013, 0.27009349143059297, 0.2700709324539801, 0.2700629669966094, 0.2700515331678792, 0.2700508851862963, 0.2700508667518322, 0.27004598701131965, 0.2700458058348345, 0.27004485501015396, 75.67383476105921, 63.302948411059795, 51.88228844290502, 48.5771200549199, 237.11614892393294, 36.75807922979252, 33.75124992953402, 88.07445734312229, 62.43771859073555, 0.28815317460094036, 0.28815317433245624, 0.2881531746614464, 0.2881531746084553, 0.288153174851979, 0.28815317436409016, 0.2881535608544946, 0.28815317460313083, 0.2881531746918509, 0.28815317451598205, 0.2881531747661322, 0.2881531744535679, 0.2881531744035081, 0.28815317433822113, 0.2881531744712347, 0.2881531743209678, 0.288153174494746, 0.28815318400766005, 0.28815317425601034, 0.2881531744057792, 0.28815317468246227, 0.3086322430633825, 0.29021918335054053, 0.29148083921483653, 0.28916951731755447, 0.2887997696880804, 0.28872219575287134, 0.28870042925689726, 0.2884444683901056, 0.2883459180037151, 0.28829079396900903, 0.28827925557869477, 0.2882603256016744, 0.2882311583387047, 0.2882293502477399, 0.2882225981645029, 0.28822128211549686, 0.2881956610358281, 0.288194017789421, 0.28819364942831927, 0.28818671362609805, 0.28818119361947575, 194.44477188541543, 71.91602340941377, 114.20413095208625, 28.46361386901966, 0.3386274472476124, 0.33862744745181456, 0.33862744733445105, 0.3386274474405061, 0.3386274473397155, 0.3386274473496327, 0.33862744764924574, 0.33862744772781717, 0.3386274474099619, 0.33862744744893486, 0.33862744734818295, 0.33862744737692146, 0.33862744723636395, 0.33862744730204336, 0.3386274478356233, 0.33862744731598166, 0.3386274475344369, 0.3386274474169476, 0.33862744719098553, 0.33862744713316645, 0.3386274474322285, 0.3386274474932515, 0.3386274474090319, 0.33862744725871535, 0.3386274471286415, 0.3386274476787117, 0.33875006267155044, 0.33870151185279707, 0.33864381764759605, 0.3386395343363543, 0.33863426552632764, 0.3386337626091436, 0.33863268664539065, 0.33863246565152, 0.33862990796789794, 0.3386298554924207, 0.3386295418984114, 0.33862919907923067, 0.3386287534617218, 0.33862871227947383, 0.3386284764218169, 0.33862844492442784, 0.3386281791651241, 0.33862803874998276, 0.3386280201003961, 0.33862797021355856, 0.3386279397725785, 0.33862792875397413, 0.33862790359381234, 0.3386278363555837, 0.3386278316462553, 0.3386278150367243, 208.74464821767324, 60.91496560433839, 59.24176501987631, 35.25637720493265, 44.37875118245302, 0.33749610537783475, 0.33749610532935204, 0.33749610516389345, 0.33749610545993164, 0.3374961053863165, 0.337496105709067, 0.3374961051026477, 0.33749610563639415, 0.33749610521379503, 0.33749610533748164, 0.33749610532955093, 0.3374961055015667, 0.3374961052667834, 0.33749610525055507, 0.33749610562821325, 0.33749610533072355, 0.3374961054557577, 0.3374961058138518, 0.33749610544839814, 0.33749610543973413, 0.33749610542282943, 0.33749610516230005, 0.3374961053569712, 0.3374961053153997, 0.3374961052913128, 0.33752138767280715, 0.33751552775757565, 0.3375052845248196, 0.3374998034287321, 0.33749915058592656, 0.337499061469493, 0.3374982864651642, 0.3374976213331419, 0.33749742984931197, 0.33749742284685325, 0.337497087884363, 0.3374968152615609, 0.33749673562123955, 0.33749673435059857, 0.3374966900353073, 0.3374966058046832, 0.33749654375502813, 0.3374965354346967, 0.33749645160981423, 0.3374964197580978, 0.33749639263944803, 0.3374963896365504, 0.33749637059617615, 0.337496334306894, 0.33749633071395446, 61.61787648012871, 61.12930667048099, 71.25487588447287, 31.631715840340757, 22.582768585582293, 22.36351129842873, 33.232147435083036, 2.3835823431433916, 0.35496756637876503, 0.3549675659827297, 0.3549675662913908, 0.3549675660865899, 0.35496756590128525, 0.35496756596110446, 0.3549675665122912, 0.35496756612196095, 0.3549675660748492, 0.35496756581456956, 0.35496756611768754, 0.3549675662337407, 0.35496756600825674, 0.35496756591188144, 0.35496756608215174, 0.35496756624954134, 0.3549675658102426, 0.3549675663139948, 0.3549675662481889, 0.35496756598155815, 0.3549675658675778, 0.35496788444604815, 0.37855268883203025, 0.361003402266909, 0.35551688518691166, 0.35517874094131036, 0.3551749071174736, 0.355111735719674, 0.35502829619718534, 0.3550267483456142, 0.3550242504718824, 0.35497309418945927, 0.35496892686334836, 0.3549688242670519, 0.35496859819029747, 0.3549685409222621, 0.3549684444096309, 0.35496840458923395, 0.35496825921428826, 0.35496813772774816, 0.3549679498316116, 0.35496793454791764, 0.3549678606398171, 56.44797664227106, 116.30904608133268, 35.35760232161007, 26.46411626171515, 4.582337739658402, 4.484175027556698, 4.43509366772851, 3.9933614866470175, 15.598512927621485, 0.3613430092392551, 0.3613430093706349, 0.3613430094883988, 0.36134300915841067, 0.3613430100907926, 0.361343009405443, 0.3613430091889229, 0.36134300923311125, 0.36134300931866814, 0.36134300931633795, 0.3613430094966074, 0.3613430091348114, 0.36134300916007306, 0.36134300944266673, 0.3613430093472834, 0.3613430091069298, 0.36134300920536494, 0.3613430094887972, 0.3613430093758113, 0.3613430096553413, 0.36134300946948683, 0.38091875663412816, 0.361853609187083, 0.3614194322253013, 0.36139788111739557, 0.3613935905341963, 0.36136941917082394, 0.3613662656299181, 0.361357161318644, 0.36134686950935174, 0.36134563063758, 0.3613445479758823, 0.36134433741811556, 0.36134427673809266, 0.3613438812744774, 0.36134371565856765, 0.361343538883492, 0.3613434874380149, 0.3613434568779855, 0.36134343765205096, 0.3613434111810756, 0.3613433789239604], \"Total\": [866.0, 490.0, 469.0, 442.0, 412.0, 1051.0, 339.0, 386.0, 387.0, 255.0, 470.0, 264.0, 404.0, 329.0, 463.0, 233.0, 514.0, 406.0, 214.0, 218.0, 318.0, 197.0, 220.0, 322.0, 251.0, 538.0, 277.0, 203.0, 396.0, 264.0, 134.61478726159422, 207.55025299323415, 77.15284413661597, 64.1271779740433, 62.44036753569767, 101.61514085213452, 58.379039224796905, 57.37195091198645, 53.170203031481755, 53.17387322768906, 51.94826869073796, 49.77459824831133, 48.93051141138493, 145.78796025606346, 79.5059962228155, 44.295983168017194, 50.465853398887624, 143.32471838082571, 41.831713014312044, 41.79144785639287, 40.868017073673414, 38.5342560961501, 38.241932323606704, 63.385149538403056, 36.93689104394494, 36.40738234808413, 216.0105838092785, 35.32931882692641, 32.551943575441726, 32.52035800529633, 437.87858515881345, 267.0769638723987, 142.87401726695128, 115.53419615857885, 155.35894800932525, 107.9332045657894, 96.29540819678529, 87.9859639214568, 133.39190999013533, 487.65662917124166, 529.3603403964026, 121.5138565641402, 229.80926452704952, 325.6062980212264, 622.0707945958259, 470.8687068682721, 109.5383753079768, 94.67938807460676, 700.8077610320664, 649.3151932281725, 445.15348466456874, 512.7271831568288, 129.0698086147242, 300.74088708580445, 628.4426862838587, 486.7568289795685, 535.8463568028658, 689.1889482918233, 485.142227843125, 764.0762387898759, 470.1270886917332, 361.10481164571866, 753.0653079838198, 674.9804248898374, 482.48567646558365, 404.1438414719582, 643.7361309287362, 866.4402053362548, 831.2080151187937, 711.8908736549395, 616.6500687201718, 569.7598629124551, 629.8189542674713, 467.1237325156796, 584.0072156506577, 112.32978045421844, 108.52007453559695, 134.27685028951288, 62.212784408010464, 61.576009241850976, 61.53154194548435, 96.83539054996493, 54.77940534537082, 51.734518796842394, 50.771936508213905, 97.34143668041854, 128.52866578880716, 43.979591115262835, 41.935087806849666, 72.83524202603832, 41.29211091509835, 100.89813264086256, 40.71007795807423, 103.65164565943961, 87.73196449943353, 54.36652077403152, 38.9205900209321, 38.7653053449825, 59.60274647334836, 37.62437577344242, 36.680336090856635, 36.170741665036346, 41.024767181425624, 112.79287459466985, 41.296156075329094, 336.3684317055245, 301.3689470423188, 147.66624565549213, 142.5277272345188, 179.9747294663349, 159.30159039934134, 81.7487388090942, 151.34962660086694, 168.88469676228533, 483.1644345726254, 269.372371101288, 204.06327859047633, 371.46990975396153, 386.1395673718856, 238.27122129535906, 285.6528061100103, 139.23316833365723, 619.4898180418822, 250.92046942741595, 335.0682958766915, 168.11845298527297, 270.5593831800252, 368.85090676210484, 534.3074931299006, 322.49954063112557, 238.73388609180884, 470.02691004267206, 317.81384687519306, 496.9114106714756, 268.5297296053974, 689.1889482918233, 831.2080151187937, 1051.1369571632893, 711.8908736549395, 616.6500687201718, 357.17389772079946, 573.114766675438, 649.3151932281725, 753.0653079838198, 764.0762387898759, 674.9804248898374, 569.7598629124551, 73.56746103407659, 70.15458425587951, 75.26814463762796, 102.3515973115517, 42.90875803139853, 108.1387250647924, 38.33941800192186, 43.711141561456806, 36.51896571191904, 100.87296119215057, 33.21395727733816, 31.587813849781096, 84.99881043052335, 49.81289372141441, 30.08121390348959, 31.507724479608832, 26.146753890403776, 199.08509295109445, 25.927706346897654, 27.01415705593248, 24.02093218350666, 85.22211030901923, 23.70693292280306, 23.449031277406792, 22.809570595153872, 21.625541686309056, 20.808914866952126, 20.456991969151268, 26.412457964314708, 125.94033549902949, 136.19689631810624, 95.73039895859814, 52.80980850216193, 74.09047419064446, 105.83319651951761, 204.45728897141603, 266.05863271382225, 143.51118974572464, 170.7580250585343, 76.66670816024232, 199.74033799743708, 107.03805773164747, 135.4864524379607, 337.73692170019257, 418.0382414185038, 112.46164820349672, 188.3750813019987, 210.18187894872966, 316.09256562807866, 180.34798120026468, 1051.1369571632893, 371.73261135472745, 124.1166768193068, 413.4504669357649, 266.72948918527703, 336.3412414238754, 514.3716404663527, 317.84824630239325, 573.114766675438, 185.63987181559943, 216.4114578908982, 618.7529192222448, 496.9114106714756, 433.5994492751405, 584.0072156506577, 831.2080151187937, 534.3074931299006, 753.0653079838198, 410.0823860170235, 711.8908736549395, 123.36176157319623, 63.02155320572082, 58.5320518495811, 57.43103295859691, 51.67172630492002, 61.884400790756985, 124.38413833986903, 102.91270883391594, 43.06032249286511, 41.77321126082003, 51.57711897970463, 38.36412585685953, 175.46123538263595, 37.32405270073044, 58.94494720132191, 36.55996476701886, 35.78574608854663, 73.9722688370278, 35.45333164329194, 95.9484367979871, 60.35151740174216, 34.77812640134473, 43.47622945720029, 33.98811332338836, 33.27862584090802, 225.5609707819695, 186.4812722808273, 82.75672907536772, 30.530459001738215, 30.36054096423818, 58.433319889648146, 183.5463027839516, 120.17970839536811, 75.29495093372304, 538.4096805175735, 299.4204131999873, 77.7448690509421, 48.4560097584418, 74.64686237108043, 161.7512365116918, 175.4159532009627, 618.7529192222448, 198.98485630468716, 463.16295953371815, 311.9969503083834, 167.7105122208233, 475.0101383290129, 273.975345137607, 125.92914486603141, 203.25545217522426, 272.18308623996273, 81.38833935212116, 133.47989886644854, 351.08581732933845, 138.34354490818325, 117.16482573610548, 341.2857081234681, 272.87641799166244, 501.8756377660197, 269.503097177643, 629.8189542674713, 57.859486746916204, 32.59993787369967, 37.38250899199143, 83.46029714515036, 67.15422830392743, 28.624833128887367, 119.07796651725307, 44.98278410489259, 24.734048557155635, 23.714130423622105, 23.165228152146536, 79.46372210895309, 21.417612440704538, 23.147936341344668, 20.422694152133904, 29.09714196501827, 100.89707447591792, 18.082663339210615, 19.899920854039685, 17.915937624342924, 17.36365464569846, 20.43819873281725, 26.419884765095727, 16.127771341170256, 15.962119249205362, 15.857101767039252, 15.812520367181357, 42.41360276792345, 15.605653961559181, 18.300657841095433, 46.76247751764092, 35.14739537710985, 85.25173749620127, 22.001663697797063, 217.85614962218693, 41.71636105726239, 77.71678958393701, 387.01912428607176, 277.1728598847839, 70.58178554870592, 188.53916915478064, 68.9527648109908, 219.86451876367008, 163.34693628199696, 111.45191009042327, 95.66707409439401, 99.7378034368741, 65.67387529622057, 66.39932700446728, 60.69974069875071, 194.28711033231883, 406.5021988116095, 94.90772830942161, 206.12046556108209, 470.02691004267206, 271.63853080942624, 386.88380494284127, 251.32661356682524, 584.0072156506577, 569.7598629124551, 129.59748325733054, 36.76805577135994, 28.320404709658153, 27.419472228407344, 77.1174036663513, 40.56643625444772, 64.82687684943994, 21.413339453492057, 52.95382825880397, 25.226633624774962, 18.158682799459587, 15.632208098567926, 15.163505255432025, 19.170176705459543, 20.77609697079992, 14.632175178589332, 44.412193580916146, 251.9738465478698, 47.53895037450533, 13.408479537642947, 13.26932311202839, 12.966222327801882, 78.15828301297061, 27.3334138468314, 154.8524623105076, 11.527492864007376, 19.807404513471337, 22.335973146307293, 21.058319509868213, 127.37804034503257, 22.42750199324415, 37.59686363926471, 40.26651883955098, 55.98555942709088, 35.98003351209276, 40.49518306704634, 112.28584547898333, 56.079512470438566, 36.075938807420435, 264.25771923137484, 329.5534559580693, 39.11551527992493, 129.9139107001217, 866.4402053362548, 125.5551976287973, 185.25303459424907, 219.62919049100782, 85.86353764486586, 170.60046669495716, 148.45857139110714, 410.0823860170235, 475.0101383290129, 470.8687068682721, 146.68312075791846, 1051.1369571632893, 224.50741719748163, 249.1413484417668, 128.535148659373, 584.0072156506577, 514.3716404663527, 48.652669303723755, 135.70633207965878, 43.92552990211409, 56.04310511353646, 32.86211175093734, 32.41966105057072, 31.73402943956387, 51.0366004144335, 49.77775879217253, 30.582339339643067, 29.955884881409922, 86.04233705104096, 28.558749350350055, 40.81975237704542, 46.55483352419056, 26.84653849813704, 26.540002788898214, 25.903832097500676, 25.53146023893623, 23.99888127246327, 22.83152828241612, 22.768708440738955, 22.64559807011572, 22.321699308651187, 22.261958129801812, 22.21988105875183, 20.37804672498827, 62.575245070906945, 20.23762234328948, 27.382210229449758, 137.78332646752315, 198.28230715704802, 48.917532527990204, 88.27252154669667, 102.72095360894392, 46.19809885838123, 412.3045322435889, 62.02917435282263, 63.63582292065359, 30.88439888338705, 57.72346232886357, 63.86919384269799, 133.45969314845547, 240.40837217521386, 112.49639780074455, 463.16295953371815, 71.0956227540124, 117.58520611368726, 75.625975406708, 341.2857081234681, 131.97408406778177, 442.7797329969492, 57.77807771362561, 189.5899635559714, 46.3568122373117, 44.930831528315046, 43.84726877131713, 40.82040434001767, 48.45371342882937, 31.995323724769538, 31.531897628247407, 28.529202416937036, 28.179359766111165, 27.693737195218098, 26.16691621551287, 25.02132701121445, 24.913675863686013, 32.87566659172847, 133.70291110377784, 22.206495865579946, 78.09334186247015, 21.581461863865012, 21.004452901849383, 19.423029840643967, 19.377579648147908, 69.9325802647178, 17.757392922389926, 16.24296842013364, 36.379294182702914, 24.245048361998812, 14.752571864021002, 82.18231738158373, 61.48577347526471, 108.39486080181142, 53.75128268204906, 94.14251738648852, 188.75787156348684, 55.549455353376885, 161.30717428873697, 84.34317789728944, 142.90734648412214, 93.86783972050615, 118.93580462388655, 63.6243612719373, 351.08581732933845, 1051.1369571632893, 218.22260756123993, 203.44035769889493, 114.228349315014, 106.33498294499805, 106.01166391803463, 91.36369255424512, 220.9141459869845, 264.659519500574, 76.63744627390084, 76.27370614540887, 163.45237190266786, 40.36062981755955, 38.020754038781966, 75.37297757460462, 34.805483513904804, 53.14531627098697, 33.02116565507065, 32.934896686417005, 29.638811624320024, 28.516282568439017, 25.489204950854802, 25.237417881545607, 22.097213932928554, 21.47039226528937, 21.502646327251046, 17.918688098711282, 16.731538934047638, 16.680181316382445, 21.913461152540123, 69.25403377386121, 65.76196330430368, 386.88380494284127, 318.33119516596065, 470.8687068682721, 514.3716404663527, 131.69739439456882, 78.75201776557773, 42.87154694382504, 40.36179896172565, 39.95133082725761, 38.108332116505565, 37.47648113107641, 35.40338668310839, 32.87487278544469, 88.52277866507072, 24.80350146846586, 42.41352065805759, 114.2920111715275, 23.879440723481075, 85.6914748758044, 23.5393258170228, 23.016073767516165, 172.78505327736258, 22.282113344610927, 20.775641223735892, 30.502421076044474, 38.306935398438284, 32.52818199038475, 26.513480021344858, 34.256934782745184, 14.475806947494764, 115.65384594758326, 32.456710430610364, 54.965382591124744, 52.49723658896685, 101.4050349162062, 118.2441736878834, 70.99306893466554, 185.63987181559943, 143.50213391468307, 97.44985818133094, 210.18187894872966, 81.44806099540097, 311.9969503083834, 396.38894446681974, 233.28765878775613, 55.505175288140215, 45.932741839675046, 40.197072289454745, 37.70587330572274, 35.51713291330476, 67.506564607354, 33.76209213695474, 72.64027542284909, 78.56486663120894, 32.36921664308808, 28.417833402526362, 27.9006829993328, 27.619943469290334, 18.085684352717024, 35.709032156369005, 45.665920806858644, 63.81383587627356, 469.00536175018516, 12.687937732326366, 79.61918567384224, 58.10200105719764, 25.599328189443995, 35.50845974989465, 113.03033191152174, 339.31577282349326, 5.681250651366476, 17.21531119621242, 404.1438414719582, 322.49954063112557, 199.08509295109445, 118.2159673852305, 117.25943847852305, 98.20550784233566, 72.75833248984272, 40.61242000519786, 34.798818498195445, 33.70078802714829, 30.793719899803104, 28.295007865289175, 28.177175910549238, 58.01773232788449, 27.221267239863764, 26.877202346535366, 37.001984386655465, 25.65676199081415, 28.913241993301465, 91.12207222091537, 127.68423465264505, 98.09619321016089, 33.79530872358817, 22.43344802707842, 490.0699892310323, 102.94799058874582, 68.05249634386624, 42.0583880431015, 50.26219235801391, 14.30108131081831, 17.2704095639836, 17.27068338850718, 29.4468363227909, 72.8616719861116, 266.5741236647273, 138.49359480385817, 115.77073274397264, 125.84912106399874, 57.480297555398415, 49.00116372626554, 47.88511235379826, 69.70229782344055, 82.27004968853271, 86.82605753100488, 31.262671397616028, 30.583661552745173, 69.79781651093563, 26.80857013054255, 25.33298420666238, 56.25210819709878, 71.5378560627047, 44.45220804149461, 33.34377747069683, 16.3647612034988, 30.046863117951453, 14.15243836217752, 11.906736163034928, 10.321430439968005, 114.18885308332922, 6.539442540895871, 168.46797901283315, 17.509324745497658, 3.7471329218760943, 3.799208639920752, 3.8116439468989443, 220.9141459869845, 11.83783852860629, 10.350144138054915, 148.02625323018418, 132.139689673829, 131.22052207687506, 98.23064326962029, 65.55884046371281, 61.60991504693914, 153.47982270299943, 57.92469693270435, 43.25397327470747, 41.56678192438165, 41.433854992591186, 38.05507203041462, 87.70095039288661, 46.5028845272394, 24.597009864285894, 7.4104956128337784, 5.871597773813111, 38.340289783088664, 109.81893199906538, 3.7471329218760943, 3.799208639920752, 3.8116439468989443, 3.8164422325443987, 4.174943416942771, 4.197896392629112, 4.252598072605101, 4.486801391121587, 4.625475396772716, 4.962633122423717, 5.014159936655099, 8.012220804263245, 10.977066408916375, 29.43013130976669, 13.867720461183703, 19.62138598177786, 53.17387322768906, 34.37953040181195, 18.015079120619852, 131.97408406778177, 33.50384301782784, 11.503919827174721, 176.63291236845043, 68.27391209901961, 61.97200186577428, 59.49223182793329, 58.942742594099656, 77.5333608184338, 35.36348682024295, 106.91788599140233, 78.8717762697531, 22.416218120699266, 40.19651385612697, 20.548358861494197, 37.75161947893651, 83.14781619779802, 3.7471329218760943, 3.799208639920752, 3.8116439468989443, 3.8164422325443987, 4.174943416942771, 4.197896392629112, 4.252598072605101, 4.486801391121587, 4.625475396772716, 4.962633122423717, 5.014159936655099, 5.064233108877972, 5.09553964819427, 5.104707132613752, 5.224568214482026, 5.268669681966214, 8.773627715883967, 34.37953040181195, 9.296713057179984, 18.59871905087366, 12.13199889401379, 28.417833402526362, 34.805483513904804, 10.749779038767704, 16.229179999266975, 11.523641273462772, 79.5059962228155, 19.414686753943688, 11.412538324660103, 9.61450527479874, 9.549431021632676, 17.873181010729066, 78.76095163915603, 66.39006529047028, 54.969405299635675, 51.664236914649514, 255.80577612964453, 39.8451961020639, 36.83836683887629, 96.61547115553985, 71.23142180283303, 3.7471329218760943, 3.799208639920752, 3.8116439468989443, 3.8164422325443987, 4.174943416942771, 4.197896392629112, 4.252598072605101, 4.486801391121587, 4.625475396772716, 4.962633122423717, 5.014159936655099, 5.064233108877972, 5.09553964819427, 5.104707132613752, 5.224568214482026, 5.268669681966214, 5.345556398890553, 5.367036876536168, 5.403885001410765, 5.42510682992566, 5.461837365841208, 15.984346268941552, 8.001262738268194, 17.92459302402968, 38.05507203041462, 8.451990662869209, 9.129703024083195, 15.890351189598473, 11.035154743976824, 18.53679506458703, 13.808262257542088, 102.94799058874582, 17.3180951938592, 8.178516172271605, 9.030097232442069, 36.02796374639047, 10.482003741468583, 34.37953040181195, 11.160058437878675, 9.646404999230327, 10.73504132790551, 11.679610111069445, 197.48141471812184, 74.95454127219172, 119.46777713512991, 32.79513036402733, 3.7471329218760943, 3.799208639920752, 3.8116439468989443, 3.8164422325443987, 4.174943416942771, 4.197896392629112, 4.252598072605101, 4.486801391121587, 4.625475396772716, 4.962633122423717, 5.014159936655099, 5.064233108877972, 5.09553964819427, 5.104707132613752, 5.224568214482026, 5.268669681966214, 5.345556398890553, 5.367036876536168, 5.403885001410765, 5.42510682992566, 5.461837365841208, 5.586767078051217, 5.606308593582559, 5.667732026813773, 5.681250651366476, 5.78067737246267, 57.277252034113296, 34.37953040181195, 11.619986166233334, 14.533313333141633, 16.705639295936177, 8.773627715883967, 37.54423201563946, 15.134712752784042, 131.69739439456882, 13.973128118598622, 12.152926469492876, 39.600370494378616, 9.860352859253284, 20.037800703442226, 27.404155756846084, 14.293684800348359, 442.7797329969492, 10.007960205769647, 16.84857389664313, 24.801768205732333, 61.787095011326734, 11.488054061557003, 18.53679506458703, 11.412538324660103, 11.186893021269428, 15.890351189598473, 214.34141396986536, 63.95274349253823, 62.27954403714538, 39.23017918730126, 49.78085411638456, 3.7471329218760943, 3.799208639920752, 3.8116439468989443, 3.8164422325443987, 4.174943416942771, 4.197896392629112, 4.252598072605101, 4.486801391121587, 4.625475396772716, 4.962633122423717, 5.014159936655099, 5.064233108877972, 5.09553964819427, 5.104707132613752, 5.224568214482026, 5.268669681966214, 5.345556398890553, 5.367036876536168, 5.403885001410765, 5.42510682992566, 5.461837365841208, 5.586767078051217, 5.606308593582559, 5.667732026813773, 5.681250651366476, 11.035154743976824, 43.47622945720029, 9.839999208710013, 15.94742967005149, 11.679610111069445, 11.230121449792113, 46.76247751764092, 21.625541686309056, 11.014362127282418, 9.192734713067175, 9.887601638910748, 13.800796559533469, 16.257773987485084, 12.753385788027403, 17.912984350683207, 12.463700769537411, 16.417975600086482, 15.44630689119006, 10.329088278730692, 14.408752359545451, 18.230655162048315, 24.444012059838695, 88.48703362651696, 16.892191384082704, 37.75161947893651, 64.63821115088928, 64.14962135401156, 75.72067393871117, 34.65208759783541, 25.603071067365878, 25.383918697976053, 39.600370494378616, 5.403885001410765, 3.7471329218760943, 3.799208639920752, 3.8116439468989443, 3.8164422325443987, 4.174943416942771, 4.197896392629112, 4.252598072605101, 4.486801391121587, 4.625475396772716, 4.962633122423717, 5.014159936655099, 5.064233108877972, 5.09553964819427, 5.104707132613752, 5.224568214482026, 5.268669681966214, 5.345556398890553, 5.367036876536168, 5.42510682992566, 5.461837365841208, 5.586767078051217, 5.606308593582559, 9.782111106809086, 21.413339453492057, 14.34648957681073, 12.13199889401379, 96.61547115553985, 34.37953040181195, 44.45220804149461, 11.676974643689695, 13.364346025852695, 12.159343443533981, 77.5333608184338, 9.963181558989488, 11.909758798320624, 13.593804083740066, 27.619943469290334, 13.408479537642947, 14.361058109409061, 17.28128679392145, 36.170741665036346, 12.952181044764648, 22.603396059103506, 59.461903683794034, 122.99468361813173, 39.857114007554145, 34.37953040181195, 7.596265043538409, 7.498102333613191, 7.44902097600453, 7.007288796435951, 28.53296111866671, 3.7471329218760943, 3.799208639920752, 3.8116439468989443, 3.8164422325443987, 4.174943416942771, 4.197896392629112, 4.252598072605101, 4.486801391121587, 4.625475396772716, 4.962633122423717, 5.014159936655099, 5.064233108877972, 5.09553964819427, 5.104707132613752, 5.224568214482026, 5.268669681966214, 5.345556398890553, 5.367036876536168, 5.403885001410765, 5.42510682992566, 5.461837365841208, 12.426300828204575, 30.793719899803104, 25.383918697976053, 9.782111106809086, 34.65208759783541, 9.084068341540886, 64.63821115088928, 22.515971357891143, 11.138508023277463, 5.929938846704524, 13.530071294872874, 9.610131880456802, 11.9217183460401, 13.364346025852695, 86.82605753100488, 14.293684800348359, 131.43000693185846, 9.260960846981074, 14.002478286521274, 6.618135886298778, 30.374325931541343], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic11\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic12\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic13\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic14\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic15\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic16\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic17\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic18\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic19\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\", \"Topic20\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -6.5293, -6.1063, -7.1013, -7.2954, -7.3236, -6.8384, -7.3947, -7.4132, -7.4942, -7.4941, -7.519, -7.5647, -7.5831, -6.4914, -7.1024, -7.6902, -7.5625, -6.5201, -7.7523, -7.7533, -7.7776, -7.8418, -7.8502, -7.3451, -7.8883, -7.9041, -6.1254, -7.9373, -8.0281, -8.0292, -5.4345, -5.9356, -6.5658, -6.775, -6.4936, -6.8485, -6.959, -7.0486, -6.6597, -5.4688, -5.4152, -6.7619, -6.2024, -5.8978, -5.37, -5.6243, -6.8753, -7.001, -5.3337, -5.4026, -5.7188, -5.6154, -6.7418, -6.0676, -5.5029, -5.7144, -5.6535, -5.4729, -5.7456, -5.4316, -5.7821, -5.9745, -5.4705, -5.5459, -5.7754, -5.906, -5.6492, -5.5085, -5.6059, -5.7361, -5.8033, -5.842, -5.8593, -5.935, -5.9127, -6.2744, -6.325, -6.1144, -6.8902, -6.9011, -6.9019, -6.4512, -7.0252, -7.0862, -7.1063, -6.4625, -6.1856, -7.2608, -7.3124, -6.7612, -7.3292, -6.4366, -7.3447, -6.411, -6.5785, -7.0584, -7.3937, -7.3981, -6.9697, -7.4308, -7.4587, -7.4741, -7.3508, -6.3396, -7.3464, -5.2635, -5.3848, -6.0848, -6.1453, -5.9222, -6.0637, -6.691, -6.1199, -6.0352, -5.0961, -5.6595, -5.9087, -5.4009, -5.3683, -5.786, -5.6322, -6.245, -5.0569, -5.7774, -5.554, -6.1181, -5.77, -5.5559, -5.3087, -5.6686, -5.8911, -5.4817, -5.748, -5.5761, -5.8898, -5.456, -5.3776, -5.2785, -5.4616, -5.5726, -5.7903, -5.6388, -5.6234, -5.6654, -5.6718, -5.755, -5.7838, -6.0171, -6.0668, -6.001, -5.6949, -6.5906, -5.6739, -6.7133, -6.5861, -6.7667, -5.7573, -6.8716, -6.9275, -5.9395, -6.4753, -6.9823, -6.9459, -7.1414, -5.1118, -7.1511, -7.1182, -7.2392, -5.973, -7.2545, -7.2673, -7.2996, -7.3623, -7.4081, -7.4283, -7.173, -5.617, -5.5584, -5.9048, -6.4924, -6.1664, -5.8223, -5.2031, -4.9938, -5.5708, -5.4112, -6.162, -5.3067, -5.8728, -5.6759, -4.9054, -4.7548, -5.8671, -5.4447, -5.3804, -5.0727, -5.5104, -4.1921, -5.0298, -5.8175, -5.0501, -5.3804, -5.2544, -5.0265, -5.3535, -5.0961, -5.6277, -5.6121, -5.2568, -5.3714, -5.4314, -5.3796, -5.3996, -5.466, -5.4575, -5.6033, -5.6079, -5.0586, -5.7352, -5.8134, -5.8336, -5.9461, -5.77, -5.074, -5.2674, -6.1423, -6.1752, -5.9708, -6.2681, -4.7492, -6.2982, -5.8421, -6.321, -6.3445, -5.6188, -6.3548, -5.3602, -5.824, -6.3761, -6.1535, -6.4015, -6.4249, -4.5117, -4.7069, -5.5222, -6.5212, -6.5275, -5.8984, -4.8085, -5.2703, -5.7002, -3.9697, -4.488, -5.6751, -6.0906, -5.7441, -5.1547, -5.1122, -4.2105, -5.0696, -4.5004, -4.8407, -5.2542, -4.7097, -5.1237, -5.5548, -5.3898, -5.3014, -5.7194, -5.5901, -5.381, -5.5893, -5.6262, -5.4659, -5.5136, -5.4555, -5.5447, -5.5056, -4.7213, -5.3041, -5.1704, -4.3716, -4.589, -5.45, -4.0311, -5.0148, -5.6169, -5.6657, -5.6929, -4.4621, -5.7851, -5.7085, -5.8416, -5.4977, -4.2654, -5.9887, -5.8938, -6.0001, -6.0386, -5.8857, -5.6292, -6.1307, -6.1437, -6.1521, -6.1556, -5.17, -6.1723, -6.0156, -5.0847, -5.3684, -4.4998, -5.8359, -3.7172, -5.2588, -4.7223, -3.3139, -3.6329, -4.8157, -4.0748, -4.9112, -4.0001, -4.2436, -4.5447, -4.6645, -4.6358, -4.9504, -4.957, -5.0176, -4.2624, -3.8422, -4.7946, -4.4011, -4.3287, -4.5334, -4.5062, -4.6951, -4.6524, -4.7569, -4.9126, -4.9956, -5.262, -5.2987, -4.2704, -4.9246, -4.4704, -5.5855, -4.6859, -5.4323, -5.7833, -5.9698, -6.0086, -5.7756, -5.7032, -6.0545, -4.9462, -3.2225, -4.8916, -6.1688, -6.1827, -6.2136, -4.4204, -5.4711, -3.7428, -6.3749, -5.8371, -5.7177, -5.7808, -3.9826, -5.7213, -5.2055, -5.1421, -4.8229, -5.263, -5.1547, -4.2137, -4.8654, -5.2854, -3.5506, -3.3701, -5.215, -4.2355, -2.7213, -4.3056, -4.0679, -3.9853, -4.7659, -4.4451, -4.5656, -4.2265, -4.3, -4.4302, -4.7836, -4.2324, -4.7173, -4.8447, -4.8975, -4.8495, -4.8945, -4.4089, -3.3909, -4.5189, -4.2818, -4.8368, -4.8519, -4.8757, -4.4006, -4.4295, -4.917, -4.9403, -3.8885, -4.9941, -4.6393, -4.5112, -5.0643, -5.0774, -5.1051, -5.1217, -5.1932, -5.2512, -5.2544, -5.2608, -5.2776, -5.2808, -5.283, -5.3854, -4.265, -5.3947, -5.094, -3.534, -3.1916, -4.5393, -3.9998, -3.9356, -4.6446, -2.7929, -4.4238, -4.4156, -5.0032, -4.5574, -4.4869, -4.1096, -3.834, -4.2775, -3.7744, -4.5986, -4.5428, -4.7052, -4.464, -4.6387, -2.1147, -4.1528, -2.9672, -4.3881, -4.4217, -4.4481, -4.5256, -4.3615, -4.7937, -4.81, -4.9223, -4.9363, -4.956, -5.0206, -5.072, -5.0769, -4.805, -3.4153, -5.2107, -3.9578, -5.2443, -5.2763, -5.3698, -5.3726, -4.1073, -5.4787, -5.5893, -4.7923, -5.2056, -5.7115, -4.0027, -4.2974, -3.7715, -4.4604, -3.9949, -3.454, -4.4868, -3.6581, -4.1821, -3.892, -4.2019, -4.1241, -4.4973, -4.3831, -4.7898, -2.6632, -2.7333, -3.3162, -3.39, -3.3931, -3.5469, -2.6691, -2.4886, -3.7299, -3.7349, -2.9849, -4.4121, -4.4773, -3.7986, -4.5744, -4.1565, -4.6327, -4.6356, -4.7534, -4.7969, -4.9247, -4.9361, -5.0904, -5.1243, -5.1313, -5.3414, -5.426, -5.4298, -5.165, -4.0519, -4.3379, -3.0044, -3.6597, -4.202, -4.2471, -3.062, -3.5934, -4.2382, -4.3036, -4.3148, -4.3663, -4.3846, -4.4471, -4.529, -3.5581, -4.8471, -4.3151, -3.325, -4.8909, -3.6148, -4.9075, -4.9336, -2.9204, -4.9715, -5.0539, -4.6736, -4.4498, -4.6165, -4.8594, -4.6361, -5.4994, -3.4339, -4.7459, -4.2266, -4.3354, -3.8357, -3.7921, -4.2012, -3.9975, -4.1205, -4.2907, -3.9895, -4.4102, -4.2228, -4.5821, -2.4009, -3.8542, -4.0564, -4.2006, -4.2704, -4.3359, -3.6942, -4.3918, -3.6271, -3.5492, -4.4385, -4.5842, -4.6049, -4.6163, -5.1119, -4.4543, -4.2449, -3.9279, -1.9509, -5.5631, -3.741, -4.1277, -4.9536, -4.748, -3.6535, -2.7572, -6.9108, -6.0917, -3.8708, -4.239, -5.695, -3.0657, -3.074, -3.2569, -3.5687, -4.1891, -4.3581, -4.3935, -4.4937, -4.5887, -4.5934, -3.8729, -4.6324, -4.6469, -4.3308, -4.6998, -4.5806, -3.4401, -3.2107, -3.4744, -4.556, -5.0154, -1.9331, -3.498, -3.963, -4.4468, -4.3649, -5.828, -5.6782, -5.6915, -5.5493, -4.9574, -4.2306, -2.8341, -3.0179, -2.9448, -3.7471, -3.9169, -3.9415, -3.5715, -3.4141, -3.3809, -4.4064, -4.4309, -3.6133, -4.5791, -4.6435, -3.8569, -3.6441, -4.1249, -4.438, -5.1623, -4.5622, -5.346, -5.5749, -5.7752, -3.3766, -6.5288, -3.3154, -5.6123, -9.3562, -9.3562, -9.3562, -6.0397, -9.3255, -9.3327, -2.7434, -2.8596, -2.8667, -3.1646, -3.5856, -3.651, -2.7538, -3.732, -4.0279, -4.0708, -4.0743, -4.1879, -3.3754, -4.1828, -4.9014, -6.27, -6.7182, -5.1477, -4.9337, -9.2108, -9.2108, -9.2108, -9.2108, -9.2108, -9.2108, -9.2108, -9.2108, -9.2108, -9.2108, -9.2108, -9.1748, -9.1824, -9.2063, -9.2078, -9.2089, -9.2104, -9.2106, -9.2106, -9.2107, -9.2107, -9.2107, -2.5223, -3.5017, -3.6034, -3.6464, -3.6562, -3.392, -4.2049, -3.1039, -3.4193, -4.718, -4.1887, -5.0544, -4.5069, -3.9176, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9857, -8.9864, -8.987, -8.9871, -8.9872, -8.9874, -8.9874, -8.9876, -8.9877, -8.9877, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -8.9878, -3.3402, -3.5187, -3.7176, -3.7834, -2.198, -4.0622, -4.1476, -3.1884, -3.5324, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.9108, -8.8422, -8.9037, -8.8994, -8.9073, -8.9086, -8.9089, -8.909, -8.9098, -8.9102, -8.9104, -8.9104, -8.9105, -8.9106, -8.9106, -8.9106, -8.9106, -8.9107, -8.9107, -8.9107, -8.9107, -8.9108, -2.3799, -3.3746, -2.9121, -4.3015, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7326, -8.7327, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -8.7329, -2.3059, -3.5375, -3.5654, -4.0843, -3.8542, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7331, -8.7331, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -8.7332, -3.5183, -3.5263, -3.373, -4.1851, -4.5221, -4.5318, -4.1358, -6.7707, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.6107, -8.6581, -8.6735, -8.6744, -8.6744, -8.6746, -8.6748, -8.6748, -8.6748, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -8.675, -3.6025, -2.8796, -4.0703, -4.3601, -6.1137, -6.1353, -6.1463, -6.2512, -4.8887, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.601, -8.6524, -8.6536, -8.6536, -8.6536, -8.6537, -8.6537, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538, -8.6538], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.9591, 0.9492, 0.9437, 0.9345, 0.933, 0.9313, 0.9291, 0.928, 0.9232, 0.9232, 0.9216, 0.9186, 0.9174, 0.9172, 0.9126, 0.9097, 0.907, 0.9056, 0.9049, 0.9048, 0.9028, 0.8974, 0.8967, 0.8965, 0.8933, 0.8919, 0.8901, 0.8888, 0.8799, 0.8798, 0.8744, 0.8677, 0.8631, 0.8663, 0.8515, 0.8608, 0.8644, 0.865, 0.8378, 0.7324, 0.704, 0.8289, 0.7512, 0.7073, 0.5878, 0.6119, 0.8192, 0.8393, 0.5049, 0.5123, 0.5736, 0.5357, 0.7886, 0.6169, 0.4447, 0.4887, 0.4535, 0.3824, 0.4608, 0.3205, 0.4557, 0.5271, 0.2961, 0.3302, 0.4365, 0.4831, 0.2744, 0.1179, 0.062, 0.0867, 0.1632, 0.2036, 0.0861, 0.3092, 0.1082, 1.395, 1.3789, 1.3765, 1.37, 1.3694, 1.3694, 1.3666, 1.3623, 1.3585, 1.3572, 1.3501, 1.3491, 1.3463, 1.3423, 1.3414, 1.3409, 1.3401, 1.3397, 1.3388, 1.338, 1.3367, 1.3356, 1.3352, 1.3334, 1.3323, 1.3298, 1.3284, 1.3259, 1.3256, 1.3237, 1.3092, 1.2977, 1.3111, 1.286, 1.2758, 1.2563, 1.2961, 1.2513, 1.2264, 1.1144, 1.1352, 1.1637, 1.0724, 1.0663, 1.1314, 1.1039, 1.2097, 0.9051, 1.0883, 1.0224, 1.1481, 1.0203, 0.9245, 0.8012, 0.9461, 1.0244, 0.7564, 0.8813, 0.6063, 0.9081, 0.3993, 0.2903, 0.1547, 0.3613, 0.394, 0.7223, 0.401, 0.2915, 0.1013, 0.0803, 0.1211, 0.2618, 2.0755, 2.0733, 2.0688, 2.0675, 2.0411, 2.0335, 2.031, 2.0271, 2.0263, 2.0196, 2.0163, 2.0105, 2.0087, 2.0072, 2.0046, 1.9947, 1.9857, 1.9852, 1.9844, 1.9763, 1.9727, 1.9726, 1.9705, 1.9687, 1.9641, 1.9547, 1.9473, 1.9442, 1.944, 1.938, 1.9183, 1.9245, 1.9317, 1.9192, 1.9067, 1.8673, 1.8133, 1.8536, 1.8394, 1.8893, 1.7871, 1.8448, 1.806, 1.6631, 1.6005, 1.8011, 1.7076, 1.6624, 1.562, 1.6855, 1.2411, 1.4428, 1.7521, 1.3162, 1.4242, 1.3183, 1.1213, 1.2757, 0.9436, 1.5393, 1.4015, 0.7063, 0.811, 0.8873, 0.6413, 0.2683, 0.6439, 0.3092, 0.7712, 0.215, 2.5171, 2.5121, 2.5078, 2.5067, 2.4998, 2.4955, 2.4934, 2.4895, 2.4859, 2.4833, 2.4769, 2.4756, 2.4742, 2.4729, 2.4721, 2.4709, 2.4687, 2.4683, 2.4678, 2.4668, 2.4667, 2.4657, 2.4651, 2.4633, 2.461, 2.4605, 2.4556, 2.4527, 2.4509, 2.4502, 2.4245, 2.3699, 2.3315, 2.3692, 2.1324, 2.201, 2.3622, 2.4195, 2.334, 2.15, 2.1115, 1.7526, 2.028, 1.7524, 1.8072, 2.0143, 1.5178, 1.654, 2.0003, 1.6866, 1.4829, 2.2722, 1.9068, 1.1487, 1.8718, 2.0011, 1.0922, 1.2682, 0.717, 1.2495, 0.4397, 3.6115, 3.6024, 3.5992, 3.5949, 3.5949, 3.5866, 3.5799, 3.5698, 3.5658, 3.5591, 3.5552, 3.5535, 3.5415, 3.5404, 3.5325, 3.5225, 3.5113, 3.5071, 3.5063, 3.5051, 3.4978, 3.4878, 3.4874, 3.4796, 3.4769, 3.4751, 3.4744, 3.4734, 3.4709, 3.4682, 3.461, 3.4629, 3.4454, 3.4638, 3.2897, 3.4011, 3.3154, 3.1185, 3.1333, 3.3183, 3.0767, 3.2462, 2.9977, 3.0513, 3.1325, 3.1655, 3.1525, 3.2557, 3.2381, 3.2673, 2.8591, 2.541, 3.0433, 2.6613, 1.9093, 2.253, 1.9265, 2.169, 1.3685, 1.2887, 2.6138, 3.7906, 3.7852, 3.7809, 3.7751, 3.7633, 3.7487, 3.7413, 3.7355, 3.7306, 3.7083, 3.6716, 3.6633, 3.6618, 3.6538, 3.6531, 3.6511, 3.639, 3.6376, 3.6261, 3.6226, 3.6148, 3.6117, 3.6116, 3.6055, 3.5711, 3.5677, 3.5669, 3.5628, 3.5611, 3.5592, 3.5584, 3.5532, 3.5428, 3.5448, 3.5349, 3.4561, 3.4986, 3.5198, 3.2633, 3.2229, 3.5093, 3.2884, 2.9052, 3.2525, 3.1012, 3.0136, 3.1721, 2.8064, 2.8249, 2.1479, 1.9275, 1.8061, 2.6189, 1.2008, 2.2596, 2.028, 2.6371, 1.1714, 1.2534, 4.0972, 4.0894, 4.0894, 4.0829, 4.0617, 4.0602, 4.0577, 4.0577, 4.0537, 4.0534, 4.0508, 4.0475, 4.0448, 4.0423, 4.039, 4.0364, 4.0348, 4.0313, 4.0292, 4.0197, 4.0115, 4.011, 4.0101, 4.0076, 4.0072, 4.0068, 3.991, 3.9895, 3.9885, 3.9869, 3.9311, 3.9095, 3.9613, 3.9106, 3.8232, 3.9133, 3.5761, 3.8394, 3.8221, 3.9574, 3.7778, 3.747, 3.3875, 3.0745, 3.3904, 2.4783, 3.5282, 3.0809, 3.3598, 2.0941, 2.8695, 4.1831, 4.1814, 4.1787, 4.1664, 4.164, 4.162, 4.156, 4.1488, 4.1315, 4.1299, 4.1175, 4.1159, 4.1136, 4.1057, 4.0991, 4.0985, 4.0931, 4.0799, 4.0798, 4.0751, 4.0747, 4.0698, 4.0546, 4.0541, 4.036, 4.0353, 4.0139, 4.0045, 3.997, 3.9879, 3.9792, 3.9746, 3.9335, 3.9461, 3.8511, 3.6963, 3.8868, 3.6494, 3.7739, 3.5367, 3.647, 3.4882, 3.7405, 2.1467, 0.6434, 4.3421, 4.3421, 4.3364, 4.3342, 4.3341, 4.329, 4.324, 4.3237, 4.3218, 4.3216, 4.3094, 4.2809, 4.2754, 4.2697, 4.2666, 4.2613, 4.261, 4.2607, 4.2484, 4.2435, 4.2279, 4.2264, 4.205, 4.1999, 4.1913, 4.1635, 4.1475, 4.1468, 4.1387, 4.1011, 3.8668, 3.4283, 2.968, 2.0343, 1.9007, 4.4483, 4.4311, 4.3944, 4.3893, 4.3884, 4.3841, 4.3825, 4.3769, 4.3691, 4.3494, 4.3328, 4.3283, 4.3271, 4.3269, 4.3252, 4.3246, 4.321, 4.3184, 4.3156, 4.3031, 4.2994, 4.2954, 4.2922, 4.2537, 4.2209, 4.2189, 4.2063, 4.165, 4.1575, 4.0946, 3.936, 3.826, 3.927, 3.1695, 3.3039, 3.5208, 3.0533, 3.5806, 2.425, 1.8263, 4.5376, 4.5202, 4.5072, 4.4964, 4.4906, 4.4849, 4.4844, 4.4797, 4.4782, 4.4777, 4.4751, 4.4596, 4.4573, 4.4559, 4.3838, 4.3611, 4.3245, 4.3069, 4.2893, 4.2871, 4.2726, 4.2009, 4.1947, 4.0731, 4.0097, 3.8067, 3.7429, 3.4533, 2.5183, 2.3757, 1.4021, 4.5526, 4.5524, 4.5469, 4.535, 4.4976, 4.4832, 4.4798, 4.4698, 4.4595, 4.4589, 4.4572, 4.4544, 4.4527, 4.449, 4.4462, 4.4459, 4.4385, 4.3306, 4.3305, 4.3145, 4.2648, 4.2632, 4.2586, 4.2075, 4.205, 4.1087, 3.9024, 3.8636, 3.8503, 3.4589, 3.1449, 2.5745, 4.6259, 4.6213, 4.6109, 4.5923, 4.5821, 4.5805, 4.5751, 4.5667, 4.546, 4.542, 4.5395, 4.5319, 4.523, 4.5152, 4.5041, 4.4765, 4.4715, 4.446, 4.4333, 4.4258, 4.395, 4.3388, 4.2813, 4.2764, 3.9842, 3.9487, 3.9158, 1.7136, 1.6998, 1.6966, 0.9534, 0.594, 0.7211, 4.65, 4.6474, 4.6472, 4.6389, 4.6222, 4.619, 4.6035, 4.5996, 4.5959, 4.5927, 4.5924, 4.5639, 4.5415, 4.3685, 4.2868, 4.1179, 3.9025, 3.5966, 2.7583, 1.859, 1.8452, 1.8419, 1.8407, 1.7509, 1.7454, 1.7324, 1.6788, 1.6484, 1.578, 1.5677, 1.1351, 0.8126, -0.1975, 0.5535, 0.2053, -0.7931, -0.3572, 0.289, -1.7025, -0.3315, 0.7375, 4.6944, 4.6656, 4.6608, 4.6586, 4.6581, 4.6481, 4.6203, 4.6149, 4.6036, 4.5631, 4.5083, 4.3137, 4.2529, 4.0526, 2.082, 2.0682, 2.0649, 2.0637, 1.9739, 1.9684, 1.9554, 1.9018, 1.8714, 1.801, 1.7907, 1.7808, 1.7746, 1.7728, 1.7496, 1.7412, 1.2333, -0.1331, 1.1742, 0.4806, 0.9078, 0.0564, -0.1464, 1.0283, 0.6163, 0.9587, -0.9728, 0.437, 0.9683, 1.1397, 1.1465, 0.5197, 4.6842, 4.6766, 4.6664, 4.6626, 4.6484, 4.6436, 4.6367, 4.6317, 4.5925, 2.159, 2.1452, 2.1419, 2.1406, 2.0509, 2.0454, 2.0324, 1.9788, 1.9484, 1.878, 1.8677, 1.8578, 1.8516, 1.8498, 1.8266, 1.8182, 1.8037, 1.7997, 1.7928, 1.7889, 1.7822, 0.777, 1.4075, 0.6053, -0.1555, 1.3478, 1.2704, 0.7162, 1.0799, 0.5609, 0.8552, -1.1538, 0.6286, 1.3787, 1.2797, -0.1041, 1.1305, -0.0573, 1.0678, 1.2135, 1.1066, 1.0222, 4.7252, 4.6994, 4.6957, 4.5991, 2.3369, 2.3231, 2.3198, 2.3186, 2.2288, 2.2233, 2.2104, 2.1567, 2.1263, 2.0559, 2.0456, 2.0357, 2.0295, 2.0277, 2.0045, 1.9961, 1.9816, 1.9776, 1.9708, 1.9668, 1.9601, 1.9375, 1.934, 1.9231, 1.9207, 1.9034, -0.3897, 0.1206, 1.2052, 0.9815, 0.8422, 1.4861, 0.0324, 0.9409, -1.2226, 1.0208, 1.1603, -0.021, 1.3694, 0.6603, 0.3472, 0.9981, -2.4352, 1.3545, 0.8336, 0.447, -0.4658, 1.2166, 0.7381, 1.2232, 1.2431, 0.8922, 4.7174, 4.6952, 4.6938, 4.637, 4.629, 2.3366, 2.3228, 2.3196, 2.3183, 2.2285, 2.223, 2.2101, 2.1565, 2.126, 2.0557, 2.0454, 2.0354, 2.0293, 2.0275, 2.0043, 1.9958, 1.9814, 1.9773, 1.9705, 1.9666, 1.9598, 1.9372, 1.9337, 1.9228, 1.9205, 1.2566, -0.1145, 1.3712, 0.8883, 1.1998, 1.239, -0.1875, 0.5838, 1.2584, 1.4392, 1.3663, 1.0329, 0.8691, 1.1118, 0.7721, 1.1348, 0.8592, 0.9203, 1.3227, 0.9898, 0.7545, 0.4612, -0.8252, 0.8308, 0.0266, 4.7037, 4.7033, 4.6908, 4.6603, 4.626, 4.6249, 4.5762, 3.933, 2.3948, 2.381, 2.3778, 2.3765, 2.2867, 2.2812, 2.2683, 2.2147, 2.1842, 2.1139, 2.1035, 2.0936, 2.0875, 2.0857, 2.0624, 2.054, 2.0396, 2.0355, 2.0248, 2.018, 1.9954, 1.9919, 1.4996, 0.6687, 1.0539, 1.2206, -0.8543, 0.1788, -0.0784, 1.2584, 1.1234, 1.2177, -0.6349, 1.4169, 1.2385, 1.1062, 0.3973, 1.1199, 1.0513, 0.8662, 0.1276, 1.1546, 0.5977, 4.7029, 4.6991, 4.6352, 4.4933, 4.2495, 4.2409, 4.2364, 4.1926, 4.1511, 2.416, 2.4022, 2.399, 2.3977, 2.3079, 2.3024, 2.2895, 2.2359, 2.2054, 2.1351, 2.1248, 2.1148, 2.1087, 2.1069, 2.0837, 2.0752, 2.0608, 2.0567, 2.0499, 2.046, 2.0392, 1.27, 0.3111, 0.5031, 1.4566, 0.1918, 1.5306, -0.4317, 0.6228, 1.3266, 1.957, 1.1321, 1.4742, 1.2587, 1.1444, -0.7269, 1.0772, -1.1414, 1.5112, 1.0978, 1.8472, 0.3234]}, \"token.table\": {\"Topic\": [2, 10, 3, 5, 3, 1, 2, 4, 7, 8, 2, 3, 1, 2, 16, 19, 1, 7, 1, 2, 1, 2, 1, 2, 1, 4, 1, 2, 4, 7, 8, 2, 3, 1, 2, 3, 4, 7, 1, 2, 1, 2, 4, 1, 3, 4, 1, 2, 5, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 7, 7, 7, 1, 2, 3, 4, 14, 1, 2, 3, 5, 13, 3, 9, 1, 3, 1, 1, 2, 4, 6, 9, 3, 3, 5, 1, 2, 6, 1, 2, 3, 5, 5, 6, 1, 2, 2, 2, 2, 4, 13, 1, 2, 3, 1, 6, 1, 9, 1, 9, 1, 2, 3, 4, 1, 1, 2, 3, 4, 1, 2, 3, 6, 20, 8, 1, 2, 5, 12, 14, 4, 1, 2, 1, 2, 3, 1, 2, 3, 5, 8, 1, 4, 16, 1, 3, 4, 1, 2, 3, 5, 1, 2, 4, 6, 1, 12, 11, 1, 2, 8, 8, 2, 3, 4, 5, 20, 10, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4, 10, 1, 2, 3, 6, 6, 7, 1, 2, 4, 12, 2, 4, 4, 4, 20, 5, 1, 4, 1, 2, 4, 2, 3, 2, 16, 1, 2, 3, 4, 5, 8, 1, 2, 1, 2, 6, 1, 2, 3, 6, 1, 3, 8, 1, 2, 3, 4, 2, 6, 1, 1, 2, 3, 4, 5, 2, 3, 1, 2, 3, 5, 2, 4, 1, 3, 8, 1, 2, 12, 3, 20, 1, 2, 3, 15, 1, 2, 3, 4, 6, 2, 6, 1, 2, 4, 1, 2, 4, 1, 2, 4, 5, 9, 1, 2, 3, 4, 5, 5, 1, 2, 3, 5, 6, 8, 1, 2, 4, 5, 8, 1, 8, 1, 3, 1, 2, 3, 7, 1, 8, 2, 3, 5, 1, 2, 3, 5, 2, 5, 15, 1, 5, 3, 1, 2, 3, 4, 6, 1, 12, 1, 2, 4, 7, 1, 2, 3, 4, 6, 2, 2, 1, 4, 12, 1, 5, 10, 8, 5, 1, 2, 4, 1, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 1, 2, 10, 1, 10, 2, 3, 16, 16, 1, 1, 2, 4, 10, 3, 9, 11, 1, 5, 1, 13, 1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 5, 1, 9, 9, 5, 5, 1, 2, 5, 7, 1, 18, 5, 1, 2, 3, 6, 1, 2, 6, 1, 2, 5, 20, 20, 1, 2, 6, 8, 1, 12, 1, 1, 1, 2, 6, 1, 6, 1, 2, 4, 7, 1, 13, 1, 3, 3, 1, 2, 9, 5, 1, 2, 3, 4, 10, 1, 2, 1, 8, 1, 2, 3, 5, 6, 7, 11, 1, 2, 3, 8, 1, 2, 3, 10, 1, 1, 2, 10, 1, 12, 1, 2, 4, 1, 2, 3, 11, 3, 1, 14, 1, 2, 3, 9, 1, 12, 1, 2, 3, 10, 1, 2, 3, 10, 4, 1, 2, 7, 1, 2, 3, 4, 12, 1, 10, 17, 1, 2, 14, 1, 14, 1, 2, 6, 1, 2, 6, 1, 2, 4, 5, 6, 1, 2, 10, 1, 2, 5, 5, 1, 1, 2, 3, 2, 19, 1, 2, 11, 1, 2, 3, 5, 7, 1, 2, 6, 2, 5, 1, 2, 4, 1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 3, 1, 15, 15, 1, 4, 1, 2, 6, 1, 2, 12, 4, 20, 9, 6, 9, 1, 2, 3, 4, 5, 6, 8, 1, 2, 4, 2, 1, 4, 14, 1, 4, 1, 19, 1, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 6, 1, 2, 3, 4, 1, 2, 3, 4, 6, 10, 3, 15, 1, 2, 4, 14, 1, 2, 4, 7, 1, 2, 3, 4, 6, 1, 1, 3, 1, 13, 2, 3, 7, 1, 2, 3, 4, 5, 6, 1, 4, 2, 1, 7, 2, 3, 8, 1, 2, 3, 8, 3, 8, 8, 1, 4, 1, 2, 3, 11, 2, 8, 15, 1, 13, 4, 2, 3, 1, 3, 6, 4, 2, 5, 1, 9, 11, 1, 2, 13, 11, 11, 5, 1, 2, 7, 1, 1, 1, 2, 4, 1, 7, 1, 2, 6, 8, 2, 6, 1, 2, 5, 1, 2, 8, 1, 2, 3, 4, 1, 2, 3, 4, 5, 2, 2, 7, 7, 1, 2, 3, 4, 5, 2, 1, 1, 2, 3, 4, 4, 1, 2, 3, 4, 5, 9, 2, 10, 1, 4, 1, 2, 3, 4, 7, 18, 1, 2, 5, 2, 10, 1, 2, 3, 11, 1, 2, 3, 3, 2, 3, 1, 2, 4, 6, 1, 2, 3, 1, 2, 10, 1, 2, 1, 2, 3, 4, 7, 11, 8, 9, 1, 2, 1, 2, 6, 1, 2, 3, 4, 5, 1, 3, 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 6, 1, 5, 3, 2, 10, 1, 2, 3, 1, 5, 11, 1, 2, 4, 1, 2, 3, 11, 2, 8, 9, 11, 1, 2, 3, 10, 1, 2, 4, 10, 12, 1, 2, 3, 4, 6, 1, 2, 4, 4, 14, 12, 12, 12, 1, 2, 4, 5, 13, 1, 2, 3, 4, 7, 6, 1, 2, 4, 1, 2, 3, 20, 1, 2, 3, 4, 11, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 8, 1, 2, 1, 2, 3, 6, 1, 17, 1, 2, 3, 4, 12, 1, 11, 1, 2, 3, 6, 1, 2, 7, 1, 2, 7, 1, 2, 3, 12, 12, 1, 2, 3, 10, 13, 1, 2, 3, 1, 2, 1, 2, 4, 12, 1, 2, 3, 8, 9, 1, 4, 2, 3, 1, 2, 3, 2, 6, 8, 1, 2, 8, 5, 1, 2, 3, 4, 7, 1, 2, 3, 5, 3, 1, 2, 6, 11, 2, 4, 10, 1, 2, 3, 11, 1, 2, 5, 14, 19, 2, 3, 3, 5, 8, 1, 13, 1, 11, 1, 2, 3, 5, 2, 5, 6, 1, 3, 17, 8, 1, 2, 3, 5, 8, 1, 2, 15, 1, 2, 3, 4, 5, 6, 9, 2, 4, 4, 7, 9, 1, 2, 3, 4, 5, 6, 1, 13, 13, 1, 10, 1, 2, 3, 4, 5, 6, 1, 6, 1, 2, 7, 1, 1, 2, 4, 7, 1, 2, 3, 11, 1, 2, 11, 7, 8, 9, 1, 3, 10, 1, 2, 1, 9, 2, 3, 11, 1, 7, 7, 2, 7, 7, 1, 4, 7, 1, 13, 7, 2, 4, 7, 2, 2, 3, 3, 1, 2, 3, 6, 9, 13, 1, 10, 2, 3, 10, 1, 2, 3, 5, 6, 2, 14, 5, 1, 2, 3, 4, 5, 8, 13, 1, 2, 1, 3, 5, 1, 4, 14, 1, 2, 3, 5, 1, 3, 2, 4, 1, 3, 1, 2, 3, 4, 6, 1, 2, 3, 1, 2, 3, 4, 1, 9, 1, 18, 2, 9, 9, 1, 2, 3, 4, 5, 9, 3, 14, 2, 3, 1, 2, 3, 1, 2, 1, 2, 5, 1, 5, 12, 5, 1, 13, 3, 1, 2, 3, 12, 1, 4, 1, 4, 9, 9, 1, 2, 3, 11, 1, 2, 3, 4, 12, 1, 2, 3, 4, 3, 1, 5, 13, 12, 1, 2, 1, 2, 1, 2, 14, 13, 1, 2, 4, 6, 1, 2, 3, 4, 1, 5, 1, 5, 2, 3, 1, 2, 10, 1, 2, 10, 1, 2, 3, 4, 6, 1, 1, 12, 1, 2, 5, 1, 2, 3, 4, 7, 10, 1, 2, 3, 4, 5, 8, 1, 1, 2, 3, 4, 5, 3, 12, 1, 11, 1, 1, 2, 3, 4, 10, 1, 2, 3, 4, 8, 1, 2, 3, 4, 8, 2, 4, 1, 2, 3, 8, 1, 8, 9, 1, 2, 3, 6, 9, 3, 1, 2, 5, 1, 2, 3, 4, 13, 12, 4, 1, 2, 3, 19, 19, 9, 19, 1, 2, 8, 5, 1, 2, 3, 2, 1, 2, 6, 13, 1, 2, 3, 5, 8, 1, 2, 3, 4, 6, 1, 2, 3, 8, 1, 2, 3, 5, 8, 2, 1, 2, 3, 2, 10, 1, 4, 4, 1, 2, 3, 1, 1, 2, 3, 4, 6, 2, 1, 5, 4, 1, 2, 2, 2, 1, 2, 3, 5, 1, 2, 3, 3, 12, 2, 5, 1, 7, 6, 6, 9, 1, 2, 4, 5, 1, 2, 3, 9, 14, 1, 2, 3, 4, 1, 2, 3, 4, 6, 1, 2, 4, 4, 1, 4, 10, 1, 6, 7, 1, 2, 4, 7, 1, 2, 3, 4, 7, 7, 1, 11, 1, 2, 3, 1, 2, 6, 1, 2, 9, 1, 2, 3, 5, 1, 2, 3, 5, 2, 5, 16, 1, 2, 7, 4, 7, 1, 2, 3, 6, 1, 4, 10, 1, 3, 3, 1, 2, 10, 1, 3, 8, 1, 2, 1, 2, 3, 4, 1, 4, 1, 9, 1, 4, 16, 16, 1, 2, 3, 1, 14, 1, 2, 3, 4, 6, 10, 9, 1, 2, 3, 6, 1, 2, 3, 5, 5, 2, 5, 1, 2, 3, 5, 2, 15, 5, 15, 1, 2, 3, 5, 2, 3, 8, 2, 3, 1, 11, 13, 1, 6, 1, 2, 12, 1, 3, 6, 12, 1, 3, 12, 4, 7, 1, 2, 6, 1, 2, 3, 4, 6, 6, 6, 7, 1, 1, 2, 3, 5, 10, 1, 2, 3, 4, 8, 12, 1, 6, 14, 3, 8, 1, 2, 2, 3, 1, 4, 1, 3, 8, 8, 1, 2, 4, 7, 2, 3, 11, 1, 3, 1, 2, 3, 4, 10, 1, 2, 4, 5, 4, 3, 1, 15, 1, 18, 2, 4, 13, 13, 1, 2, 3, 8, 1, 1, 2, 3, 4, 1, 2, 3, 4, 6, 10, 5, 4, 13, 8, 2, 4, 1, 2, 3, 13, 1, 2, 3, 4, 6, 1, 9, 1, 2, 4, 20, 1, 2, 3, 4, 6, 1, 1, 17, 1, 2, 5, 1, 5, 2, 4, 3, 18, 13, 1, 1, 2, 3, 4, 6, 1, 2, 3, 4, 1, 11, 1, 2, 3, 1, 5, 10, 7, 4, 4, 4, 4, 10, 7, 1, 4, 10, 4, 7, 4, 7, 1, 2, 13, 1, 2, 6, 3, 1, 1, 1, 2, 1, 2, 3, 4, 15, 15, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 5, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 4, 5, 6, 1, 13, 3, 1, 2, 3, 4, 5, 6, 1, 1, 11, 1, 4, 10, 1, 2, 3, 4, 5, 8, 1, 2, 10, 1, 2, 3, 4, 1, 2, 3, 4, 5, 7, 4, 7, 4, 7, 2, 5, 10, 3, 1, 2, 3, 10, 1, 2, 5, 11, 1, 2, 3, 4, 5, 6, 8, 2, 3, 1, 2, 3, 4, 6, 15, 12, 1, 2, 3, 5, 2, 2, 2, 1, 6, 1, 2, 4, 1, 2, 3, 4, 5, 10, 1, 2, 3, 4, 6, 4, 1, 2, 3, 4, 6, 1, 2, 3, 5, 5, 1, 2, 5, 1, 2, 3, 4, 7, 6, 1, 14, 3, 7, 16, 7, 14, 2, 2, 3, 14, 1, 15, 11, 1, 2, 3, 4, 7, 2, 5, 19, 2, 6, 4, 8], \"Freq\": [0.6240467059194794, 0.8663992512267319, 0.613364531897777, 0.3741425308720139, 0.3579887924551962, 0.08674058488210808, 0.39033263196948637, 0.49875836307212146, 0.8550900857552699, 0.9063824529316866, 0.05969464454975429, 0.8357250236965601, 0.042116244826671194, 0.042116244826671194, 0.8704023930845379, 0.37010410093439633, 0.04017858675297564, 0.8839289085654641, 0.5032831531364731, 0.25164157656823655, 0.022341900286845663, 0.9532544122387483, 0.920985587770457, 0.05581730834972467, 0.36055178683622574, 0.46356658307514736, 0.05664276846736469, 0.011328553693472937, 0.12461409062820232, 0.7703416511561598, 0.9346105328676478, 0.7527400119172379, 0.053767143708374134, 0.04040384978130576, 0.26989771653912253, 0.2424230986878346, 0.44282619360311115, 0.9129054221277882, 0.04823850087656228, 0.9165315166546832, 0.024215328859564584, 0.8959671678038896, 0.910940734989762, 0.05211132319463588, 0.010422264638927176, 0.9067370235866643, 0.2508700117275393, 0.1358879230190838, 0.5853633606975918, 0.8529136987961654, 0.17503766436218396, 0.7246559304594417, 0.08051732560660463, 0.007001506574487359, 0.08422116586162047, 0.5352722985871878, 0.22833293855817105, 0.10106539903394456, 0.001871581463591566, 0.04304637366260602, 0.8945189141479158, 0.8342310835490434, 0.20943565541318268, 0.3278123302119381, 0.15480026704452635, 0.1365884709216409, 0.1456943689830836, 0.23545444416721703, 0.4407224211335088, 0.269665773661599, 0.046285916374752066, 0.794389837917133, 0.8742375124983325, 0.8383638164403795, 0.14484081796082615, 0.6517836808237177, 0.9092769441867306, 0.6859661627298602, 0.08494936999750591, 0.004247468499875296, 0.12105285224644592, 0.0976917754971318, 0.888670967594662, 0.5386717850775963, 0.1795572616925321, 0.05665312780292192, 0.037768751868614614, 0.8309125411095215, 0.09473919370279532, 0.8171255456866097, 0.059211996064247076, 0.005921199606424708, 0.8198219441980213, 0.2620241416135116, 0.018393672903152847, 0.9196836451576424, 0.9703570999537782, 0.8996646028067873, 0.1713372756291712, 0.1713372756291712, 0.45689940167778986, 0.4489081403654593, 0.29673588939411716, 0.23586698900558029, 0.05216436005596164, 0.7824654008394245, 0.053069417299333524, 0.9021800940886698, 0.1877146974925616, 0.7652983820850587, 0.1311169228356921, 0.18242354481487597, 0.03420441465278924, 0.632781671076601, 0.6776977610322261, 0.39359337790866683, 0.14267759949189174, 0.039359337790866686, 0.41327304680410015, 0.04667983864787377, 0.015559946215957923, 0.6379577948542748, 0.28007903188724265, 0.9417794677041671, 0.6763190837374655, 0.01982218028013646, 0.128844171820887, 0.8226204816256631, 0.881663582687788, 0.9457153232342075, 0.5698896923729612, 0.815436789983083, 0.403011858959103, 0.13228363557381675, 0.028346493337246446, 0.803150644555316, 0.14036804017707147, 0.22057834884968372, 0.04010515433630613, 0.5714984492923624, 0.8879896899993927, 0.03313918333961006, 0.9113275418392766, 0.9489371598651389, 0.615447244304012, 0.05594974948218291, 0.11189949896436582, 0.03012078721619335, 0.13554354247287007, 0.16566432968906342, 0.6174761379319637, 0.01696498253844519, 0.01696498253844519, 0.9161090570760404, 0.7712346547196114, 0.1337288853848429, 0.7132207220524954, 0.8959129385107464, 0.04219632648243119, 0.005274540810303899, 0.938868264234094, 0.7456327006158917, 0.10514155847769173, 0.10514155847769173, 0.10514155847769173, 0.035047186159230574, 0.5607549785476892, 0.907235657506979, 0.039203525765430694, 0.7693691931465774, 0.049004407206788364, 0.12741145873764975, 0.12779138061861367, 0.12779138061861367, 0.7329211535479314, 0.022436116741144662, 0.3621830273927638, 0.009615478603347712, 0.46795329202958863, 0.1282063813779695, 0.3670655120383705, 0.1619406670757517, 0.01079604447171678, 0.44803584557624637, 0.7536179438524027, 0.861682010903918, 0.6313333024908927, 0.013724637010671581, 0.0686231850533579, 0.23331882918141686, 0.07250165717081104, 0.8941871051066694, 0.6849543712437742, 0.05017924779051837, 0.8781368363340715, 0.8633629623089536, 0.18305918939014426, 0.7904828632756229, 0.053124412067429655, 0.07968661810114448, 0.8234283870451596, 0.9583480332561487, 0.01842976987031055, 0.051751546001887964, 0.9108272096332282, 0.23640943582218613, 0.23640943582218613, 0.1310220969616935, 0.2421060487335641, 0.022786451645511914, 0.12247717759462655, 0.6948636657327961, 0.07720707397031068, 0.6264373900985202, 0.013471771830075703, 0.33679429575189257, 0.1666839657187234, 0.05556132190624113, 0.003968665850445795, 0.7619838432855927, 0.08246449161255018, 0.05497632774170012, 0.7971567522546518, 0.02872878673861987, 0.8044060286813564, 0.05745757347723974, 0.07900416353120464, 0.14246151021662293, 0.7123075510831146, 0.9204889485568553, 0.6164315294736487, 0.19406177779725978, 0.04280774510233672, 0.09703088889862989, 0.04566159477582583, 0.1387810878015812, 0.7494178741285384, 0.13010383642417586, 0.7470478349517194, 0.07974106103417229, 0.02937828564416874, 0.2942517028610493, 0.4413775542915739, 0.11384747404724527, 0.048791774591676544, 0.7644044686029324, 0.5093925824687144, 0.06791901099582859, 0.33959505497914294, 0.9128985734276285, 0.5334683126513795, 0.03608032221632115, 0.03608032221632115, 0.3728299962353186, 0.5171512851006033, 0.5185335560762714, 0.27111897360559334, 0.12592957790423734, 0.06963164895881359, 0.011852195567457632, 0.10097234085565161, 0.7068063859895612, 0.8490175222931899, 0.10042142736801171, 0.01825844133963849, 0.06650086647525212, 0.022166955491750708, 0.8999783929650788, 0.3722047761117185, 0.010339021558658847, 0.04911035240362952, 0.16800910032820626, 0.3928828192290362, 0.1111560233372111, 0.6072914445740314, 0.16266735122518697, 0.07591143057175392, 0.032533470245037395, 0.8040232982510581, 0.1450833381003486, 0.07698299572671559, 0.6306683880688623, 0.05625680456952293, 0.038491497863357794, 0.04145238231438531, 0.03739634357040355, 0.022437806142242132, 0.01495853742816142, 0.05235488099856497, 0.852636633405201, 0.020638253071538833, 0.9080831351477086, 0.9313228021432008, 0.019815378769004275, 0.13859182518231838, 0.034647956295579596, 0.08661989073894899, 0.6756351477638021, 0.8309308601358436, 0.9347701471656926, 0.2642930900201061, 0.4625129075351856, 0.06607327250502652, 0.10294043678858034, 0.41690876899375034, 0.03602915287600312, 0.4272028126726084, 0.07946678954193867, 0.2119114387785031, 0.6357343163355094, 0.27522973655831373, 0.481652038977049, 0.3726451011998226, 0.1150265073932206, 0.5120534845246595, 0.08163171492422107, 0.2671583397519962, 0.011131597489666509, 0.14794952876137335, 0.7693375495591415, 0.0873513672173398, 0.5033102587284817, 0.058234244811559865, 0.3369267021240249, 0.3178715090871292, 0.08325206190377193, 0.0227051077919378, 0.03784184631989633, 0.5222174792145694, 0.9426059898090443, 0.9202726418645117, 0.07048638404329081, 0.12530912718807255, 0.775350224476199, 0.3917952485896961, 0.8733675367620121, 0.759888553356516, 0.8237643730804011, 0.8144281969731041, 0.8621212486462225, 0.08996047811960584, 0.02249011952990146, 0.9084017187390561, 0.9255918272427696, 0.34598021497054504, 0.6243410678059081, 0.9322505953396919, 0.14283185869498483, 0.5713274347799393, 0.010051016128270508, 0.3718875967460088, 0.01507652419240576, 0.5829589354396895, 0.04667908920691746, 0.05834886150864683, 0.863563150327973, 0.07073216166576517, 0.8723633272111037, 0.05081980632607565, 0.011727647613709764, 0.9264841614830714, 0.9459807636002321, 0.7168421244862814, 0.08646491535207751, 0.07781842381686976, 0.043232457676038755, 0.7695377466334898, 0.68510896393213, 0.8371062671103872, 0.9009736252672793, 0.0757005572803358, 0.7948558514435258, 0.09984403324311264, 0.7987522659449011, 0.5455688181476618, 0.35839228213423524, 0.01886275169127554, 0.01741177079194665, 0.05513727417449773, 0.29714293889775795, 0.12660873048687077, 0.015503109855535196, 0.5529442515140887, 0.04892799082114404, 0.7828478531383046, 0.009164953266534215, 0.9760675228858939, 0.9085082069291904, 0.8895722474181781, 0.8404298121386627, 0.02357734157769497, 0.02357734157769497, 0.778052272063934, 0.09430936631077988, 0.013996361899626992, 0.975079879007347, 0.8372433703731502, 0.3550258626779095, 0.11227313606053548, 0.021240863579020223, 0.503711907731051, 0.39256766057733816, 0.04618443065615743, 0.53881835765517, 0.2999750170729126, 0.15917041722236178, 0.5203648255346442, 0.5708341865450844, 0.6582182126798138, 0.10517691199765004, 0.06310614719859002, 0.7572737663830803, 0.8569611445778315, 0.3474095300706349, 0.4632127067608465, 0.9401087107644032, 0.6604970123972282, 0.10226121198645953, 0.1533918179796893, 0.664697877911987, 0.04813223587690533, 0.7701157740304853, 0.17523201808002628, 0.048675560577785076, 0.029205336346671044, 0.7106631844356621, 0.08997180966183149, 0.8097462869564834, 0.5024288428888588, 0.3349525619259059, 0.8169575448164628, 0.022670637396010943, 0.0075568791320036474, 0.9597236497644632, 0.8060630154653904, 0.01691415261845533, 0.2198839840399193, 0.042285381546138326, 0.1691415261845533, 0.5243387311721153, 0.8827004484606114, 0.08307768926688107, 0.1860420719474222, 0.7441682877896888, 0.6037454365537576, 0.11876959407614904, 0.0989746617301242, 0.027218031975784155, 0.012371832716265525, 0.002474366543253105, 0.12619269370590835, 0.03423697944551455, 0.13205692071841327, 0.7727775360558999, 0.044018973572804425, 0.12314025103731667, 0.33863569035262087, 0.11287856345087362, 0.38994412828483616, 0.398870404068958, 0.029191169797937913, 0.11676467919175165, 0.7881615845443236, 0.24284106816488923, 0.7285232044946677, 0.010019356956789235, 0.2838817804423616, 0.6946754156707202, 0.10446002637390908, 0.03133800791217272, 0.8252342083538817, 0.8797292758348525, 0.9515076232898111, 0.09121907988637802, 0.8779836439063885, 0.8558694698748563, 0.09052465546753288, 0.02468854240023624, 0.9205498650631512, 0.27969912995139246, 0.48947347741493674, 0.06968097761378855, 0.04180858656827313, 0.7664907537516741, 0.09755336865930397, 0.1281987626230025, 0.098614432786925, 0.15778309245908, 0.5818251534428576, 0.901479530537654, 0.4378897896536065, 0.4378897896536065, 0.8759816580216908, 0.4617474860134299, 0.24919705594375582, 0.0036646625874081737, 0.27484969405561305, 0.8646557174664787, 0.6942250118825555, 0.8496420056999557, 0.9823709247622563, 0.08803636838122926, 0.8939077404863278, 0.9247705348583499, 0.04560860103119731, 0.9317185639230308, 0.053585246458184514, 0.19647923701334322, 0.6966082039563987, 0.0246942950805862, 0.1975543606446896, 0.6914402622564135, 0.04452921005912411, 0.23155189230744536, 0.04452921005912411, 0.026717526035474466, 0.6323147828395623, 0.2332774994001742, 0.3192218412844489, 0.4051661831687236, 0.38718744930964916, 0.06895118960308821, 0.5303937661776016, 0.8640079057189163, 0.9412264903252232, 0.1611387003949249, 0.12085402529619368, 0.6928964116981771, 0.07575686698249094, 0.8333255368074004, 0.05308309635591179, 0.35388730903941196, 0.5662196944630591, 0.2774313440261498, 0.35943935137979155, 0.30709381477108405, 0.012213958542031752, 0.038386726846385506, 0.17384169781084702, 0.04966905651738486, 0.6953667912433881, 0.2161939939617276, 0.8062818735840415, 0.27557470120251676, 0.5958371917892253, 0.11544345590916241, 0.5761829077216764, 0.2694380503734458, 0.06217801162464134, 0.05388761007468916, 0.033161606199808714, 0.04693617636897067, 0.058670220461213334, 0.8565852187337147, 0.09467938138414779, 0.01893587627682956, 0.8331785561805006, 0.063394033157048, 0.9001952708300817, 0.9520473926516564, 0.44051889832252855, 0.3775876271335959, 0.020653605966178698, 0.9397390714611308, 0.8260511054494772, 0.17370751914629284, 0.17370751914629284, 0.46322005105678093, 0.1454353780159975, 0.7562639656831871, 0.9167349510463424, 0.7913737488699216, 0.8766921123046124, 0.199783670975406, 0.280648490179737, 0.41478895497750956, 0.0076108065133488, 0.0009513508141686, 0.066594556991802, 0.0275891736108894, 0.5915766118821815, 0.36247792557537706, 0.27185844418153277, 0.9419252841182749, 0.40116495834211, 0.320931966673688, 0.9795559695381988, 0.5877532969842394, 0.0839647567120342, 0.01320643290641347, 0.9376567363553563, 0.652070149166883, 0.040993680956432146, 0.18739968437226123, 0.7554549776256781, 0.008039610301979064, 0.02411883090593719, 0.008039610301979064, 0.9325947950295713, 0.7876096743640879, 0.11313730128986897, 0.06962295463991937, 0.008702869329989921, 0.17076732781441537, 0.7498913090980849, 0.014849332853427422, 0.05568499820035284, 0.3141658895420144, 0.18667828219163174, 0.045531288339422375, 0.027318773003653426, 0.4097815950548014, 0.8527018827231337, 0.02579534769147391, 0.9415301907387976, 0.05145034069552566, 0.0900380962171699, 0.8103428659545292, 0.9171244144865305, 0.4622370228431958, 0.026667520548645914, 0.017778347032430607, 0.4622370228431958, 0.6221939733020115, 0.32187757529732774, 0.023101261384975674, 0.021561177292643965, 0.007700420461658559, 0.6249013641417065, 0.8901535181402762, 0.06473843768292918, 0.01589204583306489, 0.9614687729004259, 0.0705892231857092, 0.8941301603523165, 0.882333586200417, 0.40596109698139093, 0.34555858082153, 0.1488992258824479, 0.07023548390681504, 0.0028094193562726018, 0.022475354850180814, 0.4770080342768008, 0.19080321371072032, 0.688468977979277, 0.03918756311665277, 0.9013139516830139, 0.002258459286814038, 0.047427645023094794, 0.9440359818882679, 0.0681928751681571, 0.198379273216457, 0.1611831594883713, 0.5517423536332711, 0.08249107075961781, 0.7836651722163692, 0.883049138167003, 0.4936739749614572, 0.32911598330763814, 0.11617565184880449, 0.17426347777320675, 0.23235130369760898, 0.3485269555464135, 0.9028691942066734, 0.8256965157941831, 0.8476006031746849, 0.07163547872900324, 0.8882799362396401, 0.9120835777215047, 0.013285833001655806, 0.9432941431175622, 0.05349547219372499, 0.23181371283947494, 0.6597774903892748, 0.7287921655918758, 0.05464284446400766, 0.7649998224961073, 0.037632667191254215, 0.9031840125901012, 0.9204650461498047, 0.06989306466799028, 0.04193583880079416, 0.8387167760158832, 0.936849577180073, 0.8960354124878532, 0.3661771426055578, 0.49252094044930866, 0.2121628666550868, 0.2727808285565402, 0.9241661734871083, 0.944901548926169, 0.04559411645856734, 0.02279705822928367, 0.9118823291713468, 0.11186532297345335, 0.8309995420885106, 0.19403514451466403, 0.027719306359237715, 0.6652633526217052, 0.8666219308293321, 0.039640643887494546, 0.8324535216373855, 0.08397859228265467, 0.008397859228265466, 0.881775218967874, 0.12573800098058582, 0.20432425159345197, 0.612972754780356, 0.08614425868624137, 0.7026141099096562, 0.034996105091285555, 0.16690450120459266, 0.08899661672746027, 0.7326698214307195, 0.10141474929408265, 0.05588159654980064, 0.012418132566622364, 0.903669477594344, 0.7151225979179162, 0.8400196283748208, 0.8390151561098915, 0.4323780308721978, 0.3347442819655725, 0.009962627439451562, 0.15740951354333468, 0.057783239148819054, 0.9257082402676589, 0.8287853056881668, 0.07057822579168818, 0.23587985988274734, 0.03900375635856452, 0.6482052842447151, 0.9289294107499498, 0.23246229437683733, 0.24188644144616858, 0.18534155903018112, 0.047120735346656215, 0.03769658827732497, 0.24816920615905608, 0.07543332668476135, 0.7920499301899941, 0.7381084279580565, 0.06150903566317138, 0.24726566667055092, 0.11988638384026712, 0.1423650808103172, 0.01498579798003339, 0.45706683839101836, 0.9538292912659369, 0.5247015473670755, 0.11574298838979608, 0.3317965667174154, 0.769570628822871, 0.8869715442382151, 0.015068933366783792, 0.06027573346713517, 0.8739981352734599, 0.040183822311423444, 0.03671155610126258, 0.12481929074429277, 0.8149965454480292, 0.8870819382275222, 0.04015024726700842, 0.8833054398741853, 0.892941589866033, 0.05252597587447253, 0.02968859505948447, 0.018269904651990444, 0.9328616695173471, 0.048014938872216396, 0.9322106216807757, 0.05220986693917407, 0.026104933469587036, 0.8353578710267852, 0.04109246931635488, 0.9245805596179847, 0.09669317880742159, 0.3545416556272125, 0.1845960686323503, 0.22854751354481467, 0.12599414208239784, 0.9361513873935161, 0.7020770906195603, 0.23402569687318675, 0.5183278123196096, 0.2073311249278438, 0.11117277027147889, 0.08337957770360917, 0.6948298141967431, 0.47394568774295803, 0.1616558934937221, 0.011021992738208327, 0.3380077773050554, 0.7689520752900935, 0.915225718821602, 0.38280675414595655, 0.018494762156680503, 0.03698952431336101, 0.915490726755685, 0.41437844176356875, 0.16609383822754614, 0.2277369122089035, 0.006849230442373037, 0.09588922619322252, 0.06506768920254385, 0.018835383716525853, 0.258012672532175, 0.5821017612006387, 0.015732480032449696, 0.06607641613628872, 0.0723694081492686, 0.03456650088771477, 0.898729023080584, 0.9036400499488813, 0.8010262995781162, 0.9167083963498857, 0.8865050347079102, 0.05682724581460963, 0.02273089832584385, 0.07189047014252864, 0.8866491317578532, 0.9181895444823025, 0.09564783636331634, 0.7133734462097343, 0.17933969318121812, 0.2356592504016267, 0.620155922109544, 0.024806236884381758, 0.1116280659797179, 0.9123396004870623, 0.9309069964980056, 0.8717215090410295, 0.8689373324273736, 0.5171688132617932, 0.3758934301268643, 0.02775052168721817, 0.07063769156746444, 0.011575075286110004, 0.02893768821527501, 0.08102552700277003, 0.8565555711721403, 0.8929500805389347, 0.5073602206499855, 0.2504689696879675, 0.14771246930316034, 0.0770673752886054, 0.010703802123417415, 0.26970353068681374, 0.18729411853250955, 0.5169317671497263, 0.8843627276767371, 0.9754571767746182, 0.9673591847059947, 0.972795829054542, 0.8901868993636869, 0.16620369143187194, 0.04748676898053484, 0.17807538367700565, 0.08903769183850282, 0.49861107429561585, 0.05993038177918442, 0.07627503135532562, 0.005448216525380402, 0.8226806953324407, 0.016344649576141207, 0.7676458709054241, 0.013396410354515026, 0.14736051389966529, 0.7903882109163866, 0.07146241086573377, 0.07146241086573377, 0.8337281267668939, 0.5369833180608791, 0.3478609982667879, 0.16649757182000105, 0.44894880972893136, 0.026758538328214454, 0.3520351631588289, 0.5130378097097213, 0.2604452146230473, 0.10862790358649713, 0.09292266451375056, 0.0209403187636621, 0.37553429567103397, 0.09510284111149563, 0.25848464507227015, 0.08778723794907288, 0.17069740712319725, 0.0024385343874742467, 0.9150408324722755, 0.031553132154216394, 0.27169696979079955, 0.04435868894543666, 0.6487458258270112, 0.02217934447271833, 0.016740915818144013, 0.9542322016342087, 0.7751355716057835, 0.12508801552368465, 0.05331620333796394, 0.043063087311432414, 0.8835480844897973, 0.6478809379650822, 0.7093351330902083, 0.05319592663871242, 0.13298981659678105, 0.05319592663871242, 0.6915470463032615, 0.07828500250550192, 0.21919800701540537, 0.6575940210462161, 0.14065563550374321, 0.28131127100748643, 0.5344914149142242, 0.03112146209136435, 0.9258634972180894, 0.015560731045682175, 0.9195714504404631, 0.9722031887512403, 0.8753921273452286, 0.09011389546200883, 0.01931012045614475, 0.8689579379184597, 0.9394523392638291, 0.10670304225211319, 0.1422707230028176, 0.7291374553894401, 0.9298224558215488, 0.7932089510160977, 0.1958903873110724, 0.05509417143123911, 0.014283674074765697, 0.7284673778130505, 0.0955997380338981, 0.1274663173785308, 0.07435535180414297, 0.6798203593521642, 0.9717377574448616, 0.9307474091968492, 0.025155335383698626, 0.01954048644607009, 0.9477135926343995, 0.9073629474241578, 0.04166462513682357, 0.037035222343843176, 0.1343124823955108, 0.7163332394427242, 0.9350639423822064, 0.2029616518464347, 0.027676588888150184, 0.7380423703506717, 0.23515036759338262, 0.6358157139101512, 0.26914898318895975, 0.031205679210314172, 0.037056744062248084, 0.021453904457090993, 0.050337435673043114, 0.03775307675478233, 0.025168717836521557, 0.8557364064417329, 0.6994432287974586, 0.06170280282497609, 0.046277102118732066, 0.8484135388434213, 0.9017162850022018, 0.026248553763724144, 0.07874566129117243, 0.8662022742028966, 0.1296727223549614, 0.12672561502871227, 0.27408098134116843, 0.46269585022111226, 0.21317456807373264, 0.10658728403686632, 0.6395237042211979, 0.9762396167148648, 0.9509019494186836, 0.5200475590882303, 0.10400951181764607, 0.8796503036822985, 0.5059074094275366, 0.4532998493141795, 0.036465275168274976, 0.9237869709296327, 0.05506587050662249, 0.9085868633592711, 0.09517099233242163, 0.7554197516385966, 0.04163730914543446, 0.08327461829086892, 0.026750478417974382, 0.8827657877931546, 0.875290370291494, 0.4042014968529634, 0.4042014968529634, 0.9605822246118146, 0.8003463199427339, 0.30018486098224273, 0.03638604375542336, 0.1591889414299772, 0.49121159069821535, 0.7884040219861156, 0.05611783233801015, 0.009352972056335025, 0.9072382894644975, 0.45633260066960807, 0.3124123189199624, 0.08951139474673081, 0.03861275851819761, 0.08951139474673081, 0.008775626935954002, 0.9715912022627702, 0.065845082603896, 0.8230635325487, 0.8438454507689314, 0.8666163369666634, 0.8371148555835851, 0.2883749362908777, 0.4955569293542267, 0.18478393975920315, 0.0055995133260364595, 0.013998783315091148, 0.0055995133260364595, 0.07110844603342886, 0.8710784639095036, 0.8684330207814273, 0.06556856568906032, 0.8523913539577841, 0.43784962281829026, 0.3567663593334217, 0.09243492037275017, 0.07297493713638172, 0.017838317966671086, 0.016216652696973713, 0.14634103235017956, 0.7317051617508978, 0.024375519197407172, 0.9018942103040654, 0.8753884735394957, 0.23952420431419413, 0.07257772225696042, 0.04354663335417626, 0.07257772225696042, 0.7910971726008686, 0.10874076110704478, 0.1151372764662827, 0.021321717864126427, 0.7483922970308375, 0.025119573669001638, 0.2009565893520131, 0.7410274232355484, 0.851189675896951, 0.8150707407654096, 0.14299486680094906, 0.10193634436841331, 0.1359151258245511, 0.6795756291227554, 0.04955493098962526, 0.9217217164070298, 0.036707940852475744, 0.94828847202229, 0.021432766850941625, 0.004286553370188325, 0.9601879549221848, 0.01784340817615517, 0.9278572251600687, 0.9249235580288256, 0.03652006144209984, 0.8399614131682964, 0.8344786024842856, 0.011622185476049918, 0.0697331128562995, 0.8832860961797938, 0.028693458644162655, 0.9325374059352863, 0.8939699992110876, 0.014737705819253977, 0.03684426454813495, 0.9284754666130006, 0.7242702494029651, 0.5018477250862348, 0.2007390900344939, 0.8436350693329266, 0.7555136417661159, 0.1167053592972049, 0.03071193665715918, 0.08906461630576162, 0.9596488221831223, 0.022633226938281185, 0.06148514542224324, 0.8300494632002837, 0.9278137907978313, 0.7522587961778774, 0.05786606124445211, 0.7537398810443856, 0.20779796219268776, 0.013223506684989221, 0.0075562895342795545, 0.013223506684989221, 0.01726379338957575, 0.9322448430370904, 0.8295238217189976, 0.5859888679163279, 0.20528272442928683, 0.1231696346575721, 0.06158481732878605, 0.0018662065857207894, 0.016795859271487103, 0.7558746474908011, 0.9447411005383007, 0.019682106261214596, 0.21416895443620174, 0.0823726747831545, 0.6425068633086052, 0.021504042387182298, 0.17203233909745838, 0.7311374411641982, 0.10673370031507368, 0.23287352796016075, 0.29109190995020096, 0.3493102919402411, 0.4346344615675198, 0.2607806769405119, 0.023001074667352177, 0.8970419120267348, 0.2467238477086788, 0.4934476954173576, 0.469612935515387, 0.15252385939815988, 0.2047030744554251, 0.004013785773635786, 0.15252385939815988, 0.18524049959540348, 0.08010399982503935, 0.7159294984362892, 0.1372560713234457, 0.6992290425911385, 0.02330763475303795, 0.1320765969338817, 0.004915445545372397, 0.978173663529107, 0.025490579464997658, 0.892170281274918, 0.3686563348333927, 0.7793680268470491, 0.7769757492866248, 0.1424664371235092, 0.2586890568821615, 0.49863252993228224, 0.0712332185617546, 0.018745583832040686, 0.9525369587485905, 0.026277706141267412, 0.893442008803092, 0.6881732799653868, 0.12512241453916123, 0.8818958296985293, 0.06999173251575629, 0.027996693006302517, 0.5056838030694385, 0.2022735212277754, 0.08535483121329054, 0.028451610404430182, 0.7681934809196149, 0.04408361428567048, 0.2204180714283524, 0.6906432904755042, 0.843379016760303, 0.08998428146170237, 0.8323546035207469, 0.9550338115557269, 0.050970377507800126, 0.050970377507800126, 0.09174667951404022, 0.7747497381185618, 0.06845409447133992, 0.8727897045095839, 0.8660807982344004, 0.10561960954078055, 0.9193953587001884, 0.9631834872233519, 0.10326666708248809, 0.08605555590207341, 0.08605555590207341, 0.6884444472165873, 0.6039595958776972, 0.12004165880798952, 0.06002082940399476, 0.07127473491724377, 0.1350468661589882, 0.8828554955279023, 0.05193267620752367, 0.008655446034587278, 0.025966338103761834, 0.8514054298410564, 0.18390586675457077, 0.09633164449048945, 0.6918363558862424, 0.9110513482147697, 0.5318275890298259, 0.32727851632604665, 0.54817964280277, 0.24363539680123109, 0.07824666993840135, 0.4955622429432085, 0.3390689030664058, 0.6782005692635079, 0.28165449649818175, 0.06827987793895315, 0.5718439777387327, 0.051209908454214866, 0.2555146275989555, 0.6702023018988997, 0.05026517264241748, 0.01256629316060437, 0.1917712810333269, 0.7431137140041417, 0.26919126304744434, 0.6800621382251225, 0.03786092159052664, 0.8329402749915861, 0.11268705692047695, 0.26763176018613277, 0.5775211667174444, 0.07619448679400899, 0.17143759528652022, 0.6857503811460809, 0.5879538486868339, 0.13808007052493826, 0.05790454570400637, 0.013362587470155316, 0.1915304204055595, 0.9432460644975523, 0.23776469963023747, 0.6895176289276886, 0.2900536338872387, 0.02900536338872387, 0.6236153128575632, 0.10170981703361073, 0.23732290641175835, 0.14691418015965993, 0.3164305418823445, 0.09040872625209842, 0.06780654468907382, 0.16505666985361553, 0.15548816725340592, 0.5932471612129949, 0.009568502600209595, 0.011960628250261994, 0.05501888995120517, 0.9403114154558834, 0.4233567294644245, 0.17670541751558588, 0.07730862016306882, 0.07730862016306882, 0.23192586048920646, 0.027025577589310148, 0.8648184828579247, 0.04444012248955693, 0.9036158239543242, 0.942118964791705, 0.5870752965289686, 0.35735018049589395, 0.008508337630854618, 0.04041460374655943, 0.9038683300676371, 0.10670691126862598, 0.14227588169150132, 0.03556897042287533, 0.03556897042287533, 0.6283851441374642, 0.16094344038887767, 0.2799016354589177, 0.006997540886472943, 0.034987704432364715, 0.4968254029395789, 0.02431871887805332, 0.9484300362440795, 0.1549970467314133, 0.08856974098937902, 0.730700363162377, 0.007380811749114919, 0.2228759226960178, 0.8792499290760917, 0.8772281537315684, 0.3907680443225141, 0.0797089045632989, 0.36743860884057294, 0.06998830644582342, 0.08554126343378418, 0.7405623676397968, 0.6008118195562707, 0.1710921075557592, 0.21485985600025576, 0.6313956298751613, 0.22154232627198642, 0.10800188405759338, 0.03046206986239813, 0.8956368329462457, 0.8574737532303034, 0.8893122171901819, 0.8801739963357975, 0.08338490491602292, 0.009264989435113658, 0.9591849603521557, 0.8666904531865735, 0.8631104831405191, 0.9234652864608054, 0.06206065786651024, 0.9043124431977205, 0.8762950900147899, 0.7418398302394182, 0.041188851942408754, 0.9198843600471288, 0.9032347380198794, 0.6283096853004101, 0.1407400415663496, 0.07676729539982706, 0.7420838555316616, 0.8952361085702668, 0.025223691128899068, 0.1933816319882262, 0.23542111720305797, 0.050447382257798136, 0.47084223440611594, 0.2548679832005656, 0.11946936712526511, 0.04778774685010604, 0.0318584979000707, 0.5177005908761488, 0.024336135360040125, 0.024336135360040125, 0.1338487444802207, 0.766588263841264, 0.07416909230877419, 0.026488961538847926, 0.14833818461754839, 0.15363597692531797, 0.5827571538546544, 0.9088658596553144, 0.08918791768861252, 0.8918791768861253, 0.008918791768861253, 0.6963755529990726, 0.9261268456858514, 0.061911825075058984, 0.8667655510508258, 0.7667380888618284, 0.11668304801607242, 0.8612320210710107, 0.005556335619812973, 0.809201372067614, 0.6060521033026586, 0.30610767251558013, 0.014380897366503763, 0.041088278190010756, 0.024652966914006452, 0.7781803359756718, 0.04545110832232773, 0.7726688414795714, 0.9026266904329638, 0.0856282323369774, 0.8807475326089104, 0.9300087835664375, 0.7009834072332249, 0.3201225729599595, 0.15871623365241688, 0.5057398631636335, 0.005380211310251419, 0.27262881815501794, 0.22642054389145555, 0.48518687976740477, 0.8975701607862258, 0.9092763099458806, 0.11157854447901848, 0.7252605391136201, 0.04899588761652263, 0.8819259770974074, 0.6939930559383498, 0.8405975181542543, 0.8598369033159793, 0.13458719539064146, 0.16150463446876975, 0.1166422360052226, 0.5652662206406941, 0.39952874768490637, 0.3728934978392459, 0.13317624922830212, 0.957079492909813, 0.9414069140626337, 0.055640996595098406, 0.20401698751536082, 0.06182332955010934, 0.6615096261861699, 0.11011544158938613, 0.3964155897217901, 0.4278771444616147, 0.015730777369912304, 0.03460771021380707, 0.019433945745492606, 0.019433945745492606, 0.9231124229108988, 0.7634248771520294, 0.019388442390384304, 0.9112567923480622, 0.912551059765088, 0.04930184124272733, 0.8627822217477283, 0.8828624815172534, 0.0661148497339778, 0.19834454920193342, 0.25123642898911563, 0.4495809781910491, 0.20373290476072897, 0.0848887103169704, 0.012126958616710058, 0.13824732823049465, 0.5529893129219786, 0.2632127094817459, 0.1120164775814728, 0.8121194624656778, 0.11892992671510756, 0.8391167051565923, 0.019821654452517927, 0.7872253017818318, 0.7216177022015046, 0.05550905401550035, 0.30412717314191157, 0.030412717314191158, 0.6082543462838231, 0.1382899544923904, 0.5127366005025552, 0.17658563419797546, 0.1659479453908685, 0.1293616195772876, 0.6652883292546219, 0.12196952703001401, 0.07022487919909898, 0.931006820509595, 0.35287483433198574, 0.9484316991064652, 0.016121446245793775, 0.2095788011953191, 0.7254650810607199, 0.891364866590437, 0.8878995166981162, 0.06539730025323826, 0.018684942929496646, 0.7567401886446141, 0.12145212904172818, 0.20012596076746256, 0.018193269160678413, 0.7277307664271366, 0.46512583951429504, 0.27907550370857703, 0.1962500675182411, 0.05648263729856119, 0.022593054919424475, 0.8811291418575545, 0.3048780732974559, 0.4065040977299413, 0.8556055000757679, 0.7056949542331732, 0.6757990473233687, 0.4927450677439418, 0.07299926929539878, 0.021899780788619636, 0.4014959811246933, 0.5173660838470675, 0.2217283216487432, 0.9082827475031183, 0.9108879340244777, 0.45395275207223046, 0.18158110082889217, 0.9285937482958824, 0.9649451716657087, 0.8212609992814973, 0.10072068859112702, 0.054234216933683785, 0.8917491005257999, 0.9141915308509967, 0.3954101855776678, 0.027269667970873643, 0.04772191894902888, 0.17725284181067869, 0.27269667970873646, 0.0613567529344657, 0.9686370105807693, 0.38433077538091875, 0.08152470992928579, 0.011646387132755114, 0.47750187244295966, 0.022950924307948886, 0.28918164628015597, 0.01836073944635911, 0.6563964352073381, 0.6644446726934501, 0.059564380397564114, 0.8934657059634618, 0.40047210988168475, 0.021647141074685662, 0.003607856845780944, 0.5628256679418272, 0.6453893933368325, 0.9500745560082874, 0.09951111716595538, 0.8209667166191319, 0.15440678988726825, 0.03860169747181706, 0.09007062743423981, 0.6690960895114957, 0.03195982787004128, 0.3835179344404953, 0.5539703497473821, 0.9118683305047449, 0.04559341652523725, 0.19531762564229221, 0.6640799271837935, 0.9397492829821164, 0.9636220487118352, 0.02409055121779588, 0.051708329154363374, 0.017236109718121125, 0.8790415956241774, 0.11937402087959952, 0.0994783507329996, 0.07958268058639968, 0.6167657745445975, 0.03292286848708656, 0.06584573697417312, 0.866968870159946, 0.23571628858643412, 0.7071488657593024, 0.22766875610149806, 0.03925323381060311, 0.706558208590856, 0.41895562759477917, 0.19620511485154948, 0.0057707386721043965, 0.009233181875367034, 0.36586483181141877, 0.8827557464768224, 0.7517679268968741, 0.8534738898176676, 0.9591350886425759, 0.07136676137365294, 0.03330448864103804, 0.6327852841797228, 0.009515568183153727, 0.24264698867042003, 0.1908049744542299, 0.18484231900253523, 0.029813277258473422, 0.5783775788143845, 0.9275875092504772, 0.9620891189304293, 0.15761437199102657, 0.7655555210992719, 0.5397749636438145, 0.03041763418575368, 0.8516937572011031, 0.30424874675602503, 0.40566499567470005, 0.022877462456431713, 0.9150984982572685, 0.9512347483104732, 0.9289412882539902, 0.012805188971949691, 0.10244151177559753, 0.8451424721486797, 0.8789725090480709, 0.09077965784281113, 0.03025988594760371, 0.08573634351821051, 0.7716270916638946, 0.05632460585694467, 0.253460726356251, 0.591408361497919, 0.6897663277147085, 0.12541205958449245, 0.0487797624261235, 0.27177296208840235, 0.07665391238390835, 0.27177296208840235, 0.3135841870250796, 0.5436624959128963, 0.04428020328702323, 0.09348042916149348, 0.3099614230091626, 0.9396561074151653, 0.8329836776513778, 0.19466274786039703, 0.6813196175113896, 0.040176088488239343, 0.8838739467412656, 0.054074318158506274, 0.9057448291549801, 0.9387532152699292, 0.9747743221713179, 0.09130429841032417, 0.026086942402949762, 0.7956517432899678, 0.052173884805899524, 0.7482595841693618, 0.4358861624846531, 0.2559966351100344, 0.29059077498976876, 0.009225103967929166, 0.18525920374997837, 0.2736783691761044, 0.031578273366473585, 0.34946622525564097, 0.1368391845880522, 0.012631309346589433, 0.8490320519696981, 0.9520552405959024, 0.9760670708537353, 0.887174166038552, 0.13967150510704224, 0.8031111543654929, 0.887384657080464, 0.07488478118822481, 0.02620967341587868, 0.45875469984464684, 0.6604463631718718, 0.18869896090624907, 0.08985664805059479, 0.01572491340885409, 0.03818907542150279, 0.04563405082560789, 0.7757788640353341, 0.10524268008089831, 0.870006155335426, 0.03252173087756392, 0.9431301954493537, 0.24617017794394674, 0.11117362874887918, 0.04764584089237679, 0.5638091172264587, 0.37960246527613406, 0.9064095760715015, 0.03049233190720567, 0.8537852934017587, 0.14075959449547532, 0.04691986483182511, 0.762447803517158, 0.06873527312079238, 0.8248232774495085, 0.35618492799773294, 0.35618492799773294, 0.23821454997218433, 0.9473415535092974, 0.8828243130220127, 0.8908838248871435, 0.6916252792080628, 0.14963046905943667, 0.07647779529704542, 0.05985218762377467, 0.013300486138616592, 0.5895178436054027, 0.3256776898239637, 0.04534752643118482, 0.03091876802126238, 0.05091334296761917, 0.9037118376752403, 0.0809820704421626, 0.05398804696144174, 0.8098207044216261, 0.176964558314192, 0.66361709367822, 0.9330197497284702, 0.933397959941895, 0.9025950035376904, 0.8942107821594846, 0.9402582056800127, 0.9096738999244953, 0.9184343175397257, 0.901325402567417, 0.016159161068411917, 0.9372313419678913, 0.9650546380440727, 0.7494931151757208, 0.20887513045880746, 0.12265540982809896, 0.8177027321873264, 0.4531827607279066, 0.3237019719485047, 0.7772512212028119, 0.05186896614551514, 0.02593448307275757, 0.8688051829373785, 0.8323490926192912, 0.9403763226255748, 0.3567409761013448, 0.033555500683081926, 0.9059985184432121, 0.03981830284032196, 0.8793208543904433, 0.036500110936961795, 0.02986372713024147, 0.9850938744475987, 0.952042829402036, 0.5006205916049185, 0.265581215705527, 0.16333244765889912, 0.04382090059141196, 0.01593487294233162, 0.0053116243141105406, 0.2324493410644959, 0.5940372049426007, 0.10331081825088707, 0.041970019914422875, 0.022599241492381548, 0.8324073147921928, 0.87504078884276, 0.39580946527925426, 0.321219231700793, 0.15639887685806397, 0.07819943842903199, 0.028873638804565657, 0.014436819402282829, 0.04956729673550096, 0.019826918694200384, 0.9021248005861174, 0.032288798804981755, 0.14852847450291606, 0.038746558565978105, 0.025831039043985402, 0.7361846127535839, 0.05758639908548814, 0.898347825733615, 0.8310117159764083, 0.6703417096938858, 0.2298773728686467, 0.01286027260803618, 0.038580817824108535, 0.03215068152009045, 0.011252738532031657, 0.9057632884676804, 0.15328717512575937, 0.7664358756287969, 0.9731471754691431, 0.0074286043928942225, 0.8794175811391735, 0.19298144478277265, 0.17716329357106997, 0.5726170738636369, 0.02530904193872428, 0.01265452096936214, 0.01265452096936214, 0.09243080892050783, 0.06162053928033855, 0.7394464713640626, 0.05021920986441751, 0.8474491664620455, 0.006277401233052189, 0.07532881479662626, 0.08852175925569715, 0.21590672989194426, 0.019431605690274984, 0.44260879627848576, 0.04318134597838885, 0.18567978770707208, 0.04296009347688401, 0.8806819162761221, 0.1515213866583184, 0.7792528456713518, 0.1496926675315542, 0.7698480044479931, 0.9719250755752136, 0.8864177854522225, 0.11312225005660317, 0.04309419049775359, 0.5602244764707967, 0.26933869061095994, 0.12536466253981227, 0.0470117484524296, 0.015670582817476533, 0.7678585580563502, 0.4064660141861688, 0.27309435328133214, 0.13495941877275136, 0.11908184009360415, 0.007938789339573609, 0.046044978169526934, 0.007938789339573609, 0.12095911771752717, 0.7660744122110055, 0.48933093058725885, 0.2625299278388786, 0.13359511120795003, 0.07922500780936573, 0.029515198987802915, 0.9048881452968714, 0.8872429259541323, 0.13131651230945598, 0.668520426302685, 0.16713010657567126, 0.026860195699661454, 0.9249602840203254, 0.39492652826226604, 0.9483581318762387, 0.133764339911939, 0.7134098128636747, 0.048262218988117216, 0.037537281435202276, 0.8955322856683972, 0.1451201650458453, 0.266053635917383, 0.44745384222468965, 0.09190943786236869, 0.016930685922015284, 0.0266053635917383, 0.5099634349509764, 0.07620143280876658, 0.01758494603279229, 0.04689318942077944, 0.3341139746230535, 0.6526893451489679, 0.5808007762145149, 0.24664142551575288, 0.10502151021961091, 0.06046693012644264, 0.003182470006654876, 0.30555994244697493, 0.12643859687461032, 0.03160964921865258, 0.5162909372379921, 0.7588923031464241, 0.04446145430519203, 0.022230727152596014, 0.8669983589512446, 0.037159904333512975, 0.03185134657158255, 0.6582611624793726, 0.07431980866702595, 0.175182406143704, 0.7457967155728592, 0.6113578422638536, 0.5109341810468995, 0.09713642189790919, 0.8094701824825766, 0.9229507960738123, 0.7659602736927186, 0.9671116551608756, 0.7245958562509269, 0.16262139268431475, 0.04065534817107869, 0.6911409189083377, 0.6571955280662067, 0.9412993642929095, 0.8293852589408119, 0.21261178022538607, 0.15308048176227798, 0.1360715393442471, 0.12756706813523164, 0.34017884836061774, 0.24952838258048285, 0.5988681181931588, 0.8983297331590897, 0.027197521843919163, 0.8975182208493324, 0.9123106344345906, 0.8340491535533261], \"Term\": [\"aac\", \"aar\", \"abi\", \"abstractbeanfactory\", \"actionpack\", \"activity\", \"activity\", \"activity\", \"activitythread\", \"actor\", \"adb\", \"adb\", \"addr\", \"addr\", \"addr\", \"addrreturn\", \"aes\", \"aes\", \"ahead\", \"ahead\", \"ajax\", \"ajax\", \"algorithm\", \"algorithm\", \"aligned\", \"aligned\", \"alloc\", \"alloc\", \"alloc\", \"alloc\", \"anaconda\", \"analytics\", \"analytics\", \"android\", \"android\", \"android\", \"android\", \"androidruntime\", \"angular\", \"angular\", \"angularjs\", \"angularjs\", \"animate\", \"animation\", \"animation\", \"animation\", \"annotation\", \"annotation\", \"annotation\", \"ant\", \"api\", \"api\", \"api\", \"api\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"appdelegate\", \"appender\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"application\", \"application\", \"application\", \"application\", \"applicationfilterchain\", \"apt\", \"arange\", \"arch\", \"arch\", \"arr\", \"array\", \"array\", \"array\", \"array\", \"array\", \"artifactid\", \"artisan\", \"artisan\", \"ascii\", \"ascii\", \"ascii\", \"asp\", \"asp\", \"asp\", \"asp\", \"aspnetcore\", \"asyncdownloadfile\", \"auth\", \"auth\", \"authentication\", \"authorization\", \"autorelease\", \"autorelease\", \"autorelease\", \"available\", \"available\", \"available\", \"awk\", \"awk\", \"ax\", \"ax\", \"axis\", \"axis\", \"background\", \"background\", \"background\", \"background\", \"backing\", \"bar\", \"bar\", \"bar\", \"bar\", \"bash\", \"bash\", \"bash\", \"bash\", \"bbb\", \"bdist\", \"bean\", \"bean\", \"bean\", \"bearing\", \"beautifulsoup\", \"begintransaction\", \"benchmark\", \"bgcolor\", \"bin\", \"bin\", \"bin\", \"binding\", \"binding\", \"binding\", \"binding\", \"bitbucket\", \"bitmap\", \"bitmap\", \"bla\", \"board\", \"board\", \"board\", \"boot\", \"boot\", \"boot\", \"boot\", \"border\", \"border\", \"border\", \"bouncycastle\", \"bounding\", \"bounding\", \"bower\", \"branch\", \"branch\", \"branch\", \"branching\", \"brand\", \"brand\", \"brand\", \"brand\", \"brand\", \"breakpoints\", \"browser\", \"browser\", \"browser\", \"browser\", \"build\", \"build\", \"build\", \"button\", \"button\", \"button\", \"button\", \"button\", \"byte\", \"byte\", \"byte\", \"byte\", \"bytebuffer\", \"calayer\", \"calculate\", \"calculate\", \"calculate\", \"calculate\", \"canvas\", \"canvas\", \"caption\", \"ccc\", \"ccc\", \"celery\", \"cell\", \"cell\", \"center\", \"center\", \"center\", \"certificate\", \"certificate\", \"ch\", \"ch\", \"change\", \"change\", \"change\", \"change\", \"change\", \"change\", \"chapter\", \"chapter\", \"char\", \"char\", \"char\", \"character\", \"character\", \"character\", \"character\", \"checkout\", \"checkout\", \"checkout\", \"chrome\", \"chrome\", \"chrome\", \"chrome\", \"cipher\", \"cipher\", \"city\", \"class\", \"class\", \"class\", \"class\", \"class\", \"cli\", \"cli\", \"client\", \"client\", \"client\", \"client\", \"clip\", \"clip\", \"clone\", \"clone\", \"clone\", \"closure\", \"closure\", \"closure\", \"cmake\", \"cmakebinaries\", \"cmd\", \"cmd\", \"cmd\", \"cmd\", \"code\", \"code\", \"code\", \"code\", \"code\", \"codec\", \"codec\", \"collection\", \"collection\", \"collection\", \"color\", \"color\", \"color\", \"column\", \"column\", \"column\", \"column\", \"column\", \"com\", \"com\", \"com\", \"com\", \"com\", \"combobox\", \"command\", \"command\", \"command\", \"command\", \"command\", \"command\", \"commit\", \"commit\", \"commit\", \"commit\", \"commit\", \"commits\", \"commits\", \"comparison\", \"comparison\", \"completion\", \"completion\", \"completion\", \"completion\", \"composite\", \"conda\", \"configuring\", \"configuring\", \"configuring\", \"connection\", \"connection\", \"connection\", \"connection\", \"connectionstring\", \"connectionstring\", \"connectionstring\", \"connects\", \"connects\", \"containerbase\", \"content\", \"content\", \"content\", \"content\", \"content\", \"contour\", \"contour\", \"controller\", \"controller\", \"controller\", \"controller\", \"convert\", \"convert\", \"convert\", \"convert\", \"convert\", \"cookie\", \"cooky\", \"coordinate\", \"coordinate\", \"coordinate\", \"copyonwritearraylist\", \"cordova\", \"corefoundation\", \"coroutine\", \"couchdb\", \"count\", \"count\", \"count\", \"country\", \"cout\", \"coyote\", \"crashed\", \"credential\", \"crt\", \"crt\", \"cs\", \"cs\", \"cs\", \"cs\", \"ctrl\", \"ctrl\", \"ctrl\", \"culture\", \"culture\", \"curl\", \"curl\", \"curl\", \"curlopt\", \"currenttimemillis\", \"cursor\", \"cursor\", \"cursor\", \"cursor\", \"cxx\", \"cython\", \"dal\", \"dao\", \"dao\", \"dash\", \"dash\", \"data\", \"data\", \"data\", \"data\", \"data\", \"database\", \"database\", \"database\", \"database\", \"datacontext\", \"datacontext\", \"dataframe\", \"dataframe\", \"dataframes\", \"datagrid\", \"datagridview\", \"datasource\", \"datasource\", \"datasource\", \"datasource\", \"datatable\", \"datatable\", \"datatemplate\", \"date\", \"date\", \"date\", \"date\", \"datetime\", \"datetime\", \"datetime\", \"db\", \"db\", \"db\", \"dcmpstat\", \"dcmtk\", \"dd\", \"dd\", \"dd\", \"ddd\", \"dealloc\", \"dealloc\", \"decimal\", \"declarative\", \"decode\", \"decode\", \"decode\", \"decoder\", \"decoder\", \"delegate\", \"delegate\", \"delegate\", \"delegate\", \"dense\", \"dense\", \"depend\", \"depend\", \"deploying\", \"df\", \"df\", \"df\", \"dialect\", \"dialog\", \"dialog\", \"dialog\", \"dialog\", \"dialog\", \"dictionary\", \"dictionary\", \"diff\", \"diff\", \"difference\", \"difference\", \"difference\", \"difference\", \"difference\", \"difference\", \"difference\", \"directory\", \"directory\", \"directory\", \"directory\", \"disable\", \"disable\", \"disable\", \"disable\", \"discount\", \"dismiss\", \"dismiss\", \"dismiss\", \"distance\", \"distance\", \"div\", \"div\", \"div\", \"dll\", \"dll\", \"dll\", \"dm\", \"docker\", \"dog\", \"dog\", \"double\", \"double\", \"double\", \"dtype\", \"earth\", \"earth\", \"eclipse\", \"eclipse\", \"eclipse\", \"eclipse\", \"editor\", \"editor\", \"editor\", \"editor\", \"edittext\", \"el\", \"el\", \"electron\", \"element\", \"element\", \"element\", \"element\", \"elevation\", \"elif\", \"ellipsis\", \"emacs\", \"email\", \"email\", \"emp\", \"employee\", \"employee\", \"encode\", \"encode\", \"encode\", \"encoded\", \"encoded\", \"encoded\", \"encoding\", \"encoding\", \"encoding\", \"encoding\", \"encoding\", \"enter\", \"enter\", \"enter\", \"entity\", \"entity\", \"entity\", \"entitymanager\", \"enum\", \"environment\", \"environment\", \"environment\", \"erb\", \"erb\", \"err\", \"err\", \"err\", \"error\", \"error\", \"error\", \"error\", \"error\", \"escape\", \"escape\", \"escape\", \"eset\", \"eslint\", \"event\", \"event\", \"event\", \"example\", \"example\", \"example\", \"example\", \"example\", \"exe\", \"exe\", \"exe\", \"executable\", \"executable\", \"executable\", \"executor\", \"executor\", \"executorservice\", \"fa\", \"fa\", \"facebook\", \"facebook\", \"facet\", \"fe\", \"fe\", \"fe\", \"fff\", \"fff\", \"fft\", \"fibonacci\", \"fig\", \"file\", \"file\", \"file\", \"file\", \"file\", \"file\", \"file\", \"filesize\", \"filling\", \"filling\", \"firebase\", \"firing\", \"firing\", \"firstname\", \"fixing\", \"fixing\", \"fixture\", \"fixture\", \"fname\", \"folder\", \"folder\", \"folder\", \"font\", \"font\", \"font\", \"font\", \"foo\", \"foo\", \"foo\", \"foo\", \"form\", \"form\", \"form\", \"form\", \"format\", \"format\", \"format\", \"format\", \"format\", \"forstate\", \"fp\", \"fp\", \"fragment\", \"fragment\", \"fragment\", \"fruit\", \"func\", \"func\", \"func\", \"func\", \"function\", \"function\", \"function\", \"function\", \"function\", \"futuretask\", \"game\", \"game\", \"gdb\", \"gdb\", \"gem\", \"gem\", \"geom\", \"get\", \"get\", \"get\", \"get\", \"get\", \"get\", \"getid\", \"getid\", \"getresponse\", \"ggplot\", \"ggplot\", \"git\", \"git\", \"git\", \"github\", \"github\", \"github\", \"github\", \"gitignore\", \"gitignore\", \"gitlab\", \"gl\", \"gl\", \"globally\", \"globally\", \"globally\", \"globally\", \"gmail\", \"gpg\", \"gpio\", \"gpu\", \"gpu\", \"gradient\", \"gradle\", \"gradle\", \"grep\", \"grep\", \"grep\", \"grey\", \"gridview\", \"gridview\", \"groupby\", \"groupby\", \"grunt\", \"guid\", \"guid\", \"guid\", \"gulp\", \"gyp\", \"handshaker\", \"hash\", \"hash\", \"hash\", \"haskell\", \"heap\", \"height\", \"height\", \"height\", \"heroku\", \"heroku\", \"hex\", \"hex\", \"hex\", \"hg\", \"hh\", \"hh\", \"hibernate\", \"hibernate\", \"hibernate\", \"history\", \"history\", \"history\", \"html\", \"html\", \"html\", \"html\", \"http\", \"http\", \"http\", \"http\", \"http\", \"httpclient\", \"hyperlink\", \"iboutlet\", \"icloud\", \"id\", \"id\", \"id\", \"id\", \"id\", \"iframe\", \"ilist\", \"image\", \"image\", \"image\", \"image\", \"imageview\", \"import\", \"import\", \"import\", \"import\", \"import\", \"import\", \"indent\", \"indent\", \"indicates\", \"indicates\", \"init\", \"init\", \"init\", \"init\", \"init\", \"insecure\", \"insert\", \"insert\", \"insert\", \"inspector\", \"instagram\", \"install\", \"install\", \"install\", \"install\", \"installed\", \"installed\", \"installed\", \"installer\", \"installing\", \"installing\", \"int\", \"int\", \"int\", \"int\", \"integer\", \"integer\", \"intellij\", \"intellisense\", \"intellisense\", \"intellisense\", \"intent\", \"intent\", \"io\", \"io\", \"io\", \"io\", \"io\", \"ionic\", \"ipython\", \"ipython\", \"irrelevant\", \"irrelevant\", \"iso\", \"iso\", \"iso\", \"item\", \"item\", \"item\", \"item\", \"itemssource\", \"iterator\", \"jam\", \"jar\", \"jar\", \"jar\", \"java\", \"java\", \"java\", \"java\", \"java\", \"java\", \"java\", \"javascript\", \"javascript\", \"javascript\", \"javascript\", \"javascript\", \"jdbc\", \"jdbc\", \"jenkins\", \"jetty\", \"jframe\", \"join\", \"join\", \"join\", \"jpa\", \"jpa\", \"jpanel\", \"jquery\", \"jquery\", \"jquery\", \"json\", \"json\", \"json\", \"json\", \"jsp\", \"jupyter\", \"kafka\", \"karma\", \"key\", \"key\", \"key\", \"key\", \"keyboard\", \"keyboard\", \"keyboard\", \"keyboard\", \"km\", \"know\", \"know\", \"know\", \"know\", \"know\", \"label\", \"label\", \"label\", \"landscape\", \"lastname\", \"lat\", \"latitude\", \"latlng\", \"layer\", \"layer\", \"layer\", \"layer\", \"layer\", \"layout\", \"layout\", \"layout\", \"layout\", \"layout\", \"lf\", \"li\", \"li\", \"li\", \"lib\", \"lib\", \"lib\", \"libcmt\", \"library\", \"library\", \"library\", \"library\", \"libsass\", \"like\", \"like\", \"like\", \"like\", \"like\", \"line\", \"line\", \"line\", \"line\", \"line\", \"line\", \"linq\", \"linq\", \"linux\", \"linux\", \"linux\", \"linux\", \"lisp\", \"lisp\", \"list\", \"list\", \"list\", \"list\", \"lng\", \"lnk\", \"loadmodule\", \"locale\", \"locale\", \"locale\", \"locale\", \"logger\", \"logger\", \"logger\", \"logging\", \"logging\", \"logging\", \"login\", \"login\", \"login\", \"lon\", \"longitude\", \"loop\", \"loop\", \"loop\", \"lr\", \"lstm\", \"mac\", \"mac\", \"mac\", \"macro\", \"magento\", \"map\", \"map\", \"map\", \"map\", \"master\", \"master\", \"master\", \"master\", \"matplotlib\", \"matrix\", \"matrix\", \"maven\", \"maven\", \"memory\", \"memory\", \"memory\", \"memorystream\", \"memorystream\", \"mercurial\", \"merge\", \"merge\", \"merge\", \"mesz\", \"method\", \"method\", \"method\", \"method\", \"method\", \"migration\", \"migration\", \"migration\", \"migration\", \"mirror\", \"mm\", \"mm\", \"mm\", \"mocha\", \"modal\", \"modal\", \"modal\", \"module\", \"module\", \"module\", \"module\", \"mongodb\", \"mongodb\", \"mongodb\", \"mongoose\", \"mpi\", \"mr\", \"mr\", \"msbuild\", \"msvcr\", \"msvcrt\", \"multiprocessing\", \"multiprocessing\", \"mutex\", \"mutex\", \"mvc\", \"mvc\", \"mvc\", \"mvc\", \"mvvm\", \"mvvm\", \"myarray\", \"myfile\", \"myfile\", \"myfunction\", \"mymodule\", \"mysql\", \"mysql\", \"mysql\", \"mysql\", \"mysqldb\", \"na\", \"na\", \"na\", \"name\", \"name\", \"name\", \"name\", \"name\", \"name\", \"nan\", \"nav\", \"nav\", \"navbar\", \"navigationcontroller\", \"ndarray\", \"net\", \"net\", \"net\", \"net\", \"net\", \"net\", \"neural\", \"neural\", \"neuron\", \"neutral\", \"neutral\", \"new\", \"new\", \"new\", \"new\", \"new\", \"new\", \"newline\", \"newline\", \"ng\", \"ng\", \"nib\", \"nicol\", \"nil\", \"nil\", \"nil\", \"nil\", \"node\", \"node\", \"node\", \"node\", \"nodejs\", \"nodejs\", \"nodejs\", \"nonatomic\", \"notebook\", \"notebook\", \"notepad\", \"notepad\", \"notepad\", \"notification\", \"notification\", \"np\", \"np\", \"npm\", \"npm\", \"npm\", \"nsarray\", \"nsarray\", \"nsdate\", \"nserror\", \"nserror\", \"nsinteger\", \"nslog\", \"nslog\", \"nslog\", \"nsmutablearray\", \"nsmutablearray\", \"nsnumber\", \"nsstring\", \"nsstring\", \"nsstring\", \"nsurlconnection\", \"nt\", \"nt\", \"nuget\", \"number\", \"number\", \"number\", \"number\", \"numpy\", \"numpy\", \"nunit\", \"nunit\", \"oauth\", \"objc\", \"objc\", \"object\", \"object\", \"object\", \"object\", \"object\", \"objectid\", \"objectid\", \"observablecollection\", \"one\", \"one\", \"one\", \"one\", \"one\", \"one\", \"openocd\", \"operator\", \"operator\", \"oracle\", \"oracle\", \"oracle\", \"orange\", \"orange\", \"orange\", \"org\", \"org\", \"org\", \"org\", \"organize\", \"organize\", \"orientation\", \"orientation\", \"os\", \"os\", \"output\", \"output\", \"output\", \"output\", \"output\", \"package\", \"package\", \"package\", \"page\", \"page\", \"page\", \"page\", \"panda\", \"panda\", \"parentid\", \"parentid\", \"parentrunner\", \"parquet\", \"particle\", \"path\", \"path\", \"path\", \"path\", \"path\", \"pd\", \"pear\", \"pear\", \"peer\", \"peer\", \"performance\", \"performance\", \"performance\", \"permitted\", \"permitted\", \"persistence\", \"persistence\", \"persistence\", \"pg\", \"pg\", \"pg\", \"phpmyadmin\", \"pickle\", \"pickle\", \"pip\", \"pipe\", \"pipe\", \"pipe\", \"pipe\", \"pixel\", \"pixel\", \"plot\", \"plot\", \"plotting\", \"plt\", \"pm\", \"pm\", \"pm\", \"pm\", \"point\", \"point\", \"point\", \"point\", \"point\", \"pointer\", \"pointer\", \"pointer\", \"pointer\", \"pom\", \"pool\", \"pool\", \"pool\", \"popen\", \"populate\", \"populate\", \"populated\", \"populated\", \"popup\", \"popup\", \"popup\", \"portaudiomodule\", \"position\", \"position\", \"position\", \"position\", \"post\", \"post\", \"post\", \"post\", \"postgres\", \"postgres\", \"postgresql\", \"postgresql\", \"powershell\", \"powershell\", \"press\", \"press\", \"press\", \"pressed\", \"pressed\", \"pressed\", \"print\", \"print\", \"print\", \"print\", \"print\", \"printf\", \"proc\", \"proc\", \"procedure\", \"procedure\", \"procedure\", \"programmatically\", \"programmatically\", \"programmatically\", \"programmatically\", \"programmatically\", \"programmatically\", \"project\", \"project\", \"project\", \"project\", \"project\", \"project\", \"promise\", \"property\", \"property\", \"property\", \"property\", \"property\", \"psycopg\", \"psycopg\", \"pthread\", \"pthread\", \"ptr\", \"public\", \"public\", \"public\", \"public\", \"publickeytoken\", \"pull\", \"pull\", \"pull\", \"pull\", \"pull\", \"push\", \"push\", \"push\", \"push\", \"push\", \"px\", \"px\", \"py\", \"py\", \"py\", \"py\", \"pyaudio\", \"pycharm\", \"pyplot\", \"python\", \"python\", \"python\", \"python\", \"python\", \"quartz\", \"query\", \"query\", \"query\", \"question\", \"question\", \"question\", \"question\", \"quicksort\", \"radian\", \"radius\", \"range\", \"range\", \"range\", \"rax\", \"rcx\", \"rdd\", \"rdx\", \"react\", \"react\", \"rebase\", \"recv\", \"redirect\", \"redirect\", \"redis\", \"reducer\", \"regex\", \"regex\", \"regex\", \"relu\", \"remote\", \"remote\", \"remote\", \"remote\", \"remote\", \"replace\", \"replace\", \"replace\", \"replace\", \"replace\", \"repo\", \"repo\", \"repo\", \"repo\", \"repository\", \"repository\", \"repository\", \"repository\", \"repository\", \"req\", \"request\", \"request\", \"request\", \"requestmethod\", \"resharper\", \"resize\", \"resize\", \"resized\", \"response\", \"response\", \"response\", \"ret\", \"return\", \"return\", \"return\", \"return\", \"return\", \"revert\", \"rollback\", \"rollback\", \"rotate\", \"route\", \"route\", \"router\", \"rpc\", \"run\", \"run\", \"run\", \"run\", \"running\", \"running\", \"running\", \"rvm\", \"rw\", \"sa\", \"sa\", \"salt\", \"salt\", \"saml\", \"sb\", \"scatter\", \"schema\", \"schema\", \"schema\", \"schema\", \"scheme\", \"scheme\", \"scheme\", \"scipy\", \"scrapy\", \"screen\", \"screen\", \"screen\", \"screen\", \"script\", \"script\", \"script\", \"script\", \"script\", \"scroll\", \"scroll\", \"scroll\", \"scrolled\", \"scrolling\", \"scrolling\", \"sdl\", \"sed\", \"sed\", \"segue\", \"selector\", \"selector\", \"selector\", \"selector\", \"self\", \"self\", \"self\", \"self\", \"self\", \"selftest\", \"semaphore\", \"semaphore\", \"send\", \"send\", \"send\", \"sequential\", \"serializer\", \"serializer\", \"series\", \"series\", \"series\", \"server\", \"server\", \"server\", \"server\", \"service\", \"service\", \"service\", \"service\", \"servlet\", \"sessionimpl\", \"setopt\", \"sha\", \"sha\", \"sha\", \"shadow\", \"sharedapplication\", \"shell\", \"shell\", \"shell\", \"shell\", \"shift\", \"shift\", \"shift\", \"ship\", \"ship\", \"shipping\", \"shortcut\", \"shortcut\", \"shortcut\", \"shut\", \"shut\", \"signalr\", \"significantly\", \"silent\", \"size\", \"size\", \"size\", \"size\", \"sized\", \"sized\", \"sizeof\", \"sn\", \"snow\", \"snow\", \"sockaddr\", \"solr\", \"sort\", \"sort\", \"sort\", \"sorted\", \"soup\", \"space\", \"space\", \"space\", \"space\", \"space\", \"space\", \"spark\", \"split\", \"split\", \"split\", \"split\", \"spring\", \"spring\", \"spring\", \"spring\", \"springapplication\", \"springframework\", \"springframework\", \"sql\", \"sql\", \"sql\", \"sql\", \"sqlclient\", \"sqlcommand\", \"sqlconnection\", \"sqlconnection\", \"sqlite\", \"sqlite\", \"sqlite\", \"sqlite\", \"ssh\", \"ssh\", \"ssh\", \"ssl\", \"ssl\", \"star\", \"star\", \"startdate\", \"std\", \"std\", \"stderr\", \"stderr\", \"stderr\", \"stdin\", \"stdin\", \"stdin\", \"stdin\", \"stdout\", \"stdout\", \"stdout\", \"storyboard\", \"storyboard\", \"str\", \"str\", \"str\", \"string\", \"string\", \"string\", \"string\", \"string\", \"stringbuilder\", \"stringio\", \"stringwithformat\", \"struct\", \"studio\", \"studio\", \"studio\", \"studio\", \"studio\", \"style\", \"style\", \"style\", \"style\", \"sublime\", \"subprocess\", \"substring\", \"substring\", \"subtotal\", \"subversion\", \"subversion\", \"succeeded\", \"succeeded\", \"sudo\", \"sudo\", \"sum\", \"svg\", \"svn\", \"svn\", \"svn\", \"swagger\", \"swift\", \"swift\", \"swift\", \"swift\", \"swing\", \"swing\", \"swing\", \"symfony\", \"symfony\", \"tab\", \"tab\", \"tab\", \"tab\", \"tab\", \"table\", \"table\", \"table\", \"table\", \"tableview\", \"tar\", \"tb\", \"tb\", \"tbl\", \"tbl\", \"td\", \"td\", \"tensor\", \"tensorflow\", \"terminal\", \"terminal\", \"terminal\", \"terminal\", \"terminated\", \"test\", \"test\", \"test\", \"test\", \"text\", \"text\", \"text\", \"text\", \"text\", \"text\", \"textblock\", \"textview\", \"tf\", \"tfs\", \"theme\", \"theme\", \"thread\", \"thread\", \"thread\", \"threadedsortingcomparsion\", \"time\", \"time\", \"time\", \"time\", \"time\", \"timeit\", \"timeit\", \"token\", \"token\", \"tooltip\", \"tooltip\", \"top\", \"top\", \"top\", \"top\", \"tpm\", \"train\", \"trans\", \"trans\", \"transaction\", \"transaction\", \"transaction\", \"transactional\", \"transactional\", \"transforms\", \"transforms\", \"travelguard\", \"treeview\", \"tt\", \"tuple\", \"two\", \"two\", \"two\", \"two\", \"two\", \"type\", \"type\", \"type\", \"type\", \"typescript\", \"typescript\", \"ubuntu\", \"ubuntu\", \"ubuntu\", \"udp\", \"udp\", \"uialertview\", \"uiapplication\", \"uibutton\", \"uicolor\", \"uiimage\", \"uilabel\", \"uinavigationbar\", \"uinavigationcontroller\", \"uitableview\", \"uitableview\", \"uitextfield\", \"uiview\", \"uiview\", \"uiviewcontroller\", \"uiviewcontroller\", \"uk\", \"uk\", \"undeclared\", \"unicode\", \"unicode\", \"unicode\", \"uninstall\", \"unsigned\", \"uops\", \"uri\", \"uri\", \"url\", \"url\", \"url\", \"url\", \"urllib\", \"urlopen\", \"use\", \"use\", \"use\", \"use\", \"use\", \"use\", \"user\", \"user\", \"user\", \"user\", \"user\", \"usercontrol\", \"userinfo\", \"using\", \"using\", \"using\", \"using\", \"using\", \"using\", \"usr\", \"usr\", \"usr\", \"utf\", \"utf\", \"utf\", \"utf\", \"utf\", \"uuid\", \"uuid\", \"vagrant\", \"value\", \"value\", \"value\", \"value\", \"value\", \"value\", \"varchar\", \"vec\", \"vec\", \"vector\", \"vector\", \"velocity\", \"version\", \"version\", \"version\", \"version\", \"version\", \"version\", \"vi\", \"vi\", \"vi\", \"video\", \"video\", \"video\", \"video\", \"view\", \"view\", \"view\", \"view\", \"view\", \"view\", \"viewcontroller\", \"viewcontroller\", \"viewdidload\", \"viewdidload\", \"viewmodel\", \"viewmodel\", \"vim\", \"virtualenv\", \"visual\", \"visual\", \"visual\", \"visual\", \"volume\", \"volume\", \"volume\", \"volume\", \"want\", \"want\", \"want\", \"want\", \"want\", \"want\", \"want\", \"war\", \"war\", \"way\", \"way\", \"way\", \"way\", \"way\", \"wb\", \"weather\", \"web\", \"web\", \"web\", \"web\", \"webpack\", \"webroot\", \"webview\", \"whitespace\", \"whitespace\", \"width\", \"width\", \"width\", \"window\", \"window\", \"window\", \"window\", \"window\", \"window\", \"word\", \"word\", \"word\", \"word\", \"word\", \"worksheet\", \"would\", \"would\", \"would\", \"would\", \"would\", \"wpf\", \"wpf\", \"wpf\", \"wpf\", \"xamarin\", \"xaml\", \"xaml\", \"xaml\", \"xcode\", \"xcode\", \"xcode\", \"xcode\", \"xcode\", \"xe\", \"xff\", \"xffffff\", \"xib\", \"xib\", \"xmlhttp\", \"xmm\", \"xpath\", \"xsl\", \"xslt\", \"xslt\", \"xslt\", \"xxxxx\", \"yarn\", \"yeoman\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yml\", \"yml\", \"ymm\", \"yyyy\", \"yyyy\", \"zoom\", \"zsh\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [11, 10, 1, 20, 14, 13, 5, 3, 7, 2, 16, 4, 18, 8, 15, 6, 17, 12, 19, 9]};\n",
       "\n",
       "function LDAvis_load_lib(url, callback){\n",
       "  var s = document.createElement('script');\n",
       "  s.src = url;\n",
       "  s.async = true;\n",
       "  s.onreadystatechange = s.onload = callback;\n",
       "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
       "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "}\n",
       "\n",
       "if(typeof(LDAvis) !== \"undefined\"){\n",
       "   // already loaded: just create the visualization\n",
       "   !function(LDAvis){\n",
       "       new LDAvis(\"#\" + \"ldavis_el178651404835609230243877698305\", ldavis_el178651404835609230243877698305_data);\n",
       "   }(LDAvis);\n",
       "}else if(typeof define === \"function\" && define.amd){\n",
       "   // require.js is available: use it to load d3/LDAvis\n",
       "   require.config({paths: {d3: \"https://d3js.org/d3.v5\"}});\n",
       "   require([\"d3\"], function(d3){\n",
       "      window.d3 = d3;\n",
       "      LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.1/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
       "        new LDAvis(\"#\" + \"ldavis_el178651404835609230243877698305\", ldavis_el178651404835609230243877698305_data);\n",
       "      });\n",
       "    });\n",
       "}else{\n",
       "    // require.js not available: dynamically load d3 & LDAvis\n",
       "    LDAvis_load_lib(\"https://d3js.org/d3.v5.js\", function(){\n",
       "         LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.1/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
       "                 new LDAvis(\"#\" + \"ldavis_el178651404835609230243877698305\", ldavis_el178651404835609230243877698305_data);\n",
       "            })\n",
       "         });\n",
       "}\n",
       "</script>"
      ],
      "text/plain": [
       "PreparedData(topic_coordinates=              x         y  topics  cluster       Freq\n",
       "topic                                                \n",
       "10     0.108312 -0.138267       1        1  37.236452\n",
       "9      0.161088 -0.145453       2        1  24.048938\n",
       "0      0.198758 -0.128786       3        1  11.979815\n",
       "19     0.230647 -0.084159       4        1   7.680899\n",
       "13     0.202992  0.134794       5        1   2.448561\n",
       "12     0.218799  0.106115       6        1   2.005062\n",
       "4      0.026388  0.221702       7        1   1.549259\n",
       "2      0.007477  0.190672       8        1   1.440863\n",
       "6     -0.053815  0.225017       9        1   1.270761\n",
       "1     -0.072480  0.039464      10        1   1.141011\n",
       "15    -0.110210  0.008762      11        1   1.025540\n",
       "3     -0.117662  0.012827      12        1   1.025271\n",
       "17    -0.118738 -0.021901      13        1   0.956986\n",
       "7     -0.116133 -0.042131      14        1   0.935829\n",
       "14    -0.105674 -0.055535      15        1   0.898516\n",
       "5     -0.102464 -0.059862      16        1   0.887756\n",
       "16    -0.091523 -0.065205      17        1   0.873223\n",
       "11    -0.091643 -0.065178      18        1   0.870528\n",
       "18    -0.088079 -0.066193      19        1   0.863834\n",
       "8     -0.086040 -0.066683      20        1   0.860896, topic_info=           Term        Freq       Total Category  logprob  loglift\n",
       "4245     string  866.000000  866.000000  Default  30.0000  30.0000\n",
       "2612        map  490.000000  490.000000  Default  29.0000  29.0000\n",
       "2901       node  469.000000  469.000000  Default  28.0000  28.0000\n",
       "1850        git  442.000000  442.000000  Default  27.0000  27.0000\n",
       "3917       self  412.000000  412.000000  Default  26.0000  26.0000\n",
       "...         ...         ...         ...      ...      ...      ...\n",
       "332   available    0.361343  131.430007  Topic20  -8.6538  -1.1414\n",
       "2511        lnk    0.361343    9.260961  Topic20  -8.6538   1.5112\n",
       "957         crt    0.361343   14.002478  Topic20  -8.6538   1.0978\n",
       "2786     msvcrt    0.361343    6.618136  Topic20  -8.6538   1.8472\n",
       "2845        nav    0.361343   30.374326  Topic20  -8.6538   0.3234\n",
       "\n",
       "[1046 rows x 6 columns], token_table=      Topic      Freq                 Term\n",
       "term                                      \n",
       "2         2  0.624047                  aac\n",
       "3        10  0.866399                  aar\n",
       "6         3  0.613365                  abi\n",
       "14        5  0.374143  abstractbeanfactory\n",
       "47        3  0.357989           actionpack\n",
       "...     ...       ...                  ...\n",
       "4984     19  0.898330                  ymm\n",
       "4988      2  0.027198                 yyyy\n",
       "4988      6  0.897518                 yyyy\n",
       "4996      4  0.912311                 zoom\n",
       "4998      8  0.834049                  zsh\n",
       "\n",
       "[1865 rows x 3 columns], R=30, lambda_step=0.01, plot_opts={'xlab': 'PC1', 'ylab': 'PC2'}, topic_order=[11, 10, 1, 20, 14, 13, 5, 3, 7, 2, 16, 4, 18, 8, 15, 6, 17, 12, 19, 9])"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from __future__ import print_function\n",
    "import pyLDAvis\n",
    "\n",
    "import pyLDAvis.sklearn\n",
    "pyLDAvis.enable_notebook()\n",
    "pyLDAvis.sklearn.prepare(lda, questions_features, vectorizer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c9f6840",
   "metadata": {},
   "source": [
    "### CrÃ©ation de la Pipeline regroupant le prÃ©processing et le modÃ¨le LDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "9340f5eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pour chaque question, on applique la fonction qui rÃ©cupÃ¨re les mots clÃ©s des questions posÃ©es. \n",
    "def clearing_questions(Body):\n",
    "    # On crÃ©Ã© une liste vide dÃ©stinÃ©e Ã  receullir les mots de nos questions. \n",
    "    questions_cleared =[]\n",
    "    for question in Body:\n",
    "        cleared_question = question_to_words_BW(question)\n",
    "        questions_cleared.append(cleared_question)\n",
    "        \n",
    "    return questions_cleared\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "adad4f22",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/sklearn/experimental/enable_hist_gradient_boosting.py:16: UserWarning: Since version 1.0, it is not needed to import enable_hist_gradient_boosting anymore. HistGradientBoostingClassifier and HistGradientBoostingRegressor are now stable and can be normally imported from sklearn.ensemble.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "from sklearn import datasets, preprocessing, model_selection, ensemble, pipeline\n",
    "from sklearn.experimental import enable_hist_gradient_boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "4343e1da",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import FunctionTransformer\n",
    "from sklearn.decomposition import LatentDirichletAllocation\n",
    "n_topics = 20\n",
    "\n",
    "from sklearn.pipeline import Pipeline\n",
    "transformer_1 = FunctionTransformer(clearing_questions)\n",
    "\"\"\"\n",
    "pipeline_BOW = Pipeline([\n",
    "   ('transformer', transformer_1), ('vectorizer',CountVectorizer(analyzer = \"word\", max_features = 5000)),\n",
    "   ('LDA',LatentDirichletAllocation(n_components = n_topics, max_iter = 5,\\\n",
    "                                                                     learning_method='online',learning_offset=50.,random_state=0))\n",
    "])\n",
    "\"\"\"\n",
    "pipeline_BOW = Pipeline([\n",
    "   ('transformer', transformer_1), ('vectorizer',TfidfVectorizer(analyzer = \"word\", max_features = 5000)),\n",
    "   ('LDA',LatentDirichletAllocation(n_components = n_topics, max_iter = 5,\\\n",
    "                                                                     learning_method='online',learning_offset=50.,random_state=0))\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "06f51c76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('transformer',\n",
       "                 FunctionTransformer(func=<function clearing_questions at 0x7fc531fad670>)),\n",
       "                ('vectorizer', TfidfVectorizer(max_features=5000)),\n",
       "                ('LDA',\n",
       "                 LatentDirichletAllocation(learning_method='online',\n",
       "                                           learning_offset=50.0, max_iter=5,\n",
       "                                           n_components=20, random_state=0))])"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline_BOW.fit(data.Body)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "a1546a26",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_topic_list(model, feature_names, no_top_words):\n",
    "    topic_list = pd.DataFrame()\n",
    "    for topic_idx, topic in enumerate(model.components_):\n",
    "        topic_list[topic_idx] = [feature_names[i] for i in topic.argsort()[:-no_top_words - 1:-1]]\n",
    "    return topic_list\n",
    "\n",
    "def tag_generator(questions):\n",
    "    for question in questions:\n",
    "        new_document_topic = np.where(question == question.max())\n",
    "        new_document_topic = int(new_document_topic[0])\n",
    "        print('La rÃ©partition des proba d\\'appartenance aux diffÃ©rents TOPICS est \\n  ', question)\n",
    "        print('Les tags suggÃ©rÃ©s pour ce document sont :  \\n',topic_list.T.iloc[new_document_topic,:5])\n",
    "    return topic_list.T.iloc[new_document_topic,:5].tolist()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "19e9b196",
   "metadata": {},
   "outputs": [],
   "source": [
    "no_top_words = 5\n",
    "topic_list = create_topic_list(pipeline_BOW['LDA'],pipeline_BOW['vectorizer'].get_feature_names_out(),no_top_words)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b554c45",
   "metadata": {},
   "source": [
    "### Essai de la pipeline avant API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "27fd0783",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La rÃ©partition des proba d'appartenance aux diffÃ©rents TOPICS est \n",
      "   [0.21675889 0.00917852 0.00917852 0.00917852 0.00917852 0.00917852\n",
      " 0.00917852 0.00917852 0.00917852 0.00917852 0.61802769 0.00917852\n",
      " 0.00917852 0.00917852 0.00917852 0.00917852 0.00917852 0.00917852\n",
      " 0.00917852 0.00917852]\n",
      "Les tags suggÃ©rÃ©s pour ce document sont :  \n",
      " 0       class\n",
      "1       value\n",
      "2    function\n",
      "3      object\n",
      "4        like\n",
      "Name: 10, dtype: object\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['class', 'value', 'function', 'object', 'like']"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_text = pipeline_BOW.transform([data.Body[10]])\n",
    "tag_generator(test_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bc369df",
   "metadata": {},
   "source": [
    "# API Tf-Idf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3258340",
   "metadata": {},
   "outputs": [],
   "source": [
    "from fast_dash import FastDash\n",
    "from fast_dash.Components import Text\n",
    "\n",
    "# Step 1: Define your model inference\n",
    "def text_to_text_function(question):\n",
    "    \n",
    "    result = pipeline_BOW.transform([question])\n",
    "    result = tag_generator(result)\n",
    "    \n",
    "    return result\n",
    "\n",
    "# Step 2: Specify the input and output components\n",
    "app = FastDash(callback_fn=text_to_text_function, \n",
    "                inputs=Text, \n",
    "                outputs=Text, \n",
    "                title='Unsupervised Question TAG Generator')\n",
    "\n",
    "# Step 3: Run your app!\n",
    "app.run()\n",
    "\n",
    "# * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85803685",
   "metadata": {},
   "source": [
    "# WORD2VEC Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "cd0c41b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://stackoverflow.com/questions/66268/what-is-the-best-cc-coding-style-closed\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:337: MarkupResemblesLocatorWarning: \".\" looks like a directory name, not markup. You may want to open a file found in this directory and pass the filehandle into Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://lists.webkit.org/pipermail/webkit-dev/2008-September/005019.html\n",
      "https://lists.webkit.org/pipermail/webkit-dev/2009-June/008182.html\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://github.com/ask/carrot/tree/master\n",
      "http://github.com/ask/celery/tree/master\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://source.android.com/source/jack\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://runnable.com/UWRl3KlLuONCAACG/read-files-from-filesystem-in-python\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://www.matthidinger.com/images/onion-arch.png\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://docs.jboss.org/hibernate/orm/4.0/devguide/en-US/html/ch05.html.\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://hub.docker.com/r/microsoft/iis/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://writingminds.github.io/ffmpeg-android-java\n",
      "https://github.com/WritingMinds/ffmpeg-android-java\n",
      "https://github.com/havlenapetr/FFMpeg\n",
      "https://github.com/appunite/AndroidFFmpeg\n",
      "https://github.com/WritingMinds/ffmpeg-android\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://dewitters.koonsolo.com/gamemvc.html\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2007/july/enough-with-the-rainbow-tables-what-you-need-to-know-about-secure-password-schemes/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://github.com/dreftymac/stackoverflow.questions.998832\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://lostechies.com/jimmybogard/2009/06/30/how-we-do-mvc-view-models/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://code.google.com/p/android/issues/detail?id=22822\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://en.wikipedia.org/wiki/Persistent_data_structure).\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://docs.oracle.com/javaee/6/api/javax/servlet/ServletContextListener.html\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://pastebin.com/MzPENmHp\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://github.com/cgeo7/spring-rest-example\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://gist.github.com/axefrog/c347bf0f5e0723cbd09b1aaed6ec6fc6\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://james.newtonking.com/json/help/?topic=html/M_Newtonsoft_Json_JsonConvert_DeserializeObject.htm#seeAlsoToggle\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://www.uploadify.com/demos/\n",
      "http://www.zamzar.com/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://cran.r-project.org/web/packages/gcbd/vignettes/gcbd.pdf.\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://jsfiddle.net/RagKH/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://jsfiddle.net/ezZr5/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://code.google.com/p/google-api-objectivec-client/wiki/Introduction\n",
      "http://code.google.com/p/google-api-objectivec-client/wiki/BuildingTheLibrary\n",
      "http://code.google.com/p/gtm-oauth2/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://github.com/jeromeetienne/jquery-qrcode\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://forums.java.net/jive/thread.jspa?threadID=62657&tstart=0\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://doc.qtsoftware.com/4.5/deployment-windows.html\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:337: MarkupResemblesLocatorWarning: \"..\" looks like a directory name, not markup. You may want to open a file found in this directory and pass the filehandle into Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://issues.jenkins-ci.org/browse/JENKINS-24590\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://developer.xamarin.com/guides/cross-platform/getting_started/installation/uninstalling_xamarin/#Using_the_Uninstall_Script\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://wordpress.org/support/topic/read-this-first-wordpress-45-master-list#post-8271654\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://www.mydomain.com/myimage.jpg).\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://github.com/danialfarid/angular-file-upload\n",
      "Thanks.\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://dl.dropboxusercontent.com/u/35758776/xenxbd/contrastic/index.html#parallux-wrapper-04\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://jsfiddle.net/Rqx8T/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://java.sun.com/javase/technologies/realtime/index.jsp\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://sites.google.com/site/x32abi/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://example.com/data/...\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://www.devlounge.net/articles/using-ajax-with-your-wordpress-plugin\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://openssl.6102.n7.nabble.com/check-certificate-chain-in-a-pem-file-td43871.html\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://www.outlinenone.com/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://github.com/MarkNijhof/Fohjin\n",
      "http://cre8ivethought.com/blog/2009/11/12/cqrs--la-greg-young/\n",
      "http://cre8ivethought.com/blog/2009/11/28/cqrs-trying-to-make-it-re-usable/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://bootply.com/92446\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://remote-domain.com/script.pl.\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://en.wikipedia.org/wiki/Two-phase_commit_protocol\n",
      "http://ws-rest.org/2014/sites/default/files/wsrest2014_submission_7.pdf\n",
      "https://www.tigerteam.dk/2014/micro-services-its-not-only-the-size-that-matters-its-also-how-you-use-them-part-1/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://developer.apple.com/documentation/uikit/uivisualeffectview#//apple_ref/occ/instp/UIVisualEffectView/contentView\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://zookeeper.apache.org/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://plnkr.co/edit/3qcIbMvJk19OvokcHe2N?p=preview\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://www.reddit.com/r/cpp/comments/7c208c/is_constexpr_a_macro_that_check_if_an_expression/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://fluidkit.codeplex.com/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://mangastream.com\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://en.wikipedia.org/wiki/3D_projection\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://cran.r-project.org/web/packages/qdap/qdap.pdf\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://www.experts-exchange.com/Microsoft/Development/VSTO/Q_23635459.html\n",
      "Thanks.\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://html5demos.com/history\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://www.jooq.org\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://www-asp.azureedge.net/v-2016-09-01-001/media/4773381/lifecycle-of-an-aspnet-mvc-5-application.pdf\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://medium.cobeisfresh.com/why-you-shouldn-t-use-delegates-in-swift-7ef808a7f16b#.hqb7zrc1v\n",
      "2.\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://developer.android.com/training/articles/user-data-ids.\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://blog.andrewray.me/react-es6-autobinding-and-createclass/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://android-developers.blogspot.nl/2015/11/android-studio-20-preview.html\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://github.com/parkwookyun/firebase-angular-board\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://en.cppreference.com/w/cpp/atomic/memory_order\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://jsfiddle.net/4wqEm/2/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://www.barzilay.org/Swindle.\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://code.google.com/p/selenium/wiki/PythonBindings\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"https://codetransient.wordpress.com/2019/06/22/sftp-secured-file-transfer-protocol/\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/bs4/__init__.py:431: MarkupResemblesLocatorWarning: \"http://docs.oracle.com/javase/tutorial/essential/concurrency/guardmeth.html\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "sentences = []\n",
    "for question in data['Body']:\n",
    "    sentences += (question_to_sentences(question,tokenizer))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "a5fc6b1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/gensim/matutils.py:22: DeprecationWarning: Please use `triu` from the `scipy.linalg` namespace, the `scipy.linalg.special_matrices` namespace is deprecated.\n",
      "  from scipy.linalg.special_matrices import triu\n",
      "2022-04-20 20:04:39,571 : INFO : collecting all words and their counts\n",
      "2022-04-20 20:04:39,571 : INFO : PROGRESS: at sentence #0, processed 0 words, keeping 0 word types\n",
      "2022-04-20 20:04:39,596 : INFO : PROGRESS: at sentence #10000, processed 202430 words, keeping 15018 word types\n",
      "2022-04-20 20:04:39,624 : INFO : PROGRESS: at sentence #20000, processed 420872 words, keeping 23939 word types\n",
      "2022-04-20 20:04:39,651 : INFO : PROGRESS: at sentence #30000, processed 635795 words, keeping 30743 word types\n",
      "2022-04-20 20:04:39,679 : INFO : PROGRESS: at sentence #40000, processed 863534 words, keeping 37826 word types\n",
      "2022-04-20 20:04:39,705 : INFO : PROGRESS: at sentence #50000, processed 1069872 words, keeping 42437 word types\n",
      "2022-04-20 20:04:39,734 : INFO : PROGRESS: at sentence #60000, processed 1296421 words, keeping 48215 word types\n",
      "2022-04-20 20:04:39,764 : INFO : PROGRESS: at sentence #70000, processed 1537860 words, keeping 54505 word types\n",
      "2022-04-20 20:04:39,793 : INFO : PROGRESS: at sentence #80000, processed 1772769 words, keeping 60045 word types\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-04-20 20:04:39,822 : INFO : PROGRESS: at sentence #90000, processed 1993026 words, keeping 64598 word types\n",
      "2022-04-20 20:04:39,852 : INFO : PROGRESS: at sentence #100000, processed 2225962 words, keeping 69693 word types\n",
      "2022-04-20 20:04:39,883 : INFO : PROGRESS: at sentence #110000, processed 2477671 words, keeping 75076 word types\n",
      "2022-04-20 20:04:39,914 : INFO : PROGRESS: at sentence #120000, processed 2719092 words, keeping 80406 word types\n",
      "2022-04-20 20:04:39,945 : INFO : PROGRESS: at sentence #130000, processed 2962169 words, keeping 85446 word types\n",
      "2022-04-20 20:04:39,978 : INFO : PROGRESS: at sentence #140000, processed 3194443 words, keeping 89723 word types\n",
      "2022-04-20 20:04:40,010 : INFO : PROGRESS: at sentence #150000, processed 3408755 words, keeping 93329 word types\n",
      "2022-04-20 20:04:40,041 : INFO : PROGRESS: at sentence #160000, processed 3627376 words, keeping 96898 word types\n",
      "2022-04-20 20:04:40,072 : INFO : PROGRESS: at sentence #170000, processed 3855928 words, keeping 100706 word types\n",
      "2022-04-20 20:04:40,105 : INFO : PROGRESS: at sentence #180000, processed 4103394 words, keeping 105307 word types\n",
      "2022-04-20 20:04:40,133 : INFO : PROGRESS: at sentence #190000, processed 4324029 words, keeping 108885 word types\n",
      "2022-04-20 20:04:40,163 : INFO : PROGRESS: at sentence #200000, processed 4549978 words, keeping 112649 word types\n",
      "2022-04-20 20:04:40,192 : INFO : PROGRESS: at sentence #210000, processed 4774745 words, keeping 116083 word types\n",
      "2022-04-20 20:04:40,223 : INFO : PROGRESS: at sentence #220000, processed 5001216 words, keeping 119518 word types\n",
      "2022-04-20 20:04:40,253 : INFO : PROGRESS: at sentence #230000, processed 5225072 words, keeping 122908 word types\n",
      "2022-04-20 20:04:40,287 : INFO : PROGRESS: at sentence #240000, processed 5466053 words, keeping 126809 word types\n",
      "2022-04-20 20:04:40,318 : INFO : PROGRESS: at sentence #250000, processed 5690518 words, keeping 130034 word types\n",
      "2022-04-20 20:04:40,349 : INFO : PROGRESS: at sentence #260000, processed 5922580 words, keeping 133264 word types\n",
      "2022-04-20 20:04:40,381 : INFO : PROGRESS: at sentence #270000, processed 6160719 words, keeping 137019 word types\n",
      "2022-04-20 20:04:40,413 : INFO : PROGRESS: at sentence #280000, processed 6395679 words, keeping 140507 word types\n",
      "2022-04-20 20:04:40,443 : INFO : PROGRESS: at sentence #290000, processed 6628115 words, keeping 143851 word types\n",
      "2022-04-20 20:04:40,475 : INFO : PROGRESS: at sentence #300000, processed 6859487 words, keeping 147125 word types\n",
      "2022-04-20 20:04:40,509 : INFO : PROGRESS: at sentence #310000, processed 7116383 words, keeping 150959 word types\n",
      "2022-04-20 20:04:40,543 : INFO : PROGRESS: at sentence #320000, processed 7357335 words, keeping 154553 word types\n",
      "2022-04-20 20:04:40,581 : INFO : PROGRESS: at sentence #330000, processed 7594902 words, keeping 158217 word types\n",
      "2022-04-20 20:04:40,619 : INFO : PROGRESS: at sentence #340000, processed 7838144 words, keeping 161462 word types\n",
      "2022-04-20 20:04:40,633 : INFO : collected 162911 word types from a corpus of 7922847 raw words and 343523 sentences\n",
      "2022-04-20 20:04:40,634 : INFO : Creating a fresh vocabulary\n",
      "2022-04-20 20:04:40,733 : INFO : Word2Vec lifecycle event {'msg': 'effective_min_count=10 retains 25259 unique words (15.50478482116002%% of original 162911, drops 137652)', 'datetime': '2022-04-20T20:04:40.732925', 'gensim': '4.1.2', 'python': '3.9.12 (main, Apr  5 2022, 01:53:17) \\n[Clang 12.0.0 ]', 'platform': 'macOS-10.16-x86_64-i386-64bit', 'event': 'prepare_vocab'}\n",
      "2022-04-20 20:04:40,733 : INFO : Word2Vec lifecycle event {'msg': 'effective_min_count=10 leaves 7603642 word corpus (95.97108211227605%% of original 7922847, drops 319205)', 'datetime': '2022-04-20T20:04:40.733726', 'gensim': '4.1.2', 'python': '3.9.12 (main, Apr  5 2022, 01:53:17) \\n[Clang 12.0.0 ]', 'platform': 'macOS-10.16-x86_64-i386-64bit', 'event': 'prepare_vocab'}\n",
      "2022-04-20 20:04:40,841 : INFO : deleting the raw counts dictionary of 162911 items\n",
      "2022-04-20 20:04:40,843 : INFO : sample=0.001 downsamples 40 most-common words\n",
      "2022-04-20 20:04:40,844 : INFO : Word2Vec lifecycle event {'msg': 'downsampling leaves estimated 6262784.619247678 word corpus (82.4%% of prior 7603642)', 'datetime': '2022-04-20T20:04:40.844492', 'gensim': '4.1.2', 'python': '3.9.12 (main, Apr  5 2022, 01:53:17) \\n[Clang 12.0.0 ]', 'platform': 'macOS-10.16-x86_64-i386-64bit', 'event': 'prepare_vocab'}\n",
      "2022-04-20 20:04:41,036 : INFO : estimated required memory for 25259 words and 300 dimensions: 73251100 bytes\n",
      "2022-04-20 20:04:41,036 : INFO : resetting layer weights\n",
      "2022-04-20 20:04:41,088 : INFO : Word2Vec lifecycle event {'update': False, 'trim_rule': 'None', 'datetime': '2022-04-20T20:04:41.087982', 'gensim': '4.1.2', 'python': '3.9.12 (main, Apr  5 2022, 01:53:17) \\n[Clang 12.0.0 ]', 'platform': 'macOS-10.16-x86_64-i386-64bit', 'event': 'build_vocab'}\n",
      "2022-04-20 20:04:41,088 : INFO : Word2Vec lifecycle event {'msg': 'training model with 5 workers on 25259 vocabulary and 300 features, using sg=0 hs=0 sample=0.001 negative=5 window=10 shrink_windows=True', 'datetime': '2022-04-20T20:04:41.088515', 'gensim': '4.1.2', 'python': '3.9.12 (main, Apr  5 2022, 01:53:17) \\n[Clang 12.0.0 ]', 'platform': 'macOS-10.16-x86_64-i386-64bit', 'event': 'train'}\n",
      "2022-04-20 20:04:42,106 : INFO : EPOCH 1 - PROGRESS: at 26.05% examples, 1541935 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:43,114 : INFO : EPOCH 1 - PROGRESS: at 49.83% examples, 1516863 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:44,117 : INFO : EPOCH 1 - PROGRESS: at 75.21% examples, 1537704 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:45,119 : INFO : EPOCH 1 - PROGRESS: at 99.58% examples, 1549641 words/s, in_qsize 4, out_qsize 1\n",
      "2022-04-20 20:04:45,120 : INFO : worker thread finished; awaiting finish of 4 more threads\n",
      "2022-04-20 20:04:45,120 : INFO : worker thread finished; awaiting finish of 3 more threads\n",
      "2022-04-20 20:04:45,124 : INFO : worker thread finished; awaiting finish of 2 more threads\n",
      "2022-04-20 20:04:45,126 : INFO : worker thread finished; awaiting finish of 1 more threads\n",
      "2022-04-20 20:04:45,126 : INFO : worker thread finished; awaiting finish of 0 more threads\n",
      "2022-04-20 20:04:45,127 : INFO : EPOCH - 1 : training on 7922847 raw words (6264052 effective words) took 4.0s, 1553978 effective words/s\n",
      "2022-04-20 20:04:46,134 : INFO : EPOCH 2 - PROGRESS: at 27.08% examples, 1619046 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:47,136 : INFO : EPOCH 2 - PROGRESS: at 52.51% examples, 1620108 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:48,143 : INFO : EPOCH 2 - PROGRESS: at 79.36% examples, 1632954 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:48,926 : INFO : worker thread finished; awaiting finish of 4 more threads\n",
      "2022-04-20 20:04:48,936 : INFO : worker thread finished; awaiting finish of 3 more threads\n",
      "2022-04-20 20:04:48,937 : INFO : worker thread finished; awaiting finish of 2 more threads\n",
      "2022-04-20 20:04:48,940 : INFO : worker thread finished; awaiting finish of 1 more threads\n",
      "2022-04-20 20:04:48,942 : INFO : worker thread finished; awaiting finish of 0 more threads\n",
      "2022-04-20 20:04:48,942 : INFO : EPOCH - 2 : training on 7922847 raw words (6263440 effective words) took 3.8s, 1644618 effective words/s\n",
      "2022-04-20 20:04:49,949 : INFO : EPOCH 3 - PROGRESS: at 25.01% examples, 1494169 words/s, in_qsize 10, out_qsize 1\n",
      "2022-04-20 20:04:50,952 : INFO : EPOCH 3 - PROGRESS: at 48.46% examples, 1484976 words/s, in_qsize 10, out_qsize 0\n",
      "2022-04-20 20:04:51,959 : INFO : EPOCH 3 - PROGRESS: at 73.11% examples, 1498810 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:52,964 : INFO : EPOCH 3 - PROGRESS: at 97.08% examples, 1511205 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:53,061 : INFO : worker thread finished; awaiting finish of 4 more threads\n",
      "2022-04-20 20:04:53,072 : INFO : worker thread finished; awaiting finish of 3 more threads\n",
      "2022-04-20 20:04:53,075 : INFO : worker thread finished; awaiting finish of 2 more threads\n",
      "2022-04-20 20:04:53,076 : INFO : worker thread finished; awaiting finish of 1 more threads\n",
      "2022-04-20 20:04:53,081 : INFO : worker thread finished; awaiting finish of 0 more threads\n",
      "2022-04-20 20:04:53,081 : INFO : EPOCH - 3 : training on 7922847 raw words (6262793 effective words) took 4.1s, 1515416 effective words/s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-04-20 20:04:54,099 : INFO : EPOCH 4 - PROGRESS: at 26.20% examples, 1548097 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:55,105 : INFO : EPOCH 4 - PROGRESS: at 51.34% examples, 1568850 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:56,108 : INFO : EPOCH 4 - PROGRESS: at 76.24% examples, 1558888 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:57,071 : INFO : worker thread finished; awaiting finish of 4 more threads\n",
      "2022-04-20 20:04:57,076 : INFO : worker thread finished; awaiting finish of 3 more threads\n",
      "2022-04-20 20:04:57,079 : INFO : worker thread finished; awaiting finish of 2 more threads\n",
      "2022-04-20 20:04:57,080 : INFO : worker thread finished; awaiting finish of 1 more threads\n",
      "2022-04-20 20:04:57,082 : INFO : worker thread finished; awaiting finish of 0 more threads\n",
      "2022-04-20 20:04:57,083 : INFO : EPOCH - 4 : training on 7922847 raw words (6262912 effective words) took 4.0s, 1567660 effective words/s\n",
      "2022-04-20 20:04:58,092 : INFO : EPOCH 5 - PROGRESS: at 25.94% examples, 1546669 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:04:59,095 : INFO : EPOCH 5 - PROGRESS: at 51.22% examples, 1574915 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:05:00,095 : INFO : EPOCH 5 - PROGRESS: at 76.85% examples, 1579323 words/s, in_qsize 9, out_qsize 0\n",
      "2022-04-20 20:05:01,031 : INFO : worker thread finished; awaiting finish of 4 more threads\n",
      "2022-04-20 20:05:01,033 : INFO : worker thread finished; awaiting finish of 3 more threads\n",
      "2022-04-20 20:05:01,034 : INFO : worker thread finished; awaiting finish of 2 more threads\n",
      "2022-04-20 20:05:01,035 : INFO : worker thread finished; awaiting finish of 1 more threads\n",
      "2022-04-20 20:05:01,040 : INFO : worker thread finished; awaiting finish of 0 more threads\n",
      "2022-04-20 20:05:01,040 : INFO : EPOCH - 5 : training on 7922847 raw words (6262905 effective words) took 4.0s, 1585450 effective words/s\n",
      "2022-04-20 20:05:01,040 : INFO : Word2Vec lifecycle event {'msg': 'training on 39614235 raw words (31316102 effective words) took 19.9s, 1570329 effective words/s', 'datetime': '2022-04-20T20:05:01.040901', 'gensim': '4.1.2', 'python': '3.9.12 (main, Apr  5 2022, 01:53:17) \\n[Clang 12.0.0 ]', 'platform': 'macOS-10.16-x86_64-i386-64bit', 'event': 'train'}\n",
      "2022-04-20 20:05:01,041 : INFO : Word2Vec lifecycle event {'params': 'Word2Vec(vocab=25259, vector_size=300, alpha=0.025)', 'datetime': '2022-04-20T20:05:01.041221', 'gensim': '4.1.2', 'python': '3.9.12 (main, Apr  5 2022, 01:53:17) \\n[Clang 12.0.0 ]', 'platform': 'macOS-10.16-x86_64-i386-64bit', 'event': 'created'}\n",
      "/var/folders/j4/7y0hj60n09q_n50qxfl1rr4w0000gn/T/ipykernel_17865/1328840251.py:23: DeprecationWarning: Call to deprecated `init_sims` (Gensim 4.0.0 implemented internal optimizations that make calls to init_sims() unnecessary. init_sims() is now obsoleted and will be completely removed in future versions. See https://github.com/RaRe-Technologies/gensim/wiki/Migrating-from-Gensim-3.x-to-4).\n",
      "  model.init_sims(replace=True)\n",
      "/Users/florentmargery/opt/anaconda3/envs/work_env/lib/python3.9/site-packages/gensim/models/word2vec.py:909: DeprecationWarning: Call to deprecated `init_sims` (Use fill_norms() instead. See https://github.com/RaRe-Technologies/gensim/wiki/Migrating-from-Gensim-3.x-to-4).\n",
      "  self.wv.init_sims(replace=replace)\n",
      "2022-04-20 20:05:01,053 : WARNING : destructive init_sims(replace=True) deprecated & no longer required for space-efficiency\n"
     ]
    }
   ],
   "source": [
    "# Import the built-in logging module and configure it so that Word2Vec \n",
    "# creates nice output messages\n",
    "import logging\n",
    "logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s',\\\n",
    "    level=logging.INFO)\n",
    "\n",
    "# Set values for various parameters\n",
    "num_features = 300    # Word vector dimensionality                      \n",
    "min_word_count = 10   # Minimum word count                        \n",
    "num_workers = 5      # Number of threads to run in parallel\n",
    "context = 10          # Context window size                                                                                    \n",
    "downsampling = 1e-3   # Downsample setting for frequent words\n",
    "\n",
    "# Initialize and train the model (this will take some time)\n",
    "from gensim.models import word2vec\n",
    "print (\"Training model...\")\n",
    "model = word2vec.Word2Vec(sentences, workers=num_workers, \\\n",
    "            vector_size=num_features, min_count = min_word_count, \\\n",
    "            window = context, sample = downsampling)\n",
    "\n",
    "# If you don't plan to train the model any further, calling \n",
    "# init_sims will make the model much more memory-efficient.\n",
    "model.init_sims(replace=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b4a69b7",
   "metadata": {},
   "source": [
    "## Embedding du modÃ¨le Word2Vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "b454b660",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def makeFeatureVec(words, model, num_features):\n",
    "    # Function to average all of the word vectors in a given\n",
    "    # paragraph\n",
    "    #\n",
    "    # Pre-initialize an empty numpy array (for speed)\n",
    "    featureVec = np.zeros((num_features,),dtype=\"float32\")\n",
    "    #\n",
    "    nwords = 0\n",
    "    # \n",
    "    # Index2word is a list that contains the names of the words in \n",
    "    # the model's vocabulary. Convert it to a set, for speed \n",
    "    index2word_set = set(model.wv.index_to_key)\n",
    "    #\n",
    "    # Loop over each word in the review and, if it is in the model's\n",
    "    # vocaublary, add its feature vector to the total\n",
    "    for word in words:\n",
    "        if word in index2word_set: \n",
    "            nwords = nwords + 1\n",
    "            featureVec = np.add(featureVec,model.wv[word])\n",
    "    # \n",
    "    \n",
    "    # Divide the result by the number of words to get the average\n",
    "    featureVec = np.divide(featureVec,nwords)\n",
    "    return featureVec\n",
    "\n",
    "\n",
    "def getAvgFeatureVecs(reviews, model, num_features):\n",
    "    # Given a set of reviews (each one a list of words), calculate \n",
    "    # the average feature vector for each one and return a 2D numpy array \n",
    "    # \n",
    "    # Initialize a counter\n",
    "    counter = 0\n",
    "    # \n",
    "    # Preallocate a 2D numpy array, for speed\n",
    "    reviewFeatureVecs = np.zeros((len(reviews),num_features),dtype=\"float32\")\n",
    "\n",
    "    # \n",
    "    # Loop through the reviews\n",
    "    for review in reviews:\n",
    "       #\n",
    "       # Print a status message every 1000th review\n",
    "        if counter%1000. == 0.:\n",
    "            print (\"Review %d of %d\" % (counter, len(reviews)))\n",
    "       # \n",
    "       # Call the function (defined above) that makes average feature vectors\n",
    "        reviewFeatureVecs[counter] = makeFeatureVec(review, model,num_features)\n",
    "       #\n",
    "       # Increment the counter\n",
    "        counter = counter + 1\n",
    "    return reviewFeatureVecs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "ae78566b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating average feature vecs for test questions\n",
      "Review 0 of 37339\n",
      "Review 1000 of 37339\n",
      "Review 2000 of 37339\n",
      "Review 3000 of 37339\n",
      "Review 4000 of 37339\n",
      "Review 5000 of 37339\n",
      "Review 6000 of 37339\n",
      "Review 7000 of 37339\n",
      "Review 8000 of 37339\n",
      "Review 9000 of 37339\n",
      "Review 10000 of 37339\n",
      "Review 11000 of 37339\n",
      "Review 12000 of 37339\n",
      "Review 13000 of 37339\n",
      "Review 14000 of 37339\n",
      "Review 15000 of 37339\n",
      "Review 16000 of 37339\n",
      "Review 17000 of 37339\n",
      "Review 18000 of 37339\n",
      "Review 19000 of 37339\n",
      "Review 20000 of 37339\n",
      "Review 21000 of 37339\n",
      "Review 22000 of 37339\n",
      "Review 23000 of 37339\n",
      "Review 24000 of 37339\n",
      "Review 25000 of 37339\n",
      "Review 26000 of 37339\n",
      "Review 27000 of 37339\n",
      "Review 28000 of 37339\n",
      "Review 29000 of 37339\n",
      "Review 30000 of 37339\n",
      "Review 31000 of 37339\n",
      "Review 32000 of 37339\n",
      "Review 33000 of 37339\n",
      "Review 34000 of 37339\n",
      "Review 35000 of 37339\n",
      "Review 36000 of 37339\n",
      "Review 37000 of 37339\n"
     ]
    }
   ],
   "source": [
    "# ****************************************************************\n",
    "# Calculate average feature vectors for training and testing sets,\n",
    "# using the functions we defined above. Notice that we now use stop word\n",
    "# removal.\n",
    "\n",
    "clean_train_questions = []\n",
    "# Ici, data_to_train a Ã©tÃ© dÃ©fini dans la partie \"Gestion des Tags\". Cela correspond aux donnÃ©es avec \n",
    "# au moins 1 des 10 tags les plus rÃ©curents. C'est sur ces donnÃ©es que l'on va entrainer notre modÃ¨le supervisÃ©. \n",
    "for question in data_to_train:\n",
    "    clean_train_questions.append(sentence_to_wordlist( question, \\\n",
    "        remove_stopwords=True ))\n",
    "    \n",
    "print (\"Creating average feature vecs for test questions\")\n",
    "trainDataVecs = getAvgFeatureVecs(clean_train_questions, model, num_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "468b2a5e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import preprocessing\n",
    "label_encoder = preprocessing.LabelEncoder()\n",
    "target_to_train_encoded = label_encoder.fit_transform(target_to_train)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(trainDataVecs,target_to_train_encoded,test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "de00474f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.664\n",
      "{'estimator__C': 1, 'estimator__degree': 1, 'estimator__kernel': 'poly'}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import load_iris\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "\n",
    "model_to_set = OneVsRestClassifier(SVC(kernel=\"poly\"))\n",
    "\n",
    "parameters = {\n",
    "    \"estimator__C\": [0.1,1,10],\n",
    "    \"estimator__kernel\": [\"poly\",\"rbf\"],\n",
    "    \"estimator__degree\":[1, 2, 3],\n",
    "}\n",
    "\n",
    "model_tunning = GridSearchCV(model_to_set, param_grid=parameters)\n",
    "\n",
    "model_tunning.fit(X_train[0:1000], y_train[0:1000])\n",
    "\n",
    "print (model_tunning.best_score_)\n",
    "print (model_tunning.best_params_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "f17d8329",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OneVsRestClassifier(estimator=SVC(probability=True))"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "#Avec Probas :\n",
    "clf = OneVsRestClassifier(SVC(probability=True))\n",
    "clf.fit(X_train[0:1000], y_train[0:1000])\n",
    "\n",
    "#Sans Probas : \n",
    "#clf = OneVsRestClassifier(SVC(probability=False)).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5b7669f",
   "metadata": {},
   "source": [
    "### Pipeline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa2adfae",
   "metadata": {},
   "source": [
    "### CrÃ©ons une pipeline afin de faciliter la prÃ©diction de notre notre modÃ¨le. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "fa2db26f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import preprocessing\n",
    "label_encoder = preprocessing.LabelEncoder()\n",
    "target_to_train_encoded = label_encoder.fit_transform(target_to_train)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(data_to_train,target_to_train_encoded,test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "18893090",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37339"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(target_to_train_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "b0c5f3d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cleaning_question_W2V(data_to_train):\n",
    "    \n",
    "    clean_train_questions = []\n",
    "    # Ici, data_to_train a Ã©tÃ© dÃ©fini dans la partie \"Gestion des Tags\". Cela correspond aux donnÃ©es avec \n",
    "    # au moins 1 des 10 tags les plus rÃ©curents. C'est sur ces donnÃ©es que l'on va entrainer notre modÃ¨le supervisÃ©. \n",
    "    for question in data_to_train:\n",
    "        clean_train_questions.append(sentence_to_wordlist( question, \\\n",
    "            remove_stopwords=True ))\n",
    "    \n",
    "    print (\"Creating average feature vecs for test questions\")\n",
    "    trainDataVecs = getAvgFeatureVecs(clean_train_questions, model, num_features)\n",
    "    return trainDataVecs\n",
    "\n",
    "# CrÃ©ation d'un transformeur, permettant d'intÃ©grer notre fonction dans la pipeline. \n",
    "\n",
    "from sklearn.preprocessing import FunctionTransformer\n",
    "transformer_2 = FunctionTransformer(cleaning_question_W2V)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "32a269b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24c10a1a",
   "metadata": {},
   "source": [
    "### CrÃ©ation de la pipeline "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "a185360c",
   "metadata": {},
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "   ('transformer', transformer_2), ('clf',OneVsRestClassifier(SVC(probability=True))), \n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "e3a46809",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating average feature vecs for test questions\n",
      "Review 0 of 26137\n",
      "Review 1000 of 26137\n",
      "Review 2000 of 26137\n",
      "Review 3000 of 26137\n",
      "Review 4000 of 26137\n",
      "Review 5000 of 26137\n",
      "Review 6000 of 26137\n",
      "Review 7000 of 26137\n",
      "Review 8000 of 26137\n",
      "Review 9000 of 26137\n",
      "Review 10000 of 26137\n",
      "Review 11000 of 26137\n",
      "Review 12000 of 26137\n",
      "Review 13000 of 26137\n",
      "Review 14000 of 26137\n",
      "Review 15000 of 26137\n",
      "Review 16000 of 26137\n",
      "Review 17000 of 26137\n",
      "Review 18000 of 26137\n",
      "Review 19000 of 26137\n",
      "Review 20000 of 26137\n",
      "Review 21000 of 26137\n",
      "Review 22000 of 26137\n",
      "Review 23000 of 26137\n",
      "Review 24000 of 26137\n",
      "Review 25000 of 26137\n",
      "Review 26000 of 26137\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('transformer',\n",
       "                 FunctionTransformer(func=<function cleaning_question_W2V at 0x7fc497ee71f0>)),\n",
       "                ('clf', OneVsRestClassifier(estimator=SVC(probability=True)))])"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "920d4bdf",
   "metadata": {},
   "source": [
    "### PrÃ©diction du classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "d30933c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating average feature vecs for test questions\n",
      "Review 0 of 3\n",
      "le texte nÂ° 0 est : \n",
      " Convert a string representation of a hex dump to a byte array using Java? I am looking for a way to convert a long string (from a dump), that represents hex values into a byte array.\n",
      "I couldn't have phrased it better than the person that posted the same question here.\n",
      "But to keep it original, I'll phrase it my own way: suppose I have a string \"00A0BF\" that I would like interpreted as the\n",
      "byte[] {0x00,0xA0,0xBf}\n",
      "\n",
      "what should I do?\n",
      "I am a Java novice and ended up using BigInteger and watching out for leading hex zeros. But I think it is ugly and I am sure I am missing something simple. \n",
      "\n",
      "LA PREDICTION EST : java\n",
      "VECTEUR DE PROBA [0.06951857 0.00501554 0.14602609 0.03121014 0.03690474 0.02148504\n",
      " 0.07733405 0.56292812 0.01578561 0.0337921 ]\n",
      "le texte nÂ° 1 est : \n",
      " Where and When to get data for Watch Complication After working with complications for a few days, I feel confident saying the following about the update process for updates that happen at a prescribed interval:\n",
      "\n",
      "The system calls requestedUpdateDidBegin()\n",
      "\n",
      "This is where you can determine if your data has changed. If it hasn't, your app doesn't have to do anything. If your data has changed, you need to call either:\n",
      "\n",
      "\n",
      "reloadTimelineForComplication if all your data needs to be reset.\n",
      "extendTimelineForComplication if you only need to add new items to the end of the complication timeline.\n",
      "\n",
      "Note: the system may actually call requestedUpdateBudgetExhausted() instead of requestedUpdateDidBegin() if you've spent too much of your complication's time budget for the day. This is the reason for this question.\n",
      "\n",
      "If you called reloadTimelineForComplication, the system will call getCurrentTimelineEntryForComplication (along with the future and past variants that get arrays, depending on your time travel settings)\n",
      "This is conjecture as I haven't tested it yet, but I believe if you called extendTimelineForComplication that only the getTimelineEntriesForComplication(... afterDate date: NSDate ...) would be called.\n",
      "The system will then call getNextRequestedUpdateDateWithHandler so you can specify how long until your complication requires a new update.\n",
      "\n",
      "Apple's documentation is quite clear that you should not ask for updates too often, or conduct too much processing in the complication code or you will exhaust your time budget and your complication will stop updating. So, my question is: where and when do you do the update?\n",
      "For context, my scenario is a URL with return data that changes up to two times per hour.\n",
      "The most obvious place in which to put the URL fetch code is func requestedUpdateDidBegin() Fetch the data, store it, and if there's no change, just return. If there was a change then extend or reload the timeline.\n",
      "However, a URL fetch can be costly. Alternatives:\n",
      "\n",
      "Put the code on the phone app and send it over with a WCSession, but if the user closes that app then the updates will no longer happen.\n",
      "Use push updates, but this isn't a web app, so I have no place to send them from.\n",
      "Obviously I will update all the data when the user interacts with the watch app, but that now means it only gets updated when the user uses the app, which negates the need for a complication.\n",
      "\n",
      "Is there anywhere else? Can I have a periodic function in the watch app that isn't part of the complication? Where is the right place to fetch the data for a complication update?\n",
      "\n",
      "LA PREDICTION EST : android\n",
      "VECTEUR DE PROBA [0.07430815 0.23400474 0.12738661 0.00555993 0.03740647 0.22310595\n",
      " 0.1311804  0.01891375 0.14546672 0.00266729]\n",
      "le texte nÂ° 2 est : \n",
      " ASP.NET: Unable to validate data What is the cause of this exception in ASP.NET?  Obviously it is a viewstate exception, but I can't reproduce the error on the page that is throwing the exception (a simple two TextBox form with a button and navigation links).\n",
      "FWIW, I'm not running a web farm.\n",
      "Exception\n",
      "\n",
      "Error Message: Unable to validate\n",
      "  data.\n",
      "Error Source: System.Web\n",
      "Error Target Site: Byte[]\n",
      "  GetDecodedData(Byte[], Byte[], Int32,\n",
      "  Int32, Int32 ByRef)\n",
      "\n",
      "Post Data\n",
      "\n",
      "VIEWSTATE:\n",
      "/wEPDwULLTE4NTUyODcyMTFkZF96FHxDUAHIY3NOAMRJYZ+CKsnB\n",
      "EVENTVALIDATION:\n",
      "/wEWBAK+8ZzHAgKOhZRcApDF79ECAoLch4YMeQ2ayv/Gi76znHooiRyBFrWtwyg=\n",
      "\n",
      "Exception Stack Trace\n",
      "   at System.Web.UI.ViewStateException.ThrowError(Exception inner, String persistedState, String errorPageMessage, Boolean macValidationError)\n",
      "   at System.Web.UI.ObjectStateFormatter.Deserialize(String inputString)\n",
      "   at System.Web.UI.ObjectStateFormatter.System.Web.UI.IStateFormatter.Deserialize(String serializedState)\n",
      "   at System.Web.UI.Util.DeserializeWithAssert(IStateFormatter formatter, String serializedState)\n",
      "   at System.Web.UI.HiddenFieldPageStatePersister.Load()\n",
      "   at System.Web.UI.Page.LoadPageStateFromPersistenceMedium()\n",
      "   at System.Web.UI.Page.LoadAllState()\n",
      "   at System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)\n",
      "   at System.Web.UI.Page.ProcessRequest(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)\n",
      "   at System.Web.UI.Page.ProcessRequest()\n",
      "   at System.Web.UI.Page.ProcessRequestWithNoAssert(HttpContext context)\n",
      "   at System.Web.UI.Page.ProcessRequest(HttpContext context)\n",
      "   at ASP.default_aspx.ProcessRequest(HttpContext context)\n",
      "   at System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()\n",
      "   at System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)\n",
      "\n",
      "~ William Riley-Land\n",
      "\n",
      "LA PREDICTION EST : c#\n",
      "VECTEUR DE PROBA [0.03784381 0.02436851 0.77741989 0.00174542 0.0531841  0.03221564\n",
      " 0.03060444 0.01710912 0.02456673 0.00094234]\n"
     ]
    }
   ],
   "source": [
    "clean_test_questions = []\n",
    "data_to_test = data.Body[12356:12359]\n",
    "for question in data_to_test:\n",
    "    clean_test_questions.append(sentence_to_wordlist( question, \\\n",
    "        remove_stopwords=True ))\n",
    "    \n",
    "print (\"Creating average feature vecs for test questions\")\n",
    "testDataVecs = getAvgFeatureVecs(clean_test_questions, model, num_features)\n",
    "\n",
    "prediction = clf.predict(testDataVecs)\n",
    "prediction = label_encoder.inverse_transform(prediction)\n",
    "proba = clf.predict_proba(testDataVecs)\n",
    "for i in range(len(prediction)):\n",
    "    print('le texte nÂ°',i,'est : \\n', BeautifulSoup(data_to_test.iloc[i]).get_text() )\n",
    "    print('LA PREDICTION EST :' , prediction[i])\n",
    "    print('VECTEUR DE PROBA', proba[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e97250d7",
   "metadata": {},
   "source": [
    "### Optional : Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ec1b2d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "import time\n",
    "\n",
    "start = time.time() # Start time\n",
    "\n",
    "# Set \"k\" (num_clusters) to be 1/5th of the vocabulary size, or an\n",
    "# average of 5 words per cluster\n",
    "word_vectors = model.wv.vectors\n",
    "num_clusters = int(word_vectors.shape[0] / 5)\n",
    "\n",
    "# Initalize a k-means object and use it to extract centroids\n",
    "kmeans_clustering = KMeans(n_clusters = num_clusters)\n",
    "idx = kmeans_clustering.fit_predict(word_vectors)\n",
    "\n",
    "# Get the end time and print how long the process took\n",
    "end = time.time()\n",
    "elapsed = end - start\n",
    "print (\"Time taken for K Means clustering: \", elapsed, \"seconds.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3264628",
   "metadata": {},
   "source": [
    "### Pistes de travail"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c665060",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "probas = pipeline.predict_proba(X_train[200:201])[0]\n",
    "print(probas)\n",
    "\n",
    "result = []\n",
    "for idx, prob in enumerate(probas) : \n",
    "    if prob > 0.1:\n",
    "        result.append(idx)\n",
    "result = label_encoder.inverse_transform(result)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3cbf4ef9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "pipeline.predict(X_train[200:201])[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af63aebb",
   "metadata": {},
   "outputs": [],
   "source": [
    "probas = pipeline.predict_proba(X_train[200:201])[0]\n",
    "print(probas)\n",
    "\n",
    "result = []\n",
    "for idx, prob in enumerate(probas) : \n",
    "    if prob > 0.1:\n",
    "        result.append(idx)\n",
    "result = label_encoder.inverse_transform(result)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "842056d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_2 =[]\n",
    "for idx,i in enumerate(result) : \n",
    "    result_2.append(i)\n",
    "    result_2.append(probas[idx])\n",
    "result_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb963ed5",
   "metadata": {},
   "source": [
    "# API Word2Vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7d134f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from fast_dash import FastDash\n",
    "from fast_dash.Components import Text\n",
    "\n",
    "# Step 1: Define your model inference\n",
    "def text_to_text_function(question):\n",
    "    result = []\n",
    "    result_2  = []\n",
    "    probas = []\n",
    "    #result = pipeline.predict([question])\n",
    "    #result = label_encoder.inverse_transform(result)[0]\n",
    "    result_proba = pipeline.predict_proba([question])\n",
    "    print(result_proba)\n",
    "    for idx, prob in enumerate(result_proba[0]) : \n",
    "        if prob > 0.1:\n",
    "            result.append(idx)\n",
    "            probas.append(probas)\n",
    "    print(result)\n",
    "    result = label_encoder.inverse_transform(result)\n",
    "    return result\n",
    "\n",
    "# Step 2: Specify the input and output components\n",
    "app = FastDash(callback_fn=text_to_text_function, \n",
    "                inputs=Text, \n",
    "                outputs=Text, \n",
    "                title='App title')\n",
    "\n",
    "# Step 3: Run your app!\n",
    "app.run()\n",
    "\n",
    "# * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
